<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SAWD</title>
  
  <subtitle>NOT CODER BUT S.W DEVELOPER</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dev-sawd.github.io/"/>
  <updated>2022-12-07T09:29:43.733Z</updated>
  <id>https://dev-sawd.github.io/</id>
  
  <author>
    <name>SAWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[ETC] 운영중인 http 사이트를 https로...</title>
    <link href="https://dev-sawd.github.io/2022/12/07/ETC-http-to-https/"/>
    <id>https://dev-sawd.github.io/2022/12/07/ETC-http-to-https/</id>
    <published>2022-12-07T08:38:14.000Z</published>
    <updated>2022-12-07T09:29:43.733Z</updated>
    
    <content type="html"><![CDATA[<p>기존에 공부하면서 만든 사이트는 http로 운영되고 있었습니다.</p><p>그런데 사용자가 조금씩 늘고 https도 공부해서 바꿔야 겠다는 생각이 문득 들더군요..</p><p>그래서 시도해봤습니다.</p><a id="more"></a><p>가장 좋은 방법은 개발 단계에서 https로 개발해서 오픈했으면 좋았겠지만 실력이나 시간적으로 여유가 없었습니다.</p><p>https로 바꾸면서 http의 서비스를 갑자기 막을수는 없고 https로의 유도가 필요했습니다.</p><p>처음에는 <code>http 페이지에 xx월 xx일에 http가 만료되니 https로 접속해주세요!</code> 라고 안내할까 했습니다.</p><p>하지만 제가 사용자라면 저 문구를 발견하고 https로 다시 접속해야하는 불편함이 분명하게 있을거라 판단했습니다.</p><p>고민 끝에 <code>https를 완전히 막지 않고 http로 접근한 사용자에게 https로 강제 이동시키는 방향</code>으로 개발했습니다.</p><h1 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h1><p>AWS에서 Express로 구성했고 pm2로 관리하고있었습니다.</p><h3 id="HTTPS-443-포트-열기"><a href="#HTTPS-443-포트-열기" class="headerlink" title="HTTPS(443) 포트 열기"></a>HTTPS(443) 포트 열기</h3><img src="/2022/12/07/ETC-http-to-https/1.png" class=""><p>좌측 메뉴에서 인스턴스를 선택 하고 현재 사용중인 인스턴스의 보안 그룹 이름을 확인합니다.</p><img src="/2022/12/07/ETC-http-to-https/2.png" class=""><p>확인한 보안 그룹 아이템을 선택하여 하단의 인바운드 규칙 탭에서 인바운드 규칙 편집을 선택합니다.</p><img src="/2022/12/07/ETC-http-to-https/3.png" class=""><p>좌측 하단의 규칙 추가를 선택하여 HTTPS를 선택하여 443포트를 열어줍니다.</p><br><h3 id="HTTPS-443-포트를-8080으로-포트포워딩"><a href="#HTTPS-443-포트를-8080으로-포트포워딩" class="headerlink" title="HTTPS(443) 포트를 8080으로 포트포워딩"></a>HTTPS(443) 포트를 8080으로 포트포워딩</h3><p>저는 기존에도 HTTP(80) 포트를 8000으로 포트포워딩해서 쓰고있었습니다.</p><p>이번에는 HTTPS(443) 포트를 8080으로 포트포워딩 설정을 해서 구성할겁니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8080</span><br></pre></td></tr></table></figure><p>잘 설정되었는지 확인합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -L -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT) </span><br><span class="line">target     prot opt source               destination </span><br><span class="line">REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:https redir ports 8080 </span><br><span class="line">REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:http redir ports 8000</span><br></pre></td></tr></table></figure><br><h3 id="기존-http-서버-코드를-https로-변경"><a href="#기존-http-서버-코드를-https로-변경" class="headerlink" title="기존 http 서버 코드를 https로 변경"></a>기존 http 서버 코드를 https로 변경</h3><p>SSL 인증서 사이트로 부터 받은 파일들을 이용해 createServer의 옵션을 아래와 같이 설정해줍니다.</p><figure class="highlight javascript"><figcaption><span>https_server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require 생략</span></span><br><span class="line"><span class="keyword">const</span> HTTPS_PORT = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(KEY_PEM_PATH), </span><br><span class="line">  cert: fs.readFileSync(CRT_PEM_PATH),</span><br><span class="line">  ca : fs.readFileSync(CA_PEM_PATH)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https.createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`SSL Server is running at port <span class="subst">$&#123;HTTPS_PORT&#125;</span>`</span>);</span><br><span class="line">&#125;).listen(HTTPS_PORT);</span><br></pre></td></tr></table></figure><br><h3 id="기존-http-서버를-대체할-코드"><a href="#기존-http-서버를-대체할-코드" class="headerlink" title="기존 http 서버를 대체할 코드"></a>기존 http 서버를 대체할 코드</h3><p>기존의 8000포트 서버를 8080 https용으로 변경했으니 8000포트의 새 서버를 만들어줬습니다.</p><figure class="highlight javascript"><figcaption><span>http_server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>); </span><br><span class="line"><span class="keyword">const</span> app = express(); </span><br><span class="line"><span class="keyword">const</span> HTTP_PORT = <span class="number">8000</span>; </span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; </span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/index.html'</span>) </span><br><span class="line">&#125;); </span><br><span class="line">app.listen(HTTP_PORT, () =&gt; &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server is running at port <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>html의 meta 태그를 이용해 즉시 https url로 이동시켜줄겁니다.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; url=https://YOUR_HTTPS_URL"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="pm2를-이용해-구동"><a href="#pm2를-이용해-구동" class="headerlink" title="pm2를 이용해 구동"></a>pm2를 이용해 구동</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start http_server.js --name http_server</span><br><span class="line">$ pm2 start https_server.js --name https_server</span><br></pre></td></tr></table></figure><p>잘 구동되는지 확인해봅시다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 list </span><br><span class="line">┌─────┬───────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐ </span><br><span class="line">│ id  │ name              │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │ </span><br><span class="line">├─────┼───────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤ </span><br><span class="line">│ 17  │ https_server      │ default     │ N&#x2F;A     │ fork    │ 495678   │ 0M     │ 0    │ online    │ 0%       │ 42.1mb   │ ubuntu   │ disabled │ </span><br><span class="line">│ 3   │ http_server       │ default     │ N&#x2F;A     │ fork    │ 147708   │ 0M     │ 0    │ online    │ 0%       │ 20.3mb   │ ubuntu   │ disabled │ </span><br><span class="line">└─────┴───────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘</span><br></pre></td></tr></table></figure><p>그리고 실제로 기존 http url로 접속하여 https로 이동시켜주는지 확인하면 작업은 끝납니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;기존에 공부하면서 만든 사이트는 http로 운영되고 있었습니다.&lt;/p&gt;
&lt;p&gt;그런데 사용자가 조금씩 늘고 https도 공부해서 바꿔야 겠다는 생각이 문득 들더군요..&lt;/p&gt;
&lt;p&gt;그래서 시도해봤습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="AWS" scheme="https://dev-sawd.github.io/tags/AWS/"/>
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>[Golang] Tesseract를 이용한 OCR</title>
    <link href="https://dev-sawd.github.io/2022/04/26/Golang-tesseract-ocr/"/>
    <id>https://dev-sawd.github.io/2022/04/26/Golang-tesseract-ocr/</id>
    <published>2022-04-26T11:41:17.000Z</published>
    <updated>2022-04-26T12:03:43.099Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트에서 OCR을 할 일이 생김</p><p>Go언어를 이용할거라 찾아봤는데 역시나 있음!</p><a href="https://github.com/otiai10/gosseract" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/677741f2acde7b343801e159301ce0a3fdd6dbc25b97fae5362ac82c9bdbf6ae/otiai10/gosseract"></img></div><div class="descriptions"><div class="og-title">GitHub - otiai10/gosseract: Go package for OCR (Optical Character Recognition), by using Tesseract C++ library</div><div class="og-description">Go package for OCR (Optical Character Recognition), by using Tesseract C++ library - GitHub - otiai10/gosseract: Go package for OCR (Optical…</div></div></div></a><a id="more"></a><p>해당 사이트에서 서버 어플리케이션으로 지원하는 gosseract OCR을 이용해 테스트 이미지를 넣어봤음</p><p>의외로 잘 인식했고 이 라이브러리를 사용하기로 결정</p><p>Install 부분을 보니 tesseract-ocr 라이브러리를 이용한 gosseract를 사용하는건데 생각보다 쉽지 않았음</p><p>토이 프로젝트의 환경이 windows 환경인데 issue에 나와 같이 진행 못하는 사람들이 몇몇 확인되었음</p><p>설치부터 난관에 부딪혔고 시간이 많지 않았기 때문에 다른 방법을 생각해야했음</p><p>그리고 tesseract-ocr을 설치하고 혹시나 해서 커맨드로 직접 명령 프롬프트에서 실행할 수 있는지 확인</p><p>설치 파일 위치는 여기 &gt; <a href="https://github.com/UB-Mannheim/tesseract/wiki" target="_blank" rel="noopener">https://github.com/UB-Mannheim/tesseract/wiki</a></p><p>다행히 실행하는데는 큰 문제가 없었고 Go언어에서 tesseract.exe와 ocr 변환을 원하는 이미지를 넣고 실행하기로 결정</p><p>명령 프롬프트에서 기본 사용법은 아래와 같음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tesseract.exe temp.png stdout</span><br></pre></td></tr></table></figure><p>이걸 Go언어에서는 <code>exec.Command</code>를 이용해 실행하면 됨</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result, err :&#x3D; exec.Command(&quot;%tesseract_path%\\tesseract.exe&quot;, &quot;temp.png&quot;, &quot;stdout&quot;, &quot;--psm&quot;, &quot;8&quot;, &quot;-c&quot;, &quot;tessedit_char_whitelist&#x3D;0123456789&quot;).Output()</span><br></pre></td></tr></table></figure><p><code>psm</code> 인자는 <code>Page segmentation modes</code>라고 하는데 인식 규칙정도라고 할 수 있음</p><p>자세한건 검색하면 나오는데 내가 테스트한 이미지들은 <code>8</code>에서 가장 인식률이 좋았음</p><p>그리고 숫자만 필터링 하기 위해 <code>-c tessedit_char_whitelist=0123456789</code> 인자를 추가했음</p><p>결과는 생각보다 쉽게 OCR을 변환한 정보를 얻을 수는 있는데 신뢰도를 올리기 위해서는 몇가지 작업이 더 필요할 것으로 보이고 테스트를 통해 따로 포스팅할 예정</p><br>ps. 그리고 저 gosseract를 이용해서 깔끔하게 처리하고싶어..]]></content>
    
    <summary type="html">
    
      &lt;p&gt;토이 프로젝트에서 OCR을 할 일이 생김&lt;/p&gt;
&lt;p&gt;Go언어를 이용할거라 찾아봤는데 역시나 있음!&lt;/p&gt;
&lt;a href=&quot;https://github.com/otiai10/gosseract&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://opengraph.githubassets.com/677741f2acde7b343801e159301ce0a3fdd6dbc25b97fae5362ac82c9bdbf6ae/otiai10/gosseract&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;GitHub - otiai10/gosseract: Go package for OCR (Optical Character Recognition), by using Tesseract C++ library&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;Go package for OCR (Optical Character Recognition), by using Tesseract C++ library - GitHub - otiai10/gosseract: Go package for OCR (Optical…&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="OCR" scheme="https://dev-sawd.github.io/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드에서의 MVC...? (2)</title>
    <link href="https://dev-sawd.github.io/2022/04/22/Golang-mvc-pattern2/"/>
    <id>https://dev-sawd.github.io/2022/04/22/Golang-mvc-pattern2/</id>
    <published>2022-04-22T02:17:46.000Z</published>
    <updated>2022-04-26T11:39:18.031Z</updated>
    
    <content type="html"><![CDATA[<p>이전에 체인코드에서의 MVC패턴에 대해서 공부하고 앞으로의 프로젝트에서 적용하려고 정리했습니다.</p><p>그리고 실제로 프로젝트 투입 후 이렇게 저렇게 구조를 정리해본 결과를 한번 더 정리하려 합니다.</p><p>완성도는 올라간것 같지만 아직 손봐야될 부분이 생길수도 있다고 생각합니다.</p><hr><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><h3 id="기존-프로젝트-구조"><a href="#기존-프로젝트-구조" class="headerlink" title="기존 프로젝트 구조"></a>기존 프로젝트 구조</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">├─controller</span><br><span class="line">├─dao</span><br><span class="line">├─dto</span><br><span class="line">└─service</span><br></pre></td></tr></table></figure><a id="more"></a><p>이 구조의 문제는 큰 기능별로 패키지를 묶었는데 Golang의 패키지 사상과 맞지 않았음</p><p>프로젝트의 덩치가 커지면 여기 저기 파일을 생성해 개발하고 또 수정되면 각 폴더를 찾아가며 관련 부분을 수정해야하는 불편함이 발생</p><h3 id="수정된-프로젝트-구조"><a href="#수정된-프로젝트-구조" class="headerlink" title="수정된 프로젝트 구조"></a>수정된 프로젝트 구조</h3><p>feature 별로 패키지를 묶고 개발 및 수정시 여기저기 폴더를 이동하며 수정하는 불편함을 최소화</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">|   main.go</span><br><span class="line">|   personController.go</span><br><span class="line">|</span><br><span class="line">+---DB</span><br><span class="line">|       DBManager.go</span><br><span class="line">|</span><br><span class="line">\---person</span><br><span class="line">        person.go</span><br><span class="line">        service.go</span><br></pre></td></tr></table></figure><h1 id="person에서-다른-서비스를-호출해야-할때"><a href="#person에서-다른-서비스를-호출해야-할때" class="headerlink" title="person에서 다른 서비스를 호출해야 할때"></a>person에서 다른 서비스를 호출해야 할때</h1><p>고민을 많이 했던 부분인데 결과적으로는 person controller에서 다른 feature의 service를 호출하는것으로 생각</p><p>person의 service에서 다른 feature의 service를 호출하지 않은 이유는 service는 해당 feature의 기능만 담당해 feature간 의존성을 줄이기 위해서 service를 호출하는것은 controller</p><p>그리고 호출 순서도 controller에서 관리</p><script src="//gist.github.com/033504fe87a1ce67c602773803bd6061.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이전에 체인코드에서의 MVC패턴에 대해서 공부하고 앞으로의 프로젝트에서 적용하려고 정리했습니다.&lt;/p&gt;
&lt;p&gt;그리고 실제로 프로젝트 투입 후 이렇게 저렇게 구조를 정리해본 결과를 한번 더 정리하려 합니다.&lt;/p&gt;
&lt;p&gt;완성도는 올라간것 같지만 아직 손봐야될 부분이 생길수도 있다고 생각합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;폴더-구조&quot;&gt;&lt;a href=&quot;#폴더-구조&quot; class=&quot;headerlink&quot; title=&quot;폴더 구조&quot;&gt;&lt;/a&gt;폴더 구조&lt;/h1&gt;&lt;h3 id=&quot;기존-프로젝트-구조&quot;&gt;&lt;a href=&quot;#기존-프로젝트-구조&quot; class=&quot;headerlink&quot; title=&quot;기존 프로젝트 구조&quot;&gt;&lt;/a&gt;기존 프로젝트 구조&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\GOPROJECT\SRC\MVC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─controller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─dao&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─dto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└─service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="체인코드에서의 MVC...?" scheme="https://dev-sawd.github.io/tags/%EC%B2%B4%EC%9D%B8%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-MVC/"/>
    
  </entry>
  
  <entry>
    <title>[React] 혼자 만들어본 채팅 웹 앱(클라이언트 부분)</title>
    <link href="https://dev-sawd.github.io/2022/03/14/React-chatting-socket-client/"/>
    <id>https://dev-sawd.github.io/2022/03/14/React-chatting-socket-client/</id>
    <published>2022-03-14T03:46:52.000Z</published>
    <updated>2022-03-14T06:02:37.623Z</updated>
    
    <content type="html"><![CDATA[<p>이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 클라이언트 부분 설명입니다.</p><p>관련 글을 보고싶은 분은 글 최하단의 태그 <code>Toy project</code> 링크를 눌러 확인해보세요!</p><p>설명에 앞서 프론트를 전문으로 하는 개발자가 아니기 때문에 어색한 부분이 있을 수 있습니다.</p><p>특히 디자인 부분은.. 더이상의 설명은 생략하겠습니다 ㅜㅜ</p><hr><p>서버와는 다르게 클라이언트는 코드가 긴편이다.</p><a id="more"></a><h1 id="저장소-주소"><a href="#저장소-주소" class="headerlink" title="저장소 주소"></a>저장소 주소</h1><a href="https://github.com/dev-sawd/chat-react" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/d56d93c00d882fde4c29a51e7f69bd625535b4780717dcbe8d4d9d35ad460f26/dev-sawd/chat-react"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/chat-react</div><div class="og-description">Contribute to dev-sawd/chat-react development by creating an account on GitHub.</div></div></div></a><br><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dev-sawd&#x2F;chat-react</span><br><span class="line">cd chat-react</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br><h1 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><br><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><h3 id="로그인"><a href="#로그인" class="headerlink" title="로그인"></a>로그인</h3><img src="/2022/03/14/React-chatting-socket-client/1.png" class=""><p>내가 만든 채팅 웹 앱은 첫 화면이 로그인 화면이다.</p><p>따라서 로그인 화면이 떴을때 서버와의 소켓 연결을 시도한다.</p><figure class="highlight javascript"><figcaption><span>src/login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    SocketManager.setSocket(io.connect(<span class="string">'http://localhost:4000'</span>))</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>서버에서는 <code>io.on(&#39;connection&#39;, (socket) =&gt; {...}</code> 이벤트가 호출된다.</p><figure class="highlight javascript"><figcaption><span>src/login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 로그인 버튼 onClick</span></span><br><span class="line">onClick=&#123;() =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (userName === <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  dispatch(setLoginUser(userName));</span><br><span class="line">  SocketManager.getSocket().emit(<span class="string">'login'</span>, &#123;userName&#125;);</span><br><span class="line">  SocketManager.getSocket().on(<span class="string">'returnLoginResponse'</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">result, userNameList</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          dispatch(setUserNameList(userNameList));</span><br><span class="line">          navigate(<span class="string">'/main'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">'같은 아이디가 이미 존재합니다'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>입력한 ID가 공백이 아니라면 서버로 <code>login</code> 이벤트를 호출한다.</p><p>이후 서버로부터 <code>returnLoginResponse</code> 이벤트가 호출됐을때 채팅 메인페이지로 이동하거나 같은 아이디가 존재하는지 경고창을 보이는등의 처리를 한다.</p><blockquote><p>지금 보니 <code>returnLoginResponse</code> 이벤트는 useEffect에서 지정하면 조금 더 좋을것 같다.</p></blockquote><br><h3 id="채팅-메인-페이지"><a href="#채팅-메인-페이지" class="headerlink" title="채팅 메인 페이지"></a>채팅 메인 페이지</h3><img src="/2022/03/14/React-chatting-socket-client/2.png" class=""><p>스크린샷의 좌측 리스트 영역으로 로그인한 사용자 목록과 함께 가장 최근 리스트를 간략하게 보여준다.</p><p>우측은 간단한 웰컴 페이지와 함께 대화 상대를 선택하면 채팅 방으로 변경된다.</p><p>이 화면에서는 주로 state에 따라 UI를 변경하고 소켓으로부터 받은 정보를 Redux에 전달한다.</p><figure class="highlight javascript"><figcaption><span>src/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    socket.on(<span class="string">'message'</span>, (message) =&gt; &#123;</span><br><span class="line">        dispatch(addMessage(message))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'loginUser'</span>, (userName) =&gt; &#123;</span><br><span class="line">        dispatch(addUserName(userName))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'logoutUser'</span>, (userName) =&gt; &#123;</span><br><span class="line">        dispatch(deleteUserName(userName))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><br><h5 id="message"><a href="#message" class="headerlink" title="message"></a>message</h5><p>서버에서 <code>message</code> 이벤트를 호출해 메세지를 수신하면 Redux로 저장한다.</p><br><h5 id="loginUser"><a href="#loginUser" class="headerlink" title="loginUser"></a>loginUser</h5><p>서버에서 <code>loginUser</code> 이벤트를 호출해 추가로 로그인한 사용자 정보를 Redux로 저장한다. </p><br><h5 id="logoutUser"><a href="#logoutUser" class="headerlink" title="logoutUser"></a>logoutUser</h5><p>서버에서 <code>logoutUser</code> 이벤트를 호출해 로그아웃한 사용자 정보를 Redux에서 삭제한다.</p><p>위의 조합을 통해 채팅 목록과 유저 목록을 관리한다.</p><br><h3 id="로그인-유저-목록-채팅-룸"><a href="#로그인-유저-목록-채팅-룸" class="headerlink" title="로그인 유저 목록(채팅 룸)"></a>로그인 유저 목록(채팅 룸)</h3><p>좌측 로그인 유저 목록을 관리하는 컴포넌트로 Redux에 저장된 <code>usernameList</code>를 통해 해당 목록을 보여준다.</p><figure class="highlight javascript"><figcaption><span>src/components/chatRoomSide.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">userNameList.map(<span class="function">(<span class="params">userName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (userName !== loginUser) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ChatRoomBox</span> <span class="attr">key</span>=<span class="string">&#123;userName&#125;</span> <span class="attr">userName</span>=<span class="string">&#123;userName&#125;</span></span></span></span><br><span class="line"><span class="xml">                        lastMessage=&#123;messageList.filter(</span></span><br><span class="line"><span class="xml">                            message =&gt; ((message.sendUserName ===</span></span><br><span class="line"><span class="xml">                                    loginUser &amp;&amp;</span></span><br><span class="line"><span class="xml">                                    message.targetUserName === userName)</span></span><br><span class="line"><span class="xml">                                ||</span></span><br><span class="line"><span class="xml">                                (message.sendUserName === userName &amp;&amp;</span></span><br><span class="line"><span class="xml">                                    message.targetUserName ===</span></span><br><span class="line"><span class="xml">                                    loginUser)))&#125;</span></span><br><span class="line"><span class="xml">                        onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                          dispatch(setTargetUserName(userName));</span></span><br><span class="line"><span class="xml">                        &#125;&#125;/&gt;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><h3 id="채팅"><a href="#채팅" class="headerlink" title="채팅"></a>채팅</h3><p>유저 목록에서 채팅할 상대를 선택하면 우측 영역이 채팅 영역으로 변경된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props.messages.map(<span class="function">(<span class="params">message, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.sendUserName === loginUser)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyMessageBox</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message.message&#125;/</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">OtherMessageBox</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message.message&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>내가 보낸 메세지인지, 상대방으로 부터 받은 메세지인지를 판단해서 좌측 또는 우측에 메세지를 배치시킨다.</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>부모 컴포넌트에서 자식 컴포넌트로 반복적인 props 전달 및 state관리를 조금 더 편하게 하기 위해서 REDUX를 사용했다.</p><a href="https://ko.redux.js.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://ko.redux.js.org/img/redux-logo-landscape.png"></img></div><div class="descriptions"><div class="og-title">Redux - 자바스크립트 앱을 위한 예측 가능한 상태 컨테이너. | Redux</div><div class="og-description">자바스크립트 앱을 위한 예측 가능한 상태 컨테이너.</div></div></div></a><p>이 사이트의 Quick Start 부분을 그대로 따라해서 구조를 잡았다.</p><figure class="highlight javascript"><figcaption><span>features/chatSlice.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 채팅 관련 state 관리</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> chatSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">'chat'</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    targetUserName: <span class="literal">null</span>,</span><br><span class="line">    userNameList: [],</span><br><span class="line">    messageList: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    setTargetUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.targetUserName = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setUserNameList: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = [...state.userNameList, action.payload];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    deleteUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = state.userNameList.filter(<span class="function"><span class="keyword">function</span>(<span class="params">userNameElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userNameElement !== action.payload;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setMessageList: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.messageList = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addMessage: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.messageList = [...state.messageList, action.payload];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>채팅과 관련된 state를 관리한다.</p><p>예를들면 채팅 가능한 상대들의 목록이나 채팅 상대 지정, 메세지 목록등의 정보를 저장한다.</p><blockquote><p>처음부터 더 고민해서 만들었다면 조금 더 일관적인 구조가 되었을것 같다.<br>코드 자체는 간단하지만 구조에 기준이 없는 조잡한느낌..</p></blockquote><figure class="highlight javascript"><figcaption><span>features/loginSlice.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 로그인한 내 정보 관리</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginSlice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'loginUser'</span>,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        user: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        setLoginUser: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">            state.user = action.payload</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>로그인한 내 정보를 관리한다.</p><p>이 정보를 이용해 유저 목록에서 내 정보를 가장 위에 배치하거나 내가 보낸 메세지인지 받은 메세지인지를 구분하는등의 정보로 사용한다.</p><br><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>이곳저곳 더 신경쓰거나 DB를 추가한다면 더 괜찮은 채팅 웹 앱이 될 수 있다고 생각한다.</p><p>이 프로젝트 개발하면서 또 다른것을 만들어야겠다는 생각이 들었던 만큼 재미있는 프로젝트였다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 클라이언트 부분 설명입니다.&lt;/p&gt;
&lt;p&gt;관련 글을 보고싶은 분은 글 최하단의 태그 &lt;code&gt;Toy project&lt;/code&gt; 링크를 눌러 확인해보세요!&lt;/p&gt;
&lt;p&gt;설명에 앞서 프론트를 전문으로 하는 개발자가 아니기 때문에 어색한 부분이 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;특히 디자인 부분은.. 더이상의 설명은 생략하겠습니다 ㅜㅜ&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;서버와는 다르게 클라이언트는 코드가 긴편이다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://dev-sawd.github.io/categories/React/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 혼자 만들어본 채팅 웹 앱(서버 부분)</title>
    <link href="https://dev-sawd.github.io/2022/03/13/Node-js-chatting-socket-server/"/>
    <id>https://dev-sawd.github.io/2022/03/13/Node-js-chatting-socket-server/</id>
    <published>2022-03-13T12:21:01.000Z</published>
    <updated>2022-03-14T03:56:26.751Z</updated>
    
    <content type="html"><![CDATA[<p>이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 서버 부분 설명입니다.</p><p>관련 글을 보고싶은 분은 글 최하단의 태그 <code>Toy project</code> 링크를 눌러 확인해보세요!</p><hr><p>소켓의 개념이 조금 어려울 수 있으나 막상 코드는 몇줄 되지 않는다.</p><a id="more"></a><h1 id="저장소-주소"><a href="#저장소-주소" class="headerlink" title="저장소 주소"></a>저장소 주소</h1><a href="https://github.com/dev-sawd/chat-server" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/9f09575552dce125cf22be85ceca371b592fe12bfd43b56b1fc6504248cf1bcf/dev-sawd/chat-server"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/chat-server</div><div class="og-description">Contribute to dev-sawd/chat-server development by creating an account on GitHub.</div></div></div></a><br><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dev-sawd&#x2F;chat-server</span><br><span class="line">cd chat-server</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><br><h1 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>개발할때는 코드의 변경사항을 바로바로 체크할 수 있게 nodemon으로 돌리는것이 편리하다.</p><br><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userNameToSocketId = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> socketIdToUserName = &#123;&#125;</span><br></pre></td></tr></table></figure><p>로그인한 유저의 소켓 아이디와 소켓 아이디의 유저 이름을 관리하는 Dictionary 형태의 변수이다.<br>로그인때 해당 변수 안에 정보를 담고 로그아웃했을때 해당 변수들에서 정보를 삭제한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>React에서 로그인화면이 열렸을때 소켓의 연결 먼저 실행한다.</p><p>로그인과는 다른 개념으로 로그인 전에 소켓이 연결 된 후 해당 소켓을 이용해 로그인, 메세지 보내기, 로그아웃 등의 이벤트를 보낼 수 있다.</p><p>해당 소켓과 이 블록 안에 정의된 이벤트를 이용해 각 로직을 처리한다.</p><br><h3 id="connection-안의-이벤트"><a href="#connection-안의-이벤트" class="headerlink" title="connection 안의 이벤트"></a>connection 안의 이벤트</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'login'</span>, (&#123;userName&#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 이미 존재하는 아이디 체크</span></span><br><span class="line">    <span class="keyword">if</span> (!userNameToSocketId.hasOwnProperty(userName)) &#123;</span><br><span class="line">        userNameToSocketId[userName] = socket.id</span><br><span class="line">        socketIdToUserName[socket.id] = userName</span><br><span class="line">        socket.broadcast.emit(<span class="string">'loginUser'</span>, userName)</span><br><span class="line">        socket.emit(<span class="string">'returnLoginResponse'</span>, <span class="literal">true</span>, <span class="built_in">Object</span>.keys(userNameToSocketId))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        socket.emit(<span class="string">'returnLoginResponse'</span>, <span class="literal">false</span>, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>로그인 이벤트가 발생했을때 이미 존재하는 아이디인지 확인 후 <code>returnLoginResponse</code> 이벤트를 클라이언트에게 발생시킨다.</p><p><code>returnLoginResponse</code> 이벤트를 받은 클라이언트는 Alert을 이용해 아이디가 중복되었다고 사용자에게 알리거나 로그인 처리를 진행한다.</p><p>기존에 로그인한 아이디가 아니라면 모든 클라이언트에 <code>loginUser</code> 이벤트를 발생시킨다.</p><p><code>loginUser</code> 이벤트를 수신한 모든 클라이언트는 좌측 로그인한 유저 리스트에 이 유저 정보를 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'sendMessage'</span>, (&#123;sendUserName, targetUserName, message&#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 다른사람에게 보내는 메세지일때</span></span><br><span class="line">    <span class="keyword">if</span> (sendUserName === targetUserName) &#123;</span><br><span class="line">        io.to(userNameToSocketId[targetUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        io.to(userNameToSocketId[sendUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">        io.to(userNameToSocketId[targetUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>클라이언트로 부터 메세지를 보내는 이벤트가 발생했을때 처리한다.</p><p>자신에게 보내는 메세지인지, 다른사람에게 보내는 메세지인지를 확인한다.</p><p>자신에게 보내는 메세지라면 자신에게 <code>message</code> 이벤트를 발생시킨다.</p><p>다른사람에게 메세지라면 자신과 수신자에게 <code>message</code> 이벤트를 각각 발생시킨다.</p><p><code>message</code> 이벤트를 받은 클라이언트는 메모리에 이 정보를 저장하고 채팅방이 활성화 되었을때 말풍선형태의 UI로 보여준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'disconnect'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 로그아웃 처리</span></span><br><span class="line">    <span class="keyword">var</span> userName = socketIdToUserName[socket.id]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> userNameToSocketId[userName]</span><br><span class="line">    <span class="keyword">delete</span> socketIdToUserName[socket.id]</span><br><span class="line"></span><br><span class="line">    socket.broadcast.emit(<span class="string">'logoutUser'</span>, userName)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>클라이언트가 로그아웃(또는 강제 종료) 했을때  <code>userNameToSocketId</code>와 <code>socketIdToUserName</code> 변수에서 해당 정보를 삭제하고 <code>logoutUser</code> 이벤트를 접속한 모든 클라이언트에 발생시킨다.</p><p><code>logoutUser</code> 이벤트를 수신한 모든 클라이언트는 좌측 로그인 유저 리스트에서 해당 유저를 삭제한다.</p><br><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>간단한 소켓을 이용한 채팅 서버는 이정도 수준에서 개발했다.</p><p>이것을 토대로 조금 더 개발한다면 DB를 붙여서 회원관리, 이전 메세지 관리 등의 기능을 확장할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 서버 부분 설명입니다.&lt;/p&gt;
&lt;p&gt;관련 글을 보고싶은 분은 글 최하단의 태그 &lt;code&gt;Toy project&lt;/code&gt; 링크를 눌러 확인해보세요!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;소켓의 개념이 조금 어려울 수 있으나 막상 코드는 몇줄 되지 않는다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[React] 혼자 만들어본 채팅 웹 앱</title>
    <link href="https://dev-sawd.github.io/2022/03/08/React-chatting-web/"/>
    <id>https://dev-sawd.github.io/2022/03/08/React-chatting-web/</id>
    <published>2022-03-07T15:41:19.000Z</published>
    <updated>2022-03-13T13:02:27.676Z</updated>
    
    <content type="html"><![CDATA[<p>개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..</p><h1 id="이제-뭘하지"><a href="#이제-뭘하지" class="headerlink" title="이제 뭘하지?"></a>이제 뭘하지?</h1><p>뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.</p><p>그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…</p><br><h1 id="소켓을-이용한-무언가를-해보고싶어"><a href="#소켓을-이용한-무언가를-해보고싶어" class="headerlink" title="소켓을 이용한 무언가를 해보고싶어."></a>소켓을 이용한 무언가를 해보고싶어.</h1><p>소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.</p><p>당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.</p><blockquote><p><strong>소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.</strong></p></blockquote><a id="more"></a><br><h1 id="뭘-이용해서-만들까"><a href="#뭘-이용해서-만들까" class="headerlink" title="뭘 이용해서 만들까?"></a>뭘 이용해서 만들까?</h1><p>최근에 만든 사이트는 프론트를 React, 백엔드를 Node.js, DB를 MySQL로 만들었다.</p><p>하지만 너무 겉핥기 식이고 빠르게 만드는 것에 바쁜 나머지 너무 날로 먹은것 같은 느낌이 들었다.</p><br><h3 id="또-다시-React"><a href="#또-다시-React" class="headerlink" title="또 다시 React"></a>또 다시 React</h3><p>내가 처음 React를 공부했을때(아마.. 2007년? 2008년?) 그때는 클래스형 구조로 되어있었다.</p><p>그리고 최근에 사이트를 만들었을 때 그때의 기억을 토대로 클래스형 구조로 만들고 사이트의 구조가 굳어갈때..</p><p>요즘 예제들은 함수형 구조로 된것이 많더라.</p><p>이 말은 뭔가 검색해도 함수형 구조를 이해하고 있지 않으면 빠르게 문제를 해결할 수 없다는 것과 같은 말이다.</p><p>결국은 클래스형 구조에서 함수형 구조로 다 뜯어 고치고 이 과정에서 생각보다 많은 시간을 잡아먹었다.</p><blockquote><p><strong>이번 채팅 앱은 처음부터 함수형 구조로 시작해야겠어.</strong></p></blockquote><br><h3 id="그리고-Node-js-서버"><a href="#그리고-Node-js-서버" class="headerlink" title="그리고 Node.js 서버"></a>그리고 Node.js 서버</h3><p>Javascript는 잘 못하는데, 그래도 Node.js로 서버개발을 해보니 의외로 간편하고 쉬웠다.</p><blockquote><p><strong>무엇보다 React도 Javascript니까.</strong></p></blockquote><br><h3 id="MUI"><a href="#MUI" class="headerlink" title="MUI"></a>MUI</h3><p>React UI library로 기본 UI보다 좀더 있어보이게 꾸밀 수 있다.</p><p>컴포넌트마다 예제는 너무 잘 돼있는데 조금 취향에 맞게 수정하려고 하려면 생각보다 쉽진않은 듯 하다.</p><a href="https://mui.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://mui.com/static/social-previews/default-preview.jpg"></img></div><div class="descriptions"><div class="og-title">MUI: The React component library you always wanted</div><div class="og-description">MUI provides a simple, customizable, and accessible library of React components. Follow your own design system, or start with Material Desig…</div></div></div></a><br><h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><p>소켓을 사용하기 위해서 검색중 socket.io를 이용하면 간편하게 개발할 수 있을것으로 보였다.</p><a href="https://socket.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Socket.IO</div></div></div></a><p>그리고 채팅 앱을 만드는 간단한 튜토리얼도 제공한다.</p><ul><li><a href="https://socket.io/get-started/chat" target="_blank" rel="noopener">https://socket.io/get-started/chat</a></li></ul><p>개발하는데 필요한 부분만 보고 개발했는데, 정리해서 포스팅해두면 나중에 쉽게 찾아볼 수 있을것 같아 조만간 정리할 예정이다.</p><br><h1 id="디자인"><a href="#디자인" class="headerlink" title="디자인"></a>디자인</h1><p>디자인에는 정말 소질이 없기 때문에 구글에서 ‘web chatting design’ 등의 검색 키워드를 몇개 참고해서 만들기로 했다.</p><img src="/2022/03/08/React-chatting-web/1.png" class=""><p>로그인 화면은 사실 많은 기능을 필요로 하지 않도록 ID만 입력하게 했고,</p><p>서버를 통해 동일한 ID가 존재하는지 중복 체크만 했다.</p><img src="/2022/03/08/React-chatting-web/2.png" class=""><p>좌측 상단에는 ‘나만의 채팅’ 기능으로 로그인한 나 자신이 가장 상단에 뜨고 이미 접속해있는 유저나 새로 접속한 유저들은 그 밑으로 리스트를 뿌려주어 채팅할 상대를 선택할 수 있도록 구성했다.</p><p>우측 환영 페이지는 딱히 디자인할 것이 없어 간단히 환영메세지만 작성했다.</p><img src="/2022/03/08/React-chatting-web/3.png" class=""><p>채팅을 작성하면 내 채팅은 우측 말풍선으로 표시했다.</p><p>가장 최근 메세지는 카카오톡처럼 대화상대 아이디 밑에 나오도록 했다.</p><img src="/2022/03/08/React-chatting-web/4.png" class=""><p>상대방과 채팅을 한다면 이런 식으로 표시된다.</p><br><h1 id="만들면서-느낀점"><a href="#만들면서-느낀점" class="headerlink" title="만들면서 느낀점"></a>만들면서 느낀점</h1><h3 id="flexbox-너무-어렵고…"><a href="#flexbox-너무-어렵고…" class="headerlink" title="flexbox 너무 어렵고…"></a>flexbox 너무 어렵고…</h3><p>화면의 영역과 구조가 복잡해질수록 부모와 자식의 계층을 잘 나눠야 하고 결국 디자인 영역까지 영향을 준다.</p><p>어떤 컴포넌트들은 세로로 배치해야하고 어떤 컴포넌트들은 가로로, 그리고 좌측 정렬, 우측 정렬… 가운데정렬..</p><p>주먹구구식으로 배우니 답이 없어 주변 친구에게 하소연할때 그 친구가 기본적인 flexbox 배치를 공부해 볼 수 있는 사이트를 추천해줬다.</p><a href="https://flexboxfroggy.com/#ko" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://flexboxfroggy.com/images/screenshot.png"></img></div><div class="descriptions"><div class="og-title">Flexbox Froggy</div><div class="og-description">A game for learning CSS flexbox</div></div></div></a><p>24단계의 간단한 문제로 컴포넌트의 배치를 공부해 볼 수 있다.</p><p>정말 도움이 많이 되었고 능숙하진 않지만 확실히 개발 속도를 올려주었다.</p><blockquote><p><strong>flexbox froggy 알려준 친구야 고마워!</strong></p></blockquote><br><h3 id="부모의-자식의-자식의-자식의…-props-props-props…-props-지옥"><a href="#부모의-자식의-자식의-자식의…-props-props-props…-props-지옥" class="headerlink" title="부모의 자식의 자식의 자식의… props, props, props… props 지옥"></a>부모의 자식의 자식의 자식의… props, props, props… props 지옥</h3><p>위에 설명한대로 이전에 React를 공부했을때도 발생했던 문제다.</p><p>계층을 여러개로 나누다 보면 몇단계 위에서 가지고있는 데이터를 자식에게 보내기 위해서 props의 지옥이 시작된다.</p><p>반대로 자식이 가지고있는 데이터를 부모 컴포넌트에서 업데이트해서 사용해야 될 경우도 생긴다.</p><blockquote><p><strong>또 이렇게 Redux를…</strong></p></blockquote><a href="https://ko.redux.js.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://ko.redux.js.org/img/redux-logo-landscape.png"></img></div><div class="descriptions"><div class="og-title">Redux - 자바스크립트 앱을 위한 예측 가능한 상태 컨테이너. | Redux</div><div class="og-description">자바스크립트 앱을 위한 예측 가능한 상태 컨테이너.</div></div></div></a><p><del>뭐야 한글 번역 사이트도 있었네…</del></p><p>예전에도 Redux를 사용했는데.. 너무 어렵고 공부했을때의 경험이 썩 좋지는 않았다..</p><p>그래서 다시 사용하고 싶지는 않았지만 결국 다시 사용해야 하는 상황이 왔다.</p><p>설치 방법을 보고 따라해보는데 이런 생각이 들었다.</p><blockquote><p><strong>의외로 쉽네. 앞으로 겁먹지 않아도 되겠다.</strong></p></blockquote><br><h3 id="그래도-아쉬운-구조"><a href="#그래도-아쉬운-구조" class="headerlink" title="그래도 아쉬운 구조"></a>그래도 아쉬운 구조</h3><p>주변에 React를 전문으로 하는 친구가 있어 조언을 구하고 싶은데 항상 바쁘다..</p><p>프론트 전문도 아니고 공부하며 만든 토이 프로젝트라 폴더 계층이나 컴포넌트 구조등 마음에 안드는 부분이 많다.</p><p>잘 만들어진 프로젝트를 보고 배우는것이 이 아쉬움을 해소하는데 도움이 될것으로 보인다.</p><blockquote><p><strong>그런 프로젝트를 github에서 찾으면 뜯어봐야지.</strong></p></blockquote><br><h3 id="3주간의-개발"><a href="#3주간의-개발" class="headerlink" title="3주간의 개발"></a>3주간의 개발</h3><p>뭘 만들지 고민하고, 디자인이나 기능을 생각하고 코딩을 시작해서 지금까지 3주 정도 걸린 것 같다.</p><p>일하면서 취미도 즐기고 마지막으로 남는 시간에 만들었는데 정말 재미있었다!</p><blockquote><p><strong>이렇게 정리하고 보니 생각보다 배운게 많네.</strong></p></blockquote><br><h1 id="그래서-앞으로는"><a href="#그래서-앞으로는" class="headerlink" title="그래서 앞으로는?"></a>그래서 앞으로는?</h1><p>지금 이 글을 정리하면서 다음 토이 프로젝트를 구상중이다.</p><p>짧으면 3개월에서 길면 6개월을 예상하고 있는데 덩치가 너무 큰것은 아닌지 걱정되기도 하고..</p><p>이와 병행해서 배운것들은 계속해서 블로그에 작성할 예정이다.</p><p>내가 만든 채팅앱 소스와 설명은 간단히 포스팅 할 예정이다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..&lt;/p&gt;
&lt;h1 id=&quot;이제-뭘하지&quot;&gt;&lt;a href=&quot;#이제-뭘하지&quot; class=&quot;headerlink&quot; title=&quot;이제 뭘하지?&quot;&gt;&lt;/a&gt;이제 뭘하지?&lt;/h1&gt;&lt;p&gt;뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.&lt;/p&gt;
&lt;p&gt;그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;소켓을-이용한-무언가를-해보고싶어&quot;&gt;&lt;a href=&quot;#소켓을-이용한-무언가를-해보고싶어&quot; class=&quot;headerlink&quot; title=&quot;소켓을 이용한 무언가를 해보고싶어.&quot;&gt;&lt;/a&gt;소켓을 이용한 무언가를 해보고싶어.&lt;/h1&gt;&lt;p&gt;소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.&lt;/p&gt;
&lt;p&gt;당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://dev-sawd.github.io/categories/React/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[CSS] Flexbox 정리</title>
    <link href="https://dev-sawd.github.io/2022/02/21/CSS-flexbox/"/>
    <id>https://dev-sawd.github.io/2022/02/21/CSS-flexbox/</id>
    <published>2022-02-21T06:46:54.000Z</published>
    <updated>2022-02-21T07:01:14.056Z</updated>
    
    <content type="html"><![CDATA[<p>프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 <del>복사 붙여넣기는 잘함</del></p><p>flexbox의 속성들을 간단히 정리</p><a id="more"></a><h1 id="AXIS"><a href="#AXIS" class="headerlink" title="AXIS"></a>AXIS</h1><h3 id="main-axis"><a href="#main-axis" class="headerlink" title="main axis"></a>main axis</h3><p>사용자가 지정한 중심축</p><h3 id="across-axis"><a href="#across-axis" class="headerlink" title="across axis"></a>across axis</h3><p>사용자가 지정한 중심축의 수직축</p><h1 id="container-item"><a href="#container-item" class="headerlink" title="container, item"></a>container, item</h1><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>말그대로 다른 엘리먼트들을 담을 수 있는 컨테이너</p><h3 id="container-속성"><a href="#container-속성" class="headerlink" title="container 속성"></a>container 속성</h3><ul><li>display</li><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content(main axis)</li><li>align-items(across axis)</li><li>align-content(across axis)</li></ul><h3 id="item"><a href="#item" class="headerlink" title="item"></a>item</h3><p>컨테이너 안에 담긴 엘리먼트</p><h3 id="item-속성"><a href="#item-속성" class="headerlink" title="item 속성"></a>item 속성</h3><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ul><h1 id="vs-vh"><a href="#vs-vh" class="headerlink" title="% vs vh"></a>% vs vh</h1><p>%는 부모 엘리먼트를 기준으로 x%를 채움<br>vh는 보이는 viewport height를 기준으로 채움</p><p>참고</p><ul><li><a href="https://youtu.be/7neASrWEFEM" target="_blank" rel="noopener">https://youtu.be/7neASrWEFEM</a></li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 &lt;del&gt;복사 붙여넣기는 잘함&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;flexbox의 속성들을 간단히 정리&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://dev-sawd.github.io/categories/CSS/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] Error: ER_NOT_SUPPORTED_AUTH_MODE 에러 해결</title>
    <link href="https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/"/>
    <id>https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/</id>
    <published>2022-02-16T00:42:57.000Z</published>
    <updated>2022-02-16T00:50:37.382Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">\node_modules\mysql\lib\protocol\Parser.js:437</span><br><span class="line">      throw err; &#x2F;&#x2F; Rethrow non-MySQL errors</span><br><span class="line">      ^</span><br><span class="line">      </span><br><span class="line">Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line">    at Handshake.Sequence._packetToError</span><br><span class="line">    at Handshake.ErrorPacket</span><br><span class="line">    at Protocol._parsePacket</span><br><span class="line">    at Parser._parsePacket</span><br><span class="line">    at Parser.write</span><br><span class="line">    at Protocol.write</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.emit</span><br><span class="line">    at addChunk</span><br><span class="line">    --------------------</span><br><span class="line">    at Protocol._enqueue</span><br><span class="line">    at Protocol.handshake</span><br><span class="line">    at Connection.connect</span><br><span class="line">    at Object.&lt;anonymous&gt;</span><br><span class="line">    at Module._compile</span><br><span class="line">    at Object.Module._extensions..js</span><br><span class="line">    at Module.load</span><br><span class="line">  sqlMessage: &#39;Client does not support authentication protocol requested by server; consider upgrading MySQL client&#39;,</span><br><span class="line">  sqlState: &#39;08004&#39;,</span><br><span class="line">  fatal: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내 개발 환경은 백엔드는 현재 로컬에서 작업중이고 MySQL은 AWS 서버에 올려둔 상태로 AWS에서는 외부 접속의 개념이 됨</p><p>아이디는 root에 비밀번호가 11111111을 예로 아래와 같은 쿼리를 실행하여 해결</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;11111111&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드 개발자용 Hyperledger fabric 테스트 네트워크</title>
    <link href="https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/"/>
    <id>https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/</id>
    <published>2022-02-15T03:53:28.000Z</published>
    <updated>2022-02-15T04:18:08.797Z</updated>
    
    <content type="html"><![CDATA[<p>하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요</p><p>네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아</p><p>네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음</p><a href="https://github.com/dev-sawd/hyperledger-fabric-basic-network" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/hyperledger-fabric-basic-network</div><div class="og-description">Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.</div></div></div></a><a id="more"></a><p>기존에 Fabric version 1.4.3을 기준으로 만들어놨었는데</p><p>이번에 맥북 에어 M1으로 바꾸면서 M1에서도 돌아갈 수 있는 2.4.2 최신 버전을 기준으로 다시 재구성</p><p>fabric-samples/test-network를 기반으로 필요없는 부분을 제거해서 작성</p><ul><li><a href="https://github.com/hyperledger/fabric-samples/tree/main/test-network" target="_blank" rel="noopener">https://github.com/hyperledger/fabric-samples/tree/main/test-network</a></li></ul><h2 id="Docker-Container-list"><a href="#Docker-Container-list" class="headerlink" title="Docker Container list"></a>Docker Container list</h2><ul><li>ca_org1</li><li>ca_orderer</li><li>peer0.org1.example.com</li><li>couchdb0</li><li>orderer.example.com</li><li>cli</li></ul><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ start.sh</span><br></pre></td></tr></table></figure><h2 id="종료"><a href="#종료" class="headerlink" title="종료"></a>종료</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ teardown.sh</span><br></pre></td></tr></table></figure><h2 id="체인코드-설치"><a href="#체인코드-설치" class="headerlink" title="체인코드 설치"></a>체인코드 설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh .&#x2F;network.sh deployCC -ccn [CHAINCODE_NAME] -ccv [CHIANCODE_VERSION] -cci initLedger -ccl &quot;go&quot; -ccp [CHAINCODE_PATH]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요&lt;/p&gt;
&lt;p&gt;네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아&lt;/p&gt;
&lt;p&gt;네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음&lt;/p&gt;
&lt;a href=&quot;https://github.com/dev-sawd/hyperledger-fabric-basic-network&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;GitHub - dev-sawd/hyperledger-fabric-basic-network&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 이벤트 스케줄 사용시 주의사항</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/</id>
    <published>2022-02-14T18:09:13.000Z</published>
    <updated>2022-02-14T18:18:27.580Z</updated>
    
    <content type="html"><![CDATA[<p>이벤트 스케줄을 사용할때 시간을 지정해서 사용</p><p>예를들면 <code>하루 한번 0시에 어떤 작업을 실행</code></p><p>그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><p>한국의 시간과 9시간이 차이가 나는것을 확인할 수 있었음</p><p>그리고 내가 설정할 이벤트 스케줄의 시간을 MySQL 시간을 기준으로 1분뒤에 실행하도록 설정하고 확인한 결과는</p><p><code>이벤트 스케줄은 MySQL의 시간을 기준으로 실행된다.</code></p><p>관리를 편하게 하기 위해 MySQL의 시간을 한국 시간으로 변경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set time_zone&#x3D;&#39;Asia&#x2F;Seoul&#39;;</span><br></pre></td></tr></table></figure><p>그리고 실제 해당 시각에 정상 실행되는 것을 확인 할 수 있었음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이벤트 스케줄을 사용할때 시간을 지정해서 사용&lt;/p&gt;
&lt;p&gt;예를들면 &lt;code&gt;하루 한번 0시에 어떤 작업을 실행&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 두 컬럼의 값 바꾸기</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/</id>
    <published>2022-02-14T17:55:21.000Z</published>
    <updated>2022-02-14T18:00:50.055Z</updated>
    
    <content type="html"><![CDATA[<p>DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE</span><br><span class="line">    [TABLE_NAME]</span><br><span class="line">SET</span><br><span class="line">    A &#x3D; (@temp:&#x3D;A),</span><br><span class="line">    A &#x3D; B,</span><br><span class="line">    B &#x3D; @temp</span><br></pre></td></tr></table></figure><p>이때 주의해야 할 점이 <code>A = (@temp:=A)</code>에서 콜론이 들어간다는것</p><p>만약 콜론을 빼고 UPDATE를 실행한다면 B 컬럼에 NULL이 들어가니 신중히 실행해야함</p><p>가장 좋은 방법은 테스트용 DB에서 실행한 결과를 확인하고 운영 DB에 적용하는것이 좋다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] access denied for user</title>
    <link href="https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/"/>
    <id>https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/</id>
    <published>2022-02-13T14:33:52.000Z</published>
    <updated>2022-02-13T14:34:54.604Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김</p><p>프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access denied for user &#39;root&#39;@&#39;%&#39; to database &#39;information_schema&#39;</span><br></pre></td></tr></table></figure><p>거의 반나절을 구글링과 스택오버플로우를 찾아봤는데도 해답을 찾을 수 없었음</p><p>대부분 권한 문제 때문이라고 하는데 이미 필요한 권한은 다 가지고있었음</p><p>그리고 며칠 지나 다시 문제를 풀어보려고 열었는데 에러 문구에 <code>database &#39;information_schema&#39;</code> 부분이 자꾸 거슬렸음</p><p>그래서 이 부분에 초점을 두고 database를 내가 원하는 데이터베이스로 설정 후 프로시져를 생성하니 성공</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use my_database</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; procedure 생성</span><br></pre></td></tr></table></figure><p>너무 허무하다.. 😪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김&lt;/p&gt;
&lt;p&gt;프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Docker] no matching manifest for linux/arm64/v8 in the manifest list entries</title>
    <link href="https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/"/>
    <id>https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/</id>
    <published>2022-02-07T06:05:33.000Z</published>
    <updated>2022-02-07T06:25:45.776Z</updated>
    
    <content type="html"><![CDATA[<p>M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% docker pull hyperledger&#x2F;fabric-javaenv:2.4</span><br><span class="line">2.4: Pulling from hyperledger&#x2F;fabric-javaenv</span><br><span class="line">no matching manifest for linux&#x2F;arm64&#x2F;v8 in the manifest list entries</span><br></pre></td></tr></table></figure><p>M1 환경에서 발생하는 문제로 보임</p><p><code>--platform linux/x86_64</code> 인자를 주어 실행하면 정상적으로 받아오는것을 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% docker pull --platform linux&#x2F;x86_64 hyperledger&#x2F;fabric-javaenv:2.4</span><br></pre></td></tr></table></figure><ul><li><a href="https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/" target="_blank" rel="noopener">https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/</a></li><li><a href="https://stackoverflow.com/a/67361161" target="_blank" rel="noopener">https://stackoverflow.com/a/67361161</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="M1 MacBook Air" scheme="https://dev-sawd.github.io/tags/M1-MacBook-Air/"/>
    
  </entry>
  
  <entry>
    <title>[Golang] go modules 사용</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Golang-go-modules/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Golang-go-modules/</id>
    <published>2022-02-06T10:20:03.000Z</published>
    <updated>2022-02-06T12:57:14.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="govendor-deprecated"><a href="#govendor-deprecated" class="headerlink" title="govendor (deprecated)"></a>govendor (deprecated)</h1><p>Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음</p><ul><li><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">https://github.com/kardianos/govendor</a></li></ul><h1 id="Go-modules"><a href="#Go-modules" class="headerlink" title="Go modules"></a>Go modules</h1><p>이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음</p><p>사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임</p><ul><li><a href="https://go.dev/blog/using-go-modules" target="_blank" rel="noopener">https://go.dev/blog/using-go-modules</a></li></ul><a id="more"></a><h3 id="go-mod-init-module-name"><a href="#go-mod-init-module-name" class="headerlink" title="go mod init [module-name]"></a>go mod init [module-name]</h3><p>새 모듈을 만들었을때 go mod init 명령어로 go.mod 파일 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-get-module-name"><a href="#go-get-module-name" class="headerlink" title="go get [module-name]"></a>go get [module-name]</h3><p>종속성 모듈을 다운로드</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>사용되지 않는 종속성 모듈을 제거하거나 추가된 종속성 모듈을 go.mod에 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><p>해당 위치에 종속성 모듈을 vendor 폴더안에 복사</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod vendor</span><br></pre></td></tr></table></figure><p>프로젝트를 새로 만들었을 경우는 go mod init를 이용해 go.mod를 생성하고 작업하면서 필요한 모듈들을 정리해가며 개발</p><p>만약 github에 공유된 모듈들을 받아 직접 실행하는 경우는 go.mod파일이 이미 존재하기 때문에 go get을 이용해 해당 모듈에서 사용하고 있는 모듈들을 다운받아 실행하면 됨</p><p>go get등을 이용해 github에 공유되어있는 모듈들을 다운로드 받을 수 없는 경우에는 go mod vendor를 이용해 해당 모듈들을 현재 개발중인 모듈 폴더의 vendor에 복사하게 한 후</p><p>모듈 전체를 배포하는 형태로 진행해야함</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;govendor-deprecated&quot;&gt;&lt;a href=&quot;#govendor-deprecated&quot; class=&quot;headerlink&quot; title=&quot;govendor (deprecated)&quot;&gt;&lt;/a&gt;govendor (deprecated)&lt;/h1&gt;&lt;p&gt;Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kardianos/govendor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kardianos/govendor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Go-modules&quot;&gt;&lt;a href=&quot;#Go-modules&quot; class=&quot;headerlink&quot; title=&quot;Go modules&quot;&gt;&lt;/a&gt;Go modules&lt;/h1&gt;&lt;p&gt;이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음&lt;/p&gt;
&lt;p&gt;사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/blog/using-go-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://go.dev/blog/using-go-modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] panic recover 샘플</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/</id>
    <published>2022-02-05T16:23:25.000Z</published>
    <updated>2022-02-05T16:50:32.950Z</updated>
    
    <content type="html"><![CDATA[<p>체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음</p><p>도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨</p><p>이러한 방법은 에러 추적이 어려워짐</p><p>Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각</p><a id="more"></a><h1 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h1><blockquote><p>Go 내장함수인 panic()함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다. 이러한 panic 모드 실행 방식은 다시 상위함수에도 똑같이 적용되고, 계속 콜스택을 타고 올라가며 적용된다. 그리고 마지막에는 프로그램이 에러를 내고 종료하게 된다.</p></blockquote><p>&nbsp;</p><h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><blockquote><p>Go 내장함수인 recover()함수는 panic 함수에 의한 패닉상태를 다시 정상상태로 되돌리는 함수이다.</p></blockquote><ul><li><a href="http://golang.site/go/article/20-Go-defer%EC%99%80-panic" target="_blank" rel="noopener">http://golang.site/go/article/20-Go-defer%EC%99%80-panic</a></li></ul><p>&nbsp;</p><h1 id="smaple-code"><a href="#smaple-code" class="headerlink" title="smaple code"></a>smaple code</h1><script src="//gist.github.com/66e46a62183d2d316ff9100d93a4fa6d.js"></script><p>샘플 프로젝트로 직접 확인해보고 개선해 나갈 예정</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음&lt;/p&gt;
&lt;p&gt;도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨&lt;/p&gt;
&lt;p&gt;이러한 방법은 에러 추적이 어려워짐&lt;/p&gt;
&lt;p&gt;Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드에서의 MVC...? (1)</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/</id>
    <published>2022-02-04T11:45:25.000Z</published>
    <updated>2022-04-22T02:27:58.163Z</updated>
    
    <content type="html"><![CDATA[<p>조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><blockquote><p>MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Glossary/MVC" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Glossary/MVC</a></li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>데이터를 받아 비즈니스 로직을 처리<br>주로 DB와의 상호작용이 해당</p><a id="more"></a><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>레이아웃과 화면을 처리<br>애플리케이션의 데이터를 보여주는 방식</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>사용자로부터 요청을 받아 수행할 비즈니스 로직을 제어</p><p>&nbsp;</p><h1 id="Go언어에서의-MVC"><a href="#Go언어에서의-MVC" class="headerlink" title="Go언어에서의 MVC"></a>Go언어에서의 MVC</h1><p>Go언어에서는 Revel이라고 하는 MVC를 도와주는 웹 프레임워크가 있다고 함</p><a href="https://revel.github.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Revel - Go Web Framework</div></div></div></a><p>&nbsp;</p><h1 id="하지만-체인코드에서는"><a href="#하지만-체인코드에서는" class="headerlink" title="하지만 체인코드에서는..?"></a>하지만 체인코드에서는..?</h1><p>MVC패턴을 제대로 모르더라도 구조를 보면 많이 익숙한 느낌이 들정도로 개발자들은 자주 접하는 구조<br>하지만 체인코드를 개발할때 MVC를 그대로 사용하기에는 무리가 있어서 조금 내 방식대로 수정<br>호출 순서는 아래와 같다고 생각</p><p>사용자 → Controller → Service → DAO → DB</p><p>그리고 각 호출에서 필요한 데이터 구조(DTO)를 정의하는 정도로 생각</p><p>&nbsp;</p><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><p>직관적으로 각 구조마다 폴더명을 지정해서 관리<br>dao, dto는 service, object등으로 상황에 따라 다르게 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">├─controller</span><br><span class="line">├─dao</span><br><span class="line">├─dto</span><br><span class="line">└─service</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><script src="//gist.github.com/c8bc668ea2d139dfdc69a16128db3189.js"></script><p>개발을 하면서 반복되는 코드는 계속해서 리펙토링을 통해 제거하고 관리해야함</p><p><del>그래도 나중엔 감당안되긴 해…</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리&lt;/p&gt;
&lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/MVC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/ko/docs/Glossary/MVC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Model&quot;&gt;&lt;a href=&quot;#Model&quot; class=&quot;headerlink&quot; title=&quot;Model&quot;&gt;&lt;/a&gt;Model&lt;/h3&gt;&lt;p&gt;데이터를 받아 비즈니스 로직을 처리&lt;br&gt;주로 DB와의 상호작용이 해당&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="체인코드에서의 MVC...?" scheme="https://dev-sawd.github.io/tags/%EC%B2%B4%EC%9D%B8%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Hello Golang</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Hello-Golang/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Hello-Golang/</id>
    <published>2022-02-03T18:47:41.000Z</published>
    <updated>2022-02-04T08:36:32.832Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Golang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="//gist.github.com/44e38cda1e98acfca88c81c2ddba1024.js"></script><p>가볍게라도 꾸준히!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 이벤트와 이벤트 리스너</title>
    <link href="https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/"/>
    <id>https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/</id>
    <published>2020-06-09T21:45:10.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEvent = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">myEvent.addListener(<span class="string">'event1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2 추가'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.emit(<span class="string">'event1'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event2'</span>);</span><br><span class="line"></span><br><span class="line">myEvent.once(<span class="string">'event3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>); <span class="comment">// 위의 event3 이벤트만 한번 호출됨</span></span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event4'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 4'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.removeAllListeners(<span class="string">'event4'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event4'</span>); <span class="comment">// 위의 removeAllListeners를 통해 event4 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 5'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">myEvent.on(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.removeListener(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.emit(<span class="string">'event5'</span>); <span class="comment">// 위의 removeListener를 통해 event5 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myEvent.listenerCount(<span class="string">'event2'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node event.js</span></span><br><span class="line">이벤트 1</span><br><span class="line">이벤트 2</span><br><span class="line">이벤트 2 추가</span><br><span class="line">이벤트 3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><p>on(이벤트명, 콜백)<br>이벤트 이름과 이벤트 발생 시의 콜백을 연결해주고 이렇게 연결하는 동작을 이벤트 리스닝이라고 부름<br>event2처럼 이벤트 하나에 여러개를 달아줄 수도 있음</p></li><li><p>addListener(이벤트명, 콜백)<br>on과 기능이 같음</p></li><li><p>emit(이벤트명)<br>이벤트를 호출하는 메서드<br>이벤트 이름을 인자로 넣어주면 미리 등록해뒀던 이벤트 콜백이 실행됨</p></li><li><p>once(이벤트명, 콜백)<br>한번만 실행되는 이벤트<br>위의 예제에서 myEvent.emit(‘event3’)을 두 번 연속 호출했지만 콜백이 한번만 실행됨</p></li><li><p>removeAllListeners(이벤트명)<br>이벤트에 연결된 모든 이벤트 리스너를 제거함<br>event4가 호출되기 전에 이벤트 리스너를 제거했으므로 event4의 콜백은 호출되지 않음</p></li><li><p>removeListener(이벤트명, 리스너)<br>이벤트에 연결된 리스너를 하나씩 제거<br>event5의 콜백도 호출되지 않음</p></li><li><p>off(이벤트명, 콜백)<br>노드 10 버전에서 추가된 메서드로, removeListener와 기능이 같음</p></li><li><p>listenerCount(이벤트명)<br>현재 리스너가 몇 개 연결되어 있는지 확인</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 파일 시스템</title>
    <link href="https://dev-sawd.github.io/2020/06/09/Node-js-file-system/"/>
    <id>https://dev-sawd.github.io/2020/06/09/Node-js-file-system/</id>
    <published>2020-06-09T11:37:51.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>fs 모듈은 파일 시스템에 접근하는 모듈</p><a id="more"></a><h1 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; readme.txt</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readFile.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 버퍼로 출력</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">// 문자열로 출력</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node readFile.js</span></span><br><span class="line">&lt;Buffer 74 68 69 73 20 69 73 20 72 65 61 64 6d 65 2e 74 78 74 0d 0a&gt;</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><h1 id="동기-메서드와-비동기-메서드"><a href="#동기-메서드와-비동기-메서드" class="headerlink" title="동기 메서드와 비동기 메서드"></a>동기 메서드와 비동기 메서드</h1><p>setTimeout 같은 타이머와 process.netTick 외에도 노드는 대부분의 메서드를 비동기 방식으로 처리<br>특히 fs 모듈이 비동기 메서드를 많이 가지고있음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node async.js</span></span><br><span class="line">시작</span><br><span class="line">끝</span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br></pre></td></tr></table></figure><p>비동기 메서드들은 백그라운드에 해당 파일을 읽으라고만 요청하고 다음 작업으로 넘어감<br>따라서 파일 읽기 요청만 세번 보내고 <code>console.log(&#39;끝&#39;)</code>을 찍음<br>나중에 읽기가 완료되면 백그라운드가 다시 메인 스레드에 알림을 주고 이때 콜백 함수를 실행</p><blockquote><p>동기와 비동기, 블로킹과 논블로킹<br>노드에서는 비동기와 동기, 블로킹과 논블로킹이라는 네 용어가 혼용됨</p><ul><li>동기와 비동기 : 함수가 바로 return 되는지 여부</li><li>블로킹과 논 블로킹 : 백그라운드 작업 완료 여부<br>노드에서는 동기-블로킹 방식과 비동기-논블로킹 방식이 대부분</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sync.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% node sync.js</span><br><span class="line">시작</span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br><span class="line"></span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">끝</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;fs 모듈은 파일 시스템에 접근하는 모듈&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 단방향 암호화</title>
    <link href="https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/"/>
    <id>https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/</id>
    <published>2020-06-08T12:19:54.000Z</published>
    <updated>2022-01-26T13:51:21.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함<br>단방향 암호화 알고리즘은 주로 해시 기법을 사용<br>해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'base64'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hex:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'hex'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'다른 비밀번호'</span>).digest(<span class="string">'base64'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node hash.js</span></span><br><span class="line">base64: dvfV6nyLRRt3NxKSlTHOkkEGgqW2HRtfu19Ou/psUXvwlebbXCboxIPmDYOFRIpqav2eUTBFuHaZri5x+usy1g==</span><br><span class="line">hex: 76f7d5ea7c8b451b773712929531ce92410682a5b61d1b5fbb5f4ebbfa6c517bf095e6db5c26e8c483e60d8385448a6a6afd9e513045b87699ae2e71faeb32d6</span><br><span class="line">base64: cx49cjC8ctKtMzwJGBY853itZeb6qxzXGvuUJkbWTGn5VXAFbAwXGEOxU2Qksoj+aM2GWPhc1O7mmkyohXMsQw==</span><br></pre></td></tr></table></figure><h1 id="createHash-알고리즘"><a href="#createHash-알고리즘" class="headerlink" title="createHash(알고리즘)"></a>createHash(알고리즘)</h1><p>사용할 해시 알고리즘<br>md5, sha1, sha256, sha512등이 가능, 현재는 sha512정도로 충분</p><h1 id="update-문자열"><a href="#update-문자열" class="headerlink" title="update(문자열)"></a>update(문자열)</h1><p>변환할 문자열</p><h1 id="digest-인코딩"><a href="#digest-인코딩" class="headerlink" title="digest(인코딩)"></a>digest(인코딩)</h1><p>인코딩할 알고리즘<br>base64, hex, latin1이 주로 사용, 그중 base64 결과 문자열이 가장 짧아 애용</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함&lt;br&gt;단방향 암호화 알고리즘은 주로 해시 기법을 사용&lt;br&gt;해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
</feed>
