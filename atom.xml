<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SAWD</title>
  
  <subtitle>NOT CODER BUT S.W DEVELOPER</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dev-sawd.github.io/"/>
  <updated>2023-01-05T00:58:10.545Z</updated>
  <id>https://dev-sawd.github.io/</id>
  
  <author>
    <name>SAWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>이더리움 공부를 하면서..</title>
    <link href="https://dev-sawd.github.io/2023/01/05/about-ethereum-study/"/>
    <id>https://dev-sawd.github.io/2023/01/05/about-ethereum-study/</id>
    <published>2023-01-05T00:37:30.000Z</published>
    <updated>2023-01-05T00:58:10.545Z</updated>
    
    <content type="html"><![CDATA[<p>최근에 이더리움 공부를 시작하면서 처음부터 느꼈는데 결국 일이 터졌습니다.</p><p>제가 예전에 실습했던 자료들이나 블로그들의 내용이 이미 구식이 되어버렸군요..</p><a id="more"></a><p>예를들면 제가 사용하는 m1 맥북으로 세팅하는 방법이나 개발시 사용할 툴 및 명령어 그리고 명령어 옵션들</p><p>그리고 Ropsten, Rinkeby 등이 지원 중단될 예정이고.. <del>어쩐지 검색해도 잘 안나오더라</del></p><a href="https://blog.ethereum.org/2022/06/21/testnet-deprecation" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://blog.ethereum.org/images/posts/upload_8d7ea1c612b90c3235dd54044d541b6a.jpg"></img></div><div class="descriptions"><div class="og-title">Ropsten, Rinkeby &amp; Kiln Deprecation Announcement | Ethereum Foundation Blog</div></div></div></a><p>대신 Goerli를 이용하는 추세인것 같습니다.</p><a href="https://goerli.net/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://goerli.net/img/ascii_com.png"></img></div><div class="descriptions"><div class="og-title">Goerli Testnet</div><div class="og-description">A cross-client proof-of-authority testing network for Ethereum.</div></div></div></a><p>테스트넷에 직접 스마트 컨트랙트를 올리고 테스트하는 실습 단계에서 부딪혔는데..</p><p>이 부분까지 정리해서 올리고 다시한번 앞부분에서 실습한 내용을 돌아봐야겠습니다.</p><p>계속해서 공부한 내용은 포스팅할 예정입니다 😭</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;최근에 이더리움 공부를 시작하면서 처음부터 느꼈는데 결국 일이 터졌습니다.&lt;/p&gt;
&lt;p&gt;제가 예전에 실습했던 자료들이나 블로그들의 내용이 이미 구식이 되어버렸군요..&lt;/p&gt;
    
    </summary>
    
    
      <category term="Small talk" scheme="https://dev-sawd.github.io/categories/Small-talk/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] 로컬 프라이빗 네트워크에 스마트 컨트랙트 배포</title>
    <link href="https://dev-sawd.github.io/2022/12/23/Ethereum-deploying-smart-contract-to-private-network/"/>
    <id>https://dev-sawd.github.io/2022/12/23/Ethereum-deploying-smart-contract-to-private-network/</id>
    <published>2022-12-22T17:00:43.000Z</published>
    <updated>2022-12-22T17:35:01.630Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/23/Ethereum-deploying-smart-contract-to-private-network/thumbnail.png" class=""><p>로컬 프라이빗 네트워크에 스마트 컨트랙트를 배포하고 호출해보겠습니다.</p><a id="more"></a><h1 id="트러플-프로젝트-만들기"><a href="#트러플-프로젝트-만들기" class="headerlink" title="트러플 프로젝트 만들기"></a>트러플 프로젝트 만들기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> mkdir ~/truffleproject</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> ~/truffleproject </span></span><br><span class="line">truffleproject % truffle init</span><br><span class="line"></span><br><span class="line">Starting init...</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Copying project files to /Users/devsawd/truffleproject</span></span><br><span class="line"></span><br><span class="line">Init successful, sweet!</span><br><span class="line"></span><br><span class="line">Try our scaffold commands to get started:</span><br><span class="line"><span class="meta">  $</span><span class="bash"> truffle create contract YourContractName <span class="comment"># scaffold a contract</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> truffle create <span class="built_in">test</span> YourTestName         <span class="comment"># scaffold a test</span></span></span><br><span class="line"></span><br><span class="line">http://trufflesuite.com/docs</span><br></pre></td></tr></table></figure><h1 id="이더리움-네트워크-설정"><a href="#이더리움-네트워크-설정" class="headerlink" title="이더리움 네트워크 설정"></a>이더리움 네트워크 설정</h1><p><code>~/truffleproject/truffle-config.js</code>에서 Geth 프라이빗 네트워크, 가나슈, 솔리디티 컴파일 버전 관련 설정을 진행합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">         host: "127.0.0.1",     // Localhost (default: none)</span><br><span class="line">         port: 8545,            // Standard Ethereum port (default: none)</span><br><span class="line">         network_id: "15",       // Any network (default: none)</span><br><span class="line">         gas : 4700000</span><br><span class="line">    &#125;,</span><br><span class="line">    ganache: &#123;</span><br><span class="line">          host: '127.0.0.1',</span><br><span class="line">          port: 7545,</span><br><span class="line">          network_id: '*'</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">compilers: &#123;</span><br><span class="line">    solc: &#123;</span><br><span class="line">      version: "0.8.17" // Fetch exact version from solc-bin (default: truffle's version)</span><br><span class="line">      // docker: true,        // Use "0.5.1" you've installed locally with docker (default: false)</span><br><span class="line">      // settings: &#123;          // See the solidity docs for advice about optimization and evmVersion</span><br><span class="line">      //  optimizer: &#123;</span><br><span class="line">      //    enabled: false,</span><br><span class="line">      //    runs: 200</span><br><span class="line">      //  &#125;,</span><br><span class="line">      //  evmVersion: "byzantium"</span><br><span class="line">      // &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Truffle-Console-실행"><a href="#Truffle-Console-실행" class="headerlink" title="Truffle Console 실행"></a>Truffle Console 실행</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle console --network development</span></span><br><span class="line"><span class="meta">truffle(development)&gt;</span></span><br></pre></td></tr></table></figure><p>만약 아래와 같은 에러 발생시 Geth가 실행되어있는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle console --network development</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Something went wrong <span class="keyword">while</span> attempting to connect to the network at http://127.0.0.1:8545. Check your network configuration.</span></span><br><span class="line">ProviderError: </span><br><span class="line">Could not connect to your Ethereum client with the following parameters:</span><br><span class="line">    - host       &gt; 127.0.0.1</span><br><span class="line">    - port       &gt; 8545</span><br><span class="line">    - network_id &gt; 15</span><br><span class="line">Please check that your Ethereum client:</span><br><span class="line">    - is running</span><br><span class="line">    - is accepting RPC connections (i.e., "--rpc" or "--http" option is used in geth)</span><br><span class="line">    - is accessible over the network</span><br><span class="line">    - is properly configured in your Truffle configuration file (truffle-config.js)</span><br><span class="line"></span><br><span class="line">    at /opt/homebrew/lib/node_modules/truffle/build/webpack:/packages/provider/wrapper.js:80:1</span><br><span class="line">    at /opt/homebrew/lib/node_modules/truffle/build/webpack:/packages/provider/wrapper.js:118:1</span><br><span class="line">    at XMLHttpRequest.request.onreadystatechange (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/web3-providers-http/lib/index.js:98:1)</span><br><span class="line">    at XMLHttpRequestEventTarget.dispatchEvent (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:1)</span><br><span class="line">    at XMLHttpRequest.exports.modules.996763.XMLHttpRequest._setReadyState (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:208:1)</span><br><span class="line">    at XMLHttpRequest.exports.modules.996763.XMLHttpRequest._onHttpRequestError (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:349:1)</span><br><span class="line">    at ClientRequest.&lt;anonymous&gt; (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:252:48)</span><br><span class="line">    at ClientRequest.emit (node:events:513:28)</span><br><span class="line">    at ClientRequest.emit (node:domain:482:12)</span><br><span class="line">    at Socket.socketErrorListener (node:_http_client:481:9)</span><br><span class="line">    at Socket.emit (node:events:513:28)</span><br><span class="line">    at Socket.emit (node:domain:482:12)</span><br><span class="line">    at emitErrorNT (node:internal/streams/destroy:151:8)</span><br><span class="line">    at emitErrorCloseNT (node:internal/streams/destroy:116:3)</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:82:21)</span><br><span class="line">Truffle v5.6.9 (core: 5.6.9)</span><br><span class="line">Node v18.6.0</span><br></pre></td></tr></table></figure><h1 id="package-json-만들기"><a href="#package-json-만들기" class="headerlink" title="package.json 만들기"></a>package.json 만들기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> npm init -y    </span></span><br><span class="line">Wrote to /Users/devsawd/truffleproject/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "truffleproject",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "",</span><br><span class="line">  "main": "truffle-config.js",</span><br><span class="line">  "directories": &#123;</span><br><span class="line">    "test": "test"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "keywords": [],</span><br><span class="line">  "author": "",</span><br><span class="line">  "license": "ISC"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="오픈제플린-설치"><a href="#오픈제플린-설치" class="headerlink" title="오픈제플린 설치"></a>오픈제플린 설치</h1><p>안전한 스마트 컨트랙트 개발을 위한 라이브러리입니다.</p><p>ERC20 및 ERC721과 같은 표준 구현을 지원합니다.</p><p>이 실습에서 꼭 필요한 라이브러리는 아니지만 학습에 참고하면 유용합니다.</p><a href="https://openzeppelin.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://www.openzeppelin.com/hubfs/Cover_OZm-2.png#keepProtocol"></img></div><div class="descriptions"><div class="og-title">OpenZeppelin | Contracts</div><div class="og-description">OpenZeppelin Contracts helps you minimize risk by using battle-tested libraries of smart contracts for Ethereum and other blockchains. It in…</div></div></div></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> npm install @openzeppelin/contracts</span></span><br><span class="line"></span><br><span class="line">added 1 package, and audited 2 packages in 3s</span><br><span class="line"></span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><h1 id="스마트-컨트랙트-구현"><a href="#스마트-컨트랙트-구현" class="headerlink" title="스마트 컨트랙트 구현"></a>스마트 컨트랙트 구현</h1><p>스마트 컨트랙트로 이더를 전송하는 간단한 함수를 구현해보겠습니다.</p><blockquote><p>오픈제플린의 Ownable을 어떻게 import해서 사용하는지 참고하면 좋습니다.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> contracts</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> touch Sample.sol</span></span><br><span class="line"></span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import "@openzeppelin/contracts/access/Ownable.sol";</span><br><span class="line"></span><br><span class="line">contract Sample is Ownable&#123;</span><br><span class="line">    function send() public payable &#123;</span><br><span class="line">      address sender = payable(msg.sender);</span><br><span class="line">      bool sent = payable(sender).send(msg.value);</span><br><span class="line">      require(sent,"Failed to send either");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="컴파일"><a href="#컴파일" class="headerlink" title="컴파일"></a>컴파일</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle compile</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/Sample.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling @openzeppelin/contracts/access/Ownable.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling @openzeppelin/contracts/utils/Context.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/devsawd/truffleproject/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.17+commit.8df45f5f.Emscripten.clang</span><br></pre></td></tr></table></figure><h1 id="프라이빗-네트워크에-계약-배포"><a href="#프라이빗-네트워크에-계약-배포" class="headerlink" title="프라이빗 네트워크에 계약 배포"></a>프라이빗 네트워크에 계약 배포</h1><h2 id="마이그레이션-파일-작성"><a href="#마이그레이션-파일-작성" class="headerlink" title="마이그레이션 파일 작성"></a>마이그레이션 파일 작성</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> ~/truffleproject/migrasions</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> touch 2_deploy_sample.js</span></span><br><span class="line"></span><br><span class="line">const Sample = artifacts.require('../contracts/Sample.sol')</span><br><span class="line"></span><br><span class="line">module.exports = deployer =&gt; &#123;</span><br><span class="line">    deployer.deploy(Sample).then(instance =&gt; &#123;</span><br><span class="line">        console.log('ABI:', JSON.stringify(instance.abi))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="가나슈에-트러플-프로젝트-배포"><a href="#가나슈에-트러플-프로젝트-배포" class="headerlink" title="가나슈에 트러플 프로젝트 배포"></a>가나슈에 트러플 프로젝트 배포</h2><p>앞서 설정한 가나슈 네트워크에 배포합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle migrate --network ganache</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Everything is up to date, there is nothing to compile.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">'ganache'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      5777</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 6721975 (0x6691b7)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_sample.js</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">   Deploying 'Sample'</span><br><span class="line">   ------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0xcca8f14829c106e3bf74d00282e9323358bc8904eee76a2a0469bbbe159b4eae</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x8e36a247aD15a98ae7e7B6e23D4D69988bE9c12e</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1671726245</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x9313a92d0F000dBf856252A1cd3E176E116fc704</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             99.9921389</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            393055 (0x5ff5f)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           20 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.0078611 ETH</span></span><br><span class="line"></span><br><span class="line">ABI: [&#123;"anonymous":false,"inputs":[&#123;"indexed":true,"internalType":"address","name":"previousOwner","type":"address"&#125;,&#123;"indexed":true,"internalType":"address","name":"newOwner","type":"address"&#125;],"name":"OwnershipTransferred","type":"event","signature":"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"&#125;,&#123;"inputs":[],"name":"owner","outputs":[&#123;"internalType":"address","name":"","type":"address"&#125;],"stateMutability":"view","type":"function","constant":true,"signature":"0x8da5cb5b"&#125;,&#123;"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function","signature":"0x715018a6"&#125;,&#123;"inputs":[&#123;"internalType":"address","name":"newOwner","type":"address"&#125;],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function","signature":"0xf2fde38b"&#125;,&#123;"inputs":[],"name":"send","outputs":[],"stateMutability":"payable","type":"function","payable":true,"signature":"0xb46300ec"&#125;]</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:           0.0078611 ETH</span></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.0078611 ETH</span></span><br></pre></td></tr></table></figure><p>만약 컴파일과 마이그레이션을 처음부터 실행할때는 아래의 명령어를 이용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle migrate --reset --compile-all --network ganache</span><br></pre></td></tr></table></figure><h1 id="스마트-컨트랙트-호출-확인"><a href="#스마트-컨트랙트-호출-확인" class="headerlink" title="스마트 컨트랙트 호출 확인"></a>스마트 컨트랙트 호출 확인</h1><h2 id="Geth-콘솔에-접속-후-계정-잠금-해제"><a href="#Geth-콘솔에-접속-후-계정-잠금-해제" class="headerlink" title="Geth 콘솔에 접속 후 계정 잠금 해제"></a>Geth 콘솔에 접속 후 계정 잠금 해제</h2><p>계정이 잠겨있으면 send 함수를 호출할 수 없으니 계정의 잠금을 해제해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> geth attach http://localhost:8545</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.personal.unlockAccount(eth.accounts[1])</span></span><br><span class="line">Unlock account 0x66b4e7be902300f9a15d900822bbd8803be87391</span><br><span class="line">Passphrase: </span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="계정-잔액-확인"><a href="#계정-잔액-확인" class="headerlink" title="계정 잔액 확인"></a>계정 잔액 확인</h2><p>이더를 보내기 전의 잔액을 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.fromWei(eth.getBalance(eth.accounts[1]))</span></span><br><span class="line">499999999.9999319599999997</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="스마트-컨트랙트-객체"><a href="#스마트-컨트랙트-객체" class="headerlink" title="스마트 컨트랙트 객체"></a>스마트 컨트랙트 객체</h2><p>트러플 프로젝트를 배포한 후 스마트 컨트랙트의 기능을 호출하기 위해 스마트 컨트랙트 객체를 가져옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 예시</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.contract(&#123;ABI&#125;).at(&#123;contract address&#125;)</span></span><br></pre></td></tr></table></figure><p><code>가나슈에 트러플 프로젝트 배포</code>의 로그를 확인해 <code>{ABI}</code>와 <code>{contract address}</code>에 알맞은 값을 입력해 Sample 객체를 가져옵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> var sample = eth.contract([&#123;<span class="string">"anonymous"</span>:<span class="literal">false</span>,<span class="string">"inputs"</span>:[&#123;<span class="string">"indexed"</span>:<span class="literal">true</span>,<span class="string">"internalType"</span>:<span class="string">"address"</span>,<span class="string">"name"</span>:<span class="string">"previousOwner"</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;,&#123;<span class="string">"indexed"</span>:<span class="literal">true</span>,<span class="string">"internalType"</span>:<span class="string">"address"</span>,<span class="string">"name"</span>:<span class="string">"newOwner"</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;],<span class="string">"name"</span>:<span class="string">"OwnershipTransferred"</span>,<span class="string">"type"</span>:<span class="string">"event"</span>,<span class="string">"signature"</span>:<span class="string">"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"</span>&#125;,&#123;<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"owner"</span>,<span class="string">"outputs"</span>:[&#123;<span class="string">"internalType"</span>:<span class="string">"address"</span>,<span class="string">"name"</span>:<span class="string">""</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;],<span class="string">"stateMutability"</span>:<span class="string">"view"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>,<span class="string">"constant"</span>:<span class="literal">true</span>,<span class="string">"signature"</span>:<span class="string">"0x8da5cb5b"</span>&#125;,&#123;<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"renounceOwnership"</span>,<span class="string">"outputs"</span>:[],<span class="string">"stateMutability"</span>:<span class="string">"nonpayable"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>,<span class="string">"signature"</span>:<span class="string">"0x715018a6"</span>&#125;,&#123;<span class="string">"inputs"</span>:[&#123;<span class="string">"internalType"</span>:<span class="string">"address"</span>,<span class="string">"name"</span>:<span class="string">"newOwner"</span>,<span class="string">"type"</span>:<span class="string">"address"</span>&#125;],<span class="string">"name"</span>:<span class="string">"transferOwnership"</span>,<span class="string">"outputs"</span>:[],<span class="string">"stateMutability"</span>:<span class="string">"nonpayable"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>,<span class="string">"signature"</span>:<span class="string">"0xf2fde38b"</span>&#125;,&#123;<span class="string">"inputs"</span>:[],<span class="string">"name"</span>:<span class="string">"send"</span>,<span class="string">"outputs"</span>:[],<span class="string">"stateMutability"</span>:<span class="string">"payable"</span>,<span class="string">"type"</span>:<span class="string">"function"</span>,<span class="string">"payable"</span>:<span class="literal">true</span>,<span class="string">"signature"</span>:<span class="string">"0xb46300ec"</span>&#125;]).at(<span class="string">'0x8e36a247aD15a98ae7e7B6e23D4D69988bE9c12e'</span>)</span></span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p>스마트 컨트랙트를 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sample</span></span><br><span class="line">&#123;</span><br><span class="line">  abi: [&#123;</span><br><span class="line">      anonymous: false,</span><br><span class="line">      inputs: [&#123;...&#125;, &#123;...&#125;],</span><br><span class="line">      name: "OwnershipTransferred",</span><br><span class="line">      signature: "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",</span><br><span class="line">      type: "event"</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      constant: true,</span><br><span class="line">      inputs: [],</span><br><span class="line">      name: "owner",</span><br><span class="line">      outputs: [&#123;...&#125;],</span><br><span class="line">      signature: "0x8da5cb5b",</span><br><span class="line">      stateMutability: "view",</span><br><span class="line">      type: "function"</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      inputs: [],</span><br><span class="line">      name: "renounceOwnership",</span><br><span class="line">      outputs: [],</span><br><span class="line">      signature: "0x715018a6",</span><br><span class="line">      stateMutability: "nonpayable",</span><br><span class="line">      type: "function"</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      inputs: [&#123;...&#125;],</span><br><span class="line">      name: "transferOwnership",</span><br><span class="line">      outputs: [],</span><br><span class="line">      signature: "0xf2fde38b",</span><br><span class="line">      stateMutability: "nonpayable",</span><br><span class="line">      type: "function"</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      inputs: [],</span><br><span class="line">      name: "send",</span><br><span class="line">      outputs: [],</span><br><span class="line">      payable: true,</span><br><span class="line">      signature: "0xb46300ec",</span><br><span class="line">      stateMutability: "payable",</span><br><span class="line">      type: "function"</span><br><span class="line">  &#125;],</span><br><span class="line">  address: "0x8e36a247aD15a98ae7e7B6e23D4D69988bE9c12e",</span><br><span class="line">  transactionHash: null,</span><br><span class="line">  OwnershipTransferred: function bound(),</span><br><span class="line">  allEvents: function bound(),</span><br><span class="line">  owner: function bound(),</span><br><span class="line">  renounceOwnership: function bound(),</span><br><span class="line">  send: function bound(),</span><br><span class="line">  transferOwnership: function bound()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="스마트-컨트랙트의-잔고-확인"><a href="#스마트-컨트랙트의-잔고-확인" class="headerlink" title="스마트 컨트랙트의 잔고 확인"></a>스마트 컨트랙트의 잔고 확인</h2><p>계정으로부터 이더를 전송하기 전 스마트 컨트랙트의 잔고를 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.fromWei(eth.getBalance(<span class="string">'0x8e36a247aD15a98ae7e7B6e23D4D69988bE9c12e'</span>))</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="함수-호출"><a href="#함수-호출" class="headerlink" title="함수 호출"></a>함수 호출</h2><p>아래의 방법으로 함수를 트랜잭션 방식으로 호출합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">계약객체.함수이름.sendTransaction(인자, &#123;from: 호출주소, gas: 가스제한, value: 송금액&#125;)</span><br></pre></td></tr></table></figure><p>value는 필요없으면 생략이 가능합니다.</p><p>send 함수를 transaction으로 호출합니다.<br>이때 <code>accounts[1]</code>에서 스마트 컨트랙트로 0.1 이더를 전송해보겠습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sample.send.sendTransaction(&#123;from: eth.accounts[1], gas: 100000, value: web3.toWei(0.1, <span class="string">'ether'</span>)&#125;)</span></span><br><span class="line">"0x86e3b84c28caad0874e9933c42e02e3deebd42c7edf8b1d0c07f0b47c12de6cd"</span><br></pre></td></tr></table></figure><h2 id="트랜잭션-발행-결과-확인"><a href="#트랜잭션-발행-결과-확인" class="headerlink" title="트랜잭션 발행 결과 확인"></a>트랜잭션 발행 결과 확인</h2><p>0.1 이더 전송시 발생한 트랜잭션으로 결과를 확인할 수 있습니다. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getTransaction(<span class="string">'0x86e3b84c28caad0874e9933c42e02e3deebd42c7edf8b1d0c07f0b47c12de6cd'</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  blockHash: "0x4d45695ee99e9271727659d29f18c32aca450db64bb8302e8478aa469d79f6ad",</span><br><span class="line">  blockNumber: 5575,</span><br><span class="line">  chainId: "0xf",</span><br><span class="line">  from: "0x66b4e7be902300f9a15d900822bbd8803be87391",</span><br><span class="line">  gas: 100000,</span><br><span class="line">  gasPrice: 1000000000,</span><br><span class="line">  hash: "0x86e3b84c28caad0874e9933c42e02e3deebd42c7edf8b1d0c07f0b47c12de6cd",</span><br><span class="line">  input: "0xb46300ec",</span><br><span class="line">  nonce: 3,</span><br><span class="line">  r: "0x6e690cb0b3eff501580b6dd1e66a98d73140957f1d639e25baf8b57ea222971f",</span><br><span class="line">  s: "0x67f8d94c622c528d5dfdc44fdfcfa579896eb2dd1c9fd4a653aa4d4b8b4dc167",</span><br><span class="line">  to: "0x8e36a247ad15a98ae7e7b6e23d4d69988be9c12e",</span><br><span class="line">  transactionIndex: 0,</span><br><span class="line">  type: "0x0",</span><br><span class="line">  v: "0x42",</span><br><span class="line">  value: 100000000000000000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 <code>blockNumber</code>가 <code>null</code>이라면 채굴해서 트랜잭션을 블록에 포함시킵니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.start(1)</span></span><br><span class="line">null</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 약간의 시간이 지난 후 트랜잭션 발행 결과 확인</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.stop()</span></span><br><span class="line">null</span><br></pre></td></tr></table></figure><h2 id="스마트-컨트랙트-잔액-확인"><a href="#스마트-컨트랙트-잔액-확인" class="headerlink" title="스마트 컨트랙트 잔액 확인"></a>스마트 컨트랙트 잔액 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.fromWei(eth.getBalance(<span class="string">'0x8e36a247aD15a98ae7e7B6e23D4D69988bE9c12e'</span>))</span></span><br><span class="line">0.1</span><br></pre></td></tr></table></figure><h2 id="계정-잔액-확인-1"><a href="#계정-잔액-확인-1" class="headerlink" title="계정 잔액 확인"></a>계정 잔액 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.fromWei(eth.getBalance(eth.accounts[1]))</span></span><br><span class="line">499999999.8999107519999997</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/23/Ethereum-deploying-smart-contract-to-private-network/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;로컬 프라이빗 네트워크에 스마트 컨트랙트를 배포하고 호출해보겠습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
      <category term="Geth" scheme="https://dev-sawd.github.io/tags/Geth/"/>
    
      <category term="Truffle" scheme="https://dev-sawd.github.io/tags/Truffle/"/>
    
  </entry>
  
  <entry>
    <title>[ETC] exec format error</title>
    <link href="https://dev-sawd.github.io/2022/12/19/ETC-exec-format-error/"/>
    <id>https://dev-sawd.github.io/2022/12/19/ETC-exec-format-error/</id>
    <published>2022-12-18T19:09:12.000Z</published>
    <updated>2022-12-18T19:39:20.901Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/19/ETC-exec-format-error/thumbnail.png" class=""><p>쿠버네티스에 이더리움 프라이빗 네트워크를 설치하고 접속하려는데 아래와 같은 에러가 발생했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth attach http://35.243.121.19:30045</span></span><br><span class="line">Fatal: Failed to start the JavaScript console: api modules: Post "http://35.243.121.19:30045": context deadline exceeded</span><br></pre></td></tr></table></figure><a id="more"></a><p>노드 안에 파일이 정상적으로 복사되었는지 확인했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  lost+found  mnt  opt  postinst  proc  root  run  sbin  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>그런데 있어야할 <code>entrypoint.sh</code>가 없습니다?</p><p>이상하다는 생각과 함께 쿠버네티스 상태를 조회해봤습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> kubectl get pods,deployments,service -l app=private-net                                                   </span></span><br><span class="line">NAME                               READY   STATUS             RESTARTS      AGE</span><br><span class="line">pod/private-net-75c64c9b55-6drc2   0/1     CrashLoopBackOff   3 (49s ago)   106s</span><br><span class="line"></span><br><span class="line">NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/private-net   0/1     1            0           106s</span><br><span class="line"></span><br><span class="line">NAME                  TYPE       CLUSTER-IP   EXTERNAL-IP   PORT(S)                         AGE</span><br><span class="line">service/private-net   NodePort   10.28.0.76   &lt;none&gt;        8545:30045/TCP,8546:30046/TCP   106s</span><br></pre></td></tr></table></figure><p>내용을 확인해보니 <code>RESTART</code> 카운터가 올라가며 <code>CrashLoopBackOff</code> 상태와 <code>READY 0/1</code>인것이 확인되었습니다.</p><p>문제가 정확히 뭔지 확인해봐야 겠다는 생각이 들었습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> kubectl describe pod</span></span><br><span class="line"></span><br><span class="line">// 생략...</span><br><span class="line"></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age               From               Message</span><br><span class="line">  ----     ------     ----              ----               -------</span><br><span class="line">  Normal   Scheduled  15s               default-scheduler  Successfully assigned default/private-net-75c64c9b55-6drc2 to gke-private-net-default-pool-0723bf45-cj48</span><br><span class="line">  Normal   Pulled     8s                kubelet            Successfully pulled image "gcr.io/flash-freehold-371706/private-net:latest" in 6.166602093s</span><br><span class="line">  Normal   Pulling    7s (x2 over 14s)  kubelet            Pulling image "gcr.io/flash-freehold-371706/private-net:latest"</span><br><span class="line">  Normal   Created    6s (x2 over 8s)   kubelet            Created container private-net</span><br><span class="line">  Normal   Started    6s (x2 over 8s)   kubelet            Started container private-net</span><br><span class="line">  Normal   Pulled     6s                kubelet            Successfully pulled image "gcr.io/flash-freehold-371706/private-net:latest" in 1.152688998s</span><br><span class="line">  Warning  BackOff    4s (x2 over 5s)   kubelet            Back-off restarting failed container</span><br></pre></td></tr></table></figure><p>이미지는 정상적으로 풀링했는데 <code>Back-off restarting failed container</code>라고 뜨는군요</p><p>조금 더 자세한 로그를 살펴봅니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> kubectl logs pod/private-net-75c64c9b55-6drc2</span></span><br><span class="line">exec /entrypoint.sh: exec format error</span><br></pre></td></tr></table></figure><p>역시나 <code>entrypoint.sh</code>와 관련이 있군요</p><p>따라서 <code>Dockerfile</code> 내용을 확인해봤습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM ethereum/client-go</span><br><span class="line"></span><br><span class="line">COPY genesis.json /var/share/ethereum/</span><br><span class="line">COPY keystore /var/share/ethereum/keystore/</span><br><span class="line">COPY password /var/share/ethereum/</span><br><span class="line">COPY entrypoint.sh /</span><br><span class="line">RUN chmod 744 /entrypoint.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 8545 8546 30303 30303/udp</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["/entrypoint.sh"]</span><br></pre></td></tr></table></figure><p>내용은 크게 문제있어보이지 않습니다.</p><p>결국 쿠버네티스 클러스터를 구성하고 생성된 노드들이 도커 이미지를 정상적으로 반영하지 못한것으로 판단했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> kubectl apply -f private-net.yaml</span></span><br></pre></td></tr></table></figure><p>아마 위의 작업이 정상적으로 되지 않았을겁니다.</p><p>그렇다면 왜 안됐을까 고민을 했을때 M1에서 빌드했기 때문에 <code>amd</code>기반의 노드에서는 정상적으로 작동하지 않았을거라 생각했습니다.</p><h1 id="크로스-플랫폼-빌드"><a href="#크로스-플랫폼-빌드" class="headerlink" title="크로스 플랫폼 빌드"></a>크로스 플랫폼 빌드</h1><p><code>amd</code>와 <code>arm</code> 플랫폼에 대해 빌드를 진행하고 실습을 진행해보았습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker buildx create --name multiarch-builder --use</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> docker buildx build --push --platform linux/amd64,linux/arm64 --tag gcr.io/flash-freehold-371706/private-net:2.0 .</span></span><br></pre></td></tr></table></figure><p>그리고 문제없이 실행되는것을 확인했습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/19/ETC-exec-format-error/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;쿠버네티스에 이더리움 프라이빗 네트워크를 설치하고 접속하려는데 아래와 같은 에러가 발생했습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; geth attach http://35.243.121.19:30045&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fatal: Failed to start the JavaScript console: api modules: Post &quot;http://35.243.121.19:30045&quot;: context deadline exceeded&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="Kubernetes" scheme="https://dev-sawd.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] 클라우드 프라이빗 네트워크 구축</title>
    <link href="https://dev-sawd.github.io/2022/12/17/Ethereum-building-a-cloud-private-network/"/>
    <id>https://dev-sawd.github.io/2022/12/17/Ethereum-building-a-cloud-private-network/</id>
    <published>2022-12-16T22:58:42.000Z</published>
    <updated>2022-12-17T18:56:46.807Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/17/Ethereum-building-a-cloud-private-network/thumbnail.png" class=""><p>구글 클라우드 플랫폼의 기능 중 쿠버네티스 엔진으로 프라이빗 네트워크를 구축하는 실습을 진행하였습니다.</p><a id="more"></a><ul><li><a href="https://cloud.google.com/" target="_blank" rel="noopener">https://cloud.google.com/</a></li></ul><p>위의 사이트를 이용해 약관 및 결제정보를 입력하고 가입합니다.</p><p>좌측 메뉴의 <code>Kubernetes Engine</code>의 <code>클러스터</code>를 눌러 시작합니다.</p><h1 id="구글-클라우드-SDK"><a href="#구글-클라우드-SDK" class="headerlink" title="구글 클라우드 SDK"></a>구글 클라우드 SDK</h1><p>구글 클라우드 SDK를 설치하고 이를 이용해 구성합니다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 설치</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew install --cask google-cloud-sdk</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> macOS PATH 환경 변수 추가</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'"</span> &gt;&gt; ~/.zprofile $ <span class="built_in">source</span> ~/.zprofile</span></span><br></pre></td></tr></table></figure><h2 id="gcloud-버전-확인"><a href="#gcloud-버전-확인" class="headerlink" title="gcloud 버전 확인"></a>gcloud 버전 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud --version</span></span><br><span class="line">Google Cloud SDK 412.0.0</span><br><span class="line">bq 2.0.83</span><br><span class="line">core 2022.12.09</span><br><span class="line">gcloud-crc32c 1.0.0</span><br><span class="line">gsutil 5.17</span><br></pre></td></tr></table></figure><h2 id="구글-클라우드-SDK-인증"><a href="#구글-클라우드-SDK-인증" class="headerlink" title="구글 클라우드 SDK 인증"></a>구글 클라우드 SDK 인증</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud auth login</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이후 브라우저에서 로그인</span></span><br></pre></td></tr></table></figure><h2 id="구글-클라우드-SDK-초기화"><a href="#구글-클라우드-SDK-초기화" class="headerlink" title="구글 클라우드 SDK 초기화"></a>구글 클라우드 SDK 초기화</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud init</span></span><br><span class="line">Welcome! This command will take you through the configuration of gcloud.</span><br><span class="line"></span><br><span class="line">Settings from your current configuration [default] are:</span><br><span class="line">core:</span><br><span class="line">  account: devsawd@gmail.com</span><br><span class="line">  disable_usage_reporting: 'True'</span><br><span class="line"></span><br><span class="line">Pick configuration to use:</span><br><span class="line"> [1] Re-initialize this configuration [default] with new settings </span><br><span class="line"> [2] Create a new configuration</span><br><span class="line">Please enter your numeric choice:  1 #1을 선택</span><br></pre></td></tr></table></figure><p>1을 선택하여 기본값으로 설정합니다.</p><h2 id="계정-선택"><a href="#계정-선택" class="headerlink" title="계정 선택"></a>계정 선택</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Choose the account you would like to use to perform operations for this </span><br><span class="line">configuration:</span><br><span class="line"> [1] devsawd@gmail.com</span><br><span class="line"> [2] Log in with a new account</span><br><span class="line">Please enter your numeric choice:  1</span><br><span class="line"></span><br><span class="line">You are logged in as: [devsawd@gmail.com].</span><br></pre></td></tr></table></figure><h2 id="프로젝트-선택-및-리전-설정"><a href="#프로젝트-선택-및-리전-설정" class="headerlink" title="프로젝트 선택 및 리전 설정"></a>프로젝트 선택 및 리전 설정</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Pick cloud project to use: </span><br><span class="line"> [1] flash-freehold-371706</span><br><span class="line"> [2] Enter a project ID</span><br><span class="line"> [3] Create a new project</span><br><span class="line">Please enter numeric choice or text value (must exactly match list item):  1</span><br><span class="line"></span><br><span class="line">Your current project has been set to: [flash-freehold-371706].</span><br><span class="line"></span><br><span class="line">Do you want to configure a default Compute Region and Zone? (Y/n)?  Y</span><br><span class="line"></span><br><span class="line">//... 생략</span><br><span class="line">Too many options [107]. Enter "list" at prompt to print choices fully.</span><br><span class="line">Please enter numeric choice or text value (must exactly match list item):  34</span><br></pre></td></tr></table></figure><p>제 클라우드 프로젝트는 <code>flash-freehold-371706</code>으로 자동 설정되었습니다.</p><p>아래부터는 {PROJECT_ID}로 표시하겠습니다.</p><blockquote><p>만약 클라우드 프로젝트 ID를 모르는 분들은 <a href="https://cloud.google.com/" target="_blank" rel="noopener">https://cloud.google.com/</a> 로그인 후 우측 상단에 <code>[콘솔]</code>을 누르면 프로젝트 번호와 프로젝트 ID를 보실 수 있습니다.</p><p>프로젝트 ID를 확인하세요.</p></blockquote><p>34 <code>&#39;asia-northeast1-a&#39;</code> 도쿄 리전을 선택합니다.</p><h1 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h1><p>쿠버네티스 커맨드라인 툴인 kubectl입니다.</p><ul><li><a href="https://kubernetes.io/docs/tasks/tools/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/</a></li></ul><h2 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h2><p>gcloud로 kubectl을 설치합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud components install kubectl</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your current Google Cloud CLI version is: 412.0.0</span><br><span class="line">Installing components from version: 412.0.0</span><br><span class="line"></span><br><span class="line">┌─────────────────────────────────────────────┐</span><br><span class="line">│     These components will be installed.     │</span><br><span class="line">├────────────────────────┬─────────┬──────────┤</span><br><span class="line">│          Name          │ Version │   Size   │</span><br><span class="line">├────────────────────────┼─────────┼──────────┤</span><br><span class="line">│ gke-gcloud-auth-plugin │   0.4.0 │  7.1 MiB │</span><br><span class="line">│ kubectl                │ 1.23.14 │ 78.7 MiB │</span><br><span class="line">│ kubectl                │ 1.23.14 │  &lt; 1 MiB │</span><br><span class="line">└────────────────────────┴─────────┴──────────┘</span><br><span class="line"></span><br><span class="line">For the latest full release notes, please visit:</span><br><span class="line">  https://cloud.google.com/sdk/release_notes</span><br><span class="line"></span><br><span class="line">Do you want to continue (Y/n)?  Y</span><br></pre></td></tr></table></figure><h2 id="kubectl-버전-확인"><a href="#kubectl-버전-확인" class="headerlink" title="kubectl 버전 확인"></a>kubectl 버전 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 버전 확인</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> kubectl version</span></span><br><span class="line">Client Version: version.Info&#123;Major:"1", Minor:"22", GitVersion:"v1.22.5", GitCommit:"5c99e2ac2ff9a3c549d9ca665e7bc05a3e18f07e", GitTreeState:"clean", BuildDate:"2021-12-16T08:38:33Z", GoVersion:"go1.16.12", Compiler:"gc", Platform:"darwin/arm64"&#125;</span><br></pre></td></tr></table></figure><h1 id="클러스터-만들기"><a href="#클러스터-만들기" class="headerlink" title="클러스터 만들기"></a>클러스터 만들기</h1><p>머신타입 e2-medium의 노드를 3개를 만듭니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud container clusters create private-net</span></span><br><span class="line"></span><br><span class="line">//생략</span><br><span class="line"></span><br><span class="line">kubeconfig entry generated for private-net.</span><br><span class="line">NAME         LOCATION           MASTER_VERSION  MASTER_IP      MACHINE_TYPE  NODE_VERSION    NUM_NODES  STATUS</span><br><span class="line">private-net  asia-northeast1-a  1.24.5-gke.600  35.200.60.221  e2-medium     1.24.5-gke.600  3          RUNNING</span><br></pre></td></tr></table></figure><h2 id="노드-확인"><a href="#노드-확인" class="headerlink" title="노드 확인"></a>노드 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">NAME                                         STATUS   ROLES    AGE   VERSION</span><br><span class="line">gke-private-net-default-pool-6fbfda54-4spn   Ready    &lt;none&gt;   66m   v1.24.5-gke.600</span><br><span class="line">gke-private-net-default-pool-6fbfda54-fcgn   Ready    &lt;none&gt;   66m   v1.24.5-gke.600</span><br><span class="line">gke-private-net-default-pool-6fbfda54-z8j3   Ready    &lt;none&gt;   66m   v1.24.5-gke.600</span><br></pre></td></tr></table></figure><h1 id="쿠버네티스를-위한-도커-컨테이너-만들기"><a href="#쿠버네티스를-위한-도커-컨테이너-만들기" class="headerlink" title="쿠버네티스를 위한 도커 컨테이너 만들기"></a>쿠버네티스를 위한 도커 컨테이너 만들기</h1><p>쿠버네티스는 도커 등에서 이용하는 컨테이너를 운영하고 관리합니다.</p><h2 id="Dockerfile-생성"><a href="#Dockerfile-생성" class="headerlink" title="Dockerfile 생성"></a>Dockerfile 생성</h2><p>private-net 디렉터리에서 Dockerfile이라는 문서를 만듭니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM ethereum/client-go</span><br><span class="line"></span><br><span class="line">COPY genesis.json /var/share/ethereum/</span><br><span class="line">COPY keystore /var/share/ethereum/keystore/</span><br><span class="line">COPY password /var/share/ethereum/</span><br><span class="line">COPY entrypoint.sh /</span><br><span class="line">RUN chmod 744 /entrypoint.sh</span><br><span class="line"></span><br><span class="line">EXPOSE 8545 8546 30303 30303/udp</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["/entrypoint.sh"]</span><br></pre></td></tr></table></figure><p><code>ethereum/client-go</code> 이미지를 기반으로 하여 <code>private-net</code> 폴더 안에 있는 실행에 필요한 파일들을 지정합니다.</p><h2 id="entrypoint-sh-생성"><a href="#entrypoint-sh-생성" class="headerlink" title="entrypoint.sh 생성"></a>entrypoint.sh 생성</h2><p>컨테이너를 처음 실행할 때 프라이빗 네트워크를 초기화, 실행하는 데 필요한 스크립트입니다.<br>private-net 디렉터리 안에 생성합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">geth --datadir /var/share/ethereum --nodiscover --maxpeers 0 \</span><br><span class="line">init /var/share/ethereum/genesis.json \</span><br><span class="line">&amp;&amp; \</span><br><span class="line">geth --datadir /var/share/ethereum --networkid 15 \</span><br><span class="line">--nodiscover --maxpeers 0 --mine --miner.threads 1 \</span><br><span class="line">--http --http.addr "0.0.0.0" --http.corsdomain "*" \</span><br><span class="line">--http.vhosts "*" --http.api "eth,web3,personal,net,miner" \</span><br><span class="line">--ipcpath /tmp/geth.ipc --ws --ws.addr "0.0.0.0" \</span><br><span class="line">--ws.api "eth,web3,personal,net,miner" --ws.origins "*" \</span><br><span class="line">--allow-insecure-unlock --password /var/share/ethereum/password</span><br></pre></td></tr></table></figure><h2 id="컨테이너-이미지-만들기"><a href="#컨테이너-이미지-만들기" class="headerlink" title="컨테이너 이미지 만들기"></a>컨테이너 이미지 만들기</h2><p>제 로컬 환경은 <code>M1 맥북에어</code>이기 때문에 일반적인 <code>docker build</code>로 이미지를 빌드하여 올리면 <code>amd</code> 환경에서는 정상적으로 실행되지 않습니다.</p><p>따라서 <code>docker buildx</code>를 이용해서 <code>amd64</code>와 <code>arm64</code>를 모두 빌드해서 로컬 및 클라우드에서 모두 확인해 볼겁니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> builder 생성 및 사용 설정</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> docker buildx create --name multiarch-builder --use</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 빌드 완료 후 구글 클라우드로 이미지 푸쉬</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> docker buildx build --push --platform linux/amd64,linux/arm64 --tag gcr.io/&#123;PROJECT_ID&#125;/private-net .</span></span><br></pre></td></tr></table></figure><h3 id="오류1"><a href="#오류1" class="headerlink" title="오류1"></a>오류1</h3><p>아래와 같은 오류 발생 시 도커를 실행해주세요.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure><h3 id="오류2"><a href="#오류2" class="headerlink" title="오류2"></a>오류2</h3><p>push 실패시 아래의 절차를 진행 후 다시 시도합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">The push refers to repository [gcr.io/&#123;PROJECT_ID&#125;/private-net]</span><br><span class="line">035fcda135f4: Preparing </span><br><span class="line">3497c9d4f0f3: Preparing </span><br><span class="line">fc68344ae935: Preparing </span><br><span class="line">b04ac25474eb: Preparing </span><br><span class="line">6c4d81675161: Preparing </span><br><span class="line">f4d3f9e1ca46: Waiting </span><br><span class="line">5d68f8622ea4: Waiting </span><br><span class="line">1b577a8fb8ce: Waiting </span><br><span class="line">unauthorized: You don't have the needed permissions to perform this operation, and you may have invalid credentials. To authenticate your request, follow the steps in: https://cloud.google.com/container-registry/docs/advanced-authentication</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gcloud 로그인</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> gcloud auth login</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> gcloud auth configure-docker</span></span><br></pre></td></tr></table></figure><h2 id="로컬에서-컨테이너-이미지-실행"><a href="#로컬에서-컨테이너-이미지-실행" class="headerlink" title="로컬에서 컨테이너 이미지 실행"></a>로컬에서 컨테이너 이미지 실행</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker run -it gcr.io/&#123;PROJECT_ID&#125;/private-net</span></span><br></pre></td></tr></table></figure><p>정상적으로 실행되는지 확인 후 꺼줍니다.</p><h1 id="노드에-컨테이너-배포"><a href="#노드에-컨테이너-배포" class="headerlink" title="노드에 컨테이너 배포"></a>노드에 컨테이너 배포</h1><h2 id="private-net-yaml-생성"><a href="#private-net-yaml-생성" class="headerlink" title="private-net.yaml 생성"></a>private-net.yaml 생성</h2><p>private-net 디렉터리 안에 <code>private-net.yaml</code>을 만듭니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: private-net</span><br><span class="line">  namespace: default</span><br><span class="line">  labels:</span><br><span class="line">    app: private-net</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: private-net</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: private-net</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: private-net</span><br><span class="line">        image: gcr.io/&#123;PROJECT_ID&#125;/private-net:latest</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        ports:</span><br><span class="line">        - name: rpc</span><br><span class="line">          containerPort: 8545</span><br><span class="line">        - name: ws</span><br><span class="line">          containerPort: 8546</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">    name: private-net</span><br><span class="line">    namespace: default</span><br><span class="line">    labels:</span><br><span class="line">        app: private-net</span><br><span class="line">spec:</span><br><span class="line">    type: NodePort</span><br><span class="line">    ports:</span><br><span class="line">    - name: rpc</span><br><span class="line">      port: 8545</span><br><span class="line">      nodePort: 30045</span><br><span class="line">    - name: ws</span><br><span class="line">      port: 8546</span><br><span class="line">      nodePort: 30046</span><br><span class="line">    selector:</span><br><span class="line">        app: private-net</span><br></pre></td></tr></table></figure><h2 id="배포와-확인"><a href="#배포와-확인" class="headerlink" title="배포와 확인"></a>배포와 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> kubectl apply -f private-net.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> kubectl get pods,deployments,service -l app=private-net                                                   </span></span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/private-net-57bc75797b-mcz5g   1/1     Running   0          45m</span><br><span class="line"></span><br><span class="line">NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/private-net   1/1     1            1           45m</span><br><span class="line"></span><br><span class="line">NAME                  TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)                         AGE</span><br><span class="line">service/private-net   NodePort   10.28.10.115   &lt;none&gt;        8545:30045/TCP,8546:30046/TCP   45m</span><br></pre></td></tr></table></figure><p>이때 pod의 READY 부분이 1/1인지, deployment의 READY가 1/1인지 꼭 확인해야합니다.</p><p>만약 0/1로 나온다면 앞의 단계에서 문제가 발생해서 배포가 정상적으로 이루어지지 않은것입니다.</p><h2 id="방화벽-해제"><a href="#방화벽-해제" class="headerlink" title="방화벽 해제"></a>방화벽 해제</h2><p>30045, 30046포트의 방화벽을 해제해줍니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gcloud compute firewall-rules create private-net-rpc --allow=tcp:30045</span></span><br><span class="line">Creating firewall...⠹Created [https://www.googleapis.com/compute/v1/projects/&#123;PROJECT_ID&#125;/global/firewalls/private-net-rpc].</span><br><span class="line">Creating firewall...done.                                                                                              </span><br><span class="line">NAME             NETWORK  DIRECTION  PRIORITY  ALLOW      DENY  DISABLED</span><br><span class="line">private-net-rpc  default  INGRESS    1000      tcp:30045        False</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> gcloud compute firewall-rules create private-net-ws --allow=tcp:30046</span></span><br><span class="line">Creating firewall...⠹Created [https://www.googleapis.com/compute/v1/projects/&#123;PROJECT_ID&#125;/global/firewalls/private-net-ws].</span><br><span class="line">Creating firewall...done.                                                                                              </span><br><span class="line">NAME            NETWORK  DIRECTION  PRIORITY  ALLOW      DENY  DISABLED</span><br><span class="line">private-net-ws  default  INGRESS    1000      tcp:30046        False</span><br></pre></td></tr></table></figure><h2 id="쿠버네티스-노드의-IP-주소-확인"><a href="#쿠버네티스-노드의-IP-주소-확인" class="headerlink" title="쿠버네티스 노드의 IP 주소 확인"></a>쿠버네티스 노드의 IP 주소 확인</h2><h3 id="jq-설치"><a href="#jq-설치" class="headerlink" title="jq 설치"></a>jq 설치</h3><p>M1 맥북에서는 후자의 명령어를 이용해 설치해주세요.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> jq 설치</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew install jq</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> M1맥북에서 jq 설치</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> arch -arm64 brew install jq</span></span><br></pre></td></tr></table></figure><h3 id="jq를-이용해-노드-외부IP-주소-조회"><a href="#jq를-이용해-노드-외부IP-주소-조회" class="headerlink" title="jq를 이용해 노드 외부IP 주소 조회"></a>jq를 이용해 노드 외부IP 주소 조회</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">% kubectl get nodes -o json | jq &quot;.items[]|&#123;name: .metadata.name, externalIP: .status.addresses[1].address&#125;&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;gke-private-net-default-pool-c76adc95-165n&quot;,</span><br><span class="line">  &quot;externalIP&quot;: &quot;35.243.121.19&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;gke-private-net-default-pool-c76adc95-c0xr&quot;,</span><br><span class="line">  &quot;externalIP&quot;: &quot;34.84.135.176&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;gke-private-net-default-pool-c76adc95-hk9d&quot;,</span><br><span class="line">  &quot;externalIP&quot;: &quot;34.146.225.74&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="접속-확인"><a href="#접속-확인" class="headerlink" title="접속 확인"></a>접속 확인</h1><p>위의 externalIP중에 하나를 선택해 Geth로 접속할 수 있는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth attach http://35.243.121.19:30045</span></span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/v1.11.0-unstable-f53ff0ff/linux-amd64/go1.19.4</span><br><span class="line">coinbase: 0x945cd603a6754cb13c3d61d8fe240990f86f9f8a</span><br><span class="line">at block: 0 (Thu Jan 01 1970 09:00:00 GMT+0900 (KST))</span><br><span class="line"> modules: eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">To exit, press ctrl-d or type exit</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같이 ip주소와 port만 알면 Geth에 접속할 수 있게 되었습니다.</p><blockquote><p>사용하지 않을때는 노드들을 꼭 중지시켜주세요.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/17/Ethereum-building-a-cloud-private-network/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;구글 클라우드 플랫폼의 기능 중 쿠버네티스 엔진으로 프라이빗 네트워크를 구축하는 실습을 진행하였습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] 프라이빗 네트워크에 컨트랙트 배포 및 테스트</title>
    <link href="https://dev-sawd.github.io/2022/12/15/Ethereum-deploy-contract/"/>
    <id>https://dev-sawd.github.io/2022/12/15/Ethereum-deploy-contract/</id>
    <published>2022-12-14T16:32:46.000Z</published>
    <updated>2022-12-14T17:08:07.554Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/15/Ethereum-deploy-contract/thumbnail.png" class=""><p>메타코인 예제 프로젝트를 이용해 프라이빗 네트워크에 컨트랙트를 배포하고 테스트해보겠습니다.</p><a id="more"></a><h1 id="메타코인"><a href="#메타코인" class="headerlink" title="메타코인"></a>메타코인</h1><a href="https://trufflesuite.com/boxes/metacoin/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">MetaCoin Box - Truffle Suite</div></div></div></a><p>트러플을 이용해 개발한 간단한 코인입니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> private-net</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> mkdir truffle-metacoin</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> truffle-metacoin</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> truffle unbox metacoin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting unbox...</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">✓ Preparing to download box</span><br><span class="line">✓ Downloading</span><br><span class="line">✓ Cleaning up temporary files</span><br><span class="line">✓ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful, sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile contracts: truffle compile</span><br><span class="line">  Migrate contracts: truffle migrate</span><br><span class="line">  Test contracts:    truffle test</span><br></pre></td></tr></table></figure><h2 id="truffle-config-js-수정"><a href="#truffle-config-js-수정" class="headerlink" title="truffle-config.js 수정"></a>truffle-config.js 수정</h2><p>truffle-config.js의 <code>networks 부분</code>을 아래와 같이 수정합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">networks: &#123;</span><br><span class="line">  //... 생략</span><br><span class="line">  development: &#123;</span><br><span class="line">   host: "127.0.0.1",     // Localhost (default: none)</span><br><span class="line">   port: 8545,            // Standard Ethereum port (default: none)</span><br><span class="line">   network_id: "*",       // Any network (default: none)</span><br><span class="line">  &#125;,</span><br><span class="line">  test: "127.0.0.1",</span><br><span class="line">  port: 8545,</span><br><span class="line">  network_id: "*"</span><br><span class="line">  //... 생략</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="geth"><a href="#geth" class="headerlink" title="geth"></a>geth</h1><p>아래의 명령어를 실행하여 geth를 구동합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth --datadir ~/private-net --networkid 15 --nodiscover --maxpeers 0 --mine --miner.threads 1 --http --http.addr <span class="string">"0.0.0.0"</span> --http.corsdomain <span class="string">"*"</span> --http.vhosts <span class="string">"*"</span> --http.api <span class="string">"eth,web3,persional,net,miner"</span> --ipcpath ~/private-net/geth.ipc --ws --ws.addr <span class="string">"0.0.0.0"</span> --ws.api <span class="string">"eth,web3,persional,net,miner"</span> --ws.origins <span class="string">"*"</span> --allow-insecure-unlock --password ~/private-net/password</span></span><br></pre></td></tr></table></figure><h2 id="새-터미널을-열고-geth-접속"><a href="#새-터미널을-열고-geth-접속" class="headerlink" title="새 터미널을 열고 geth 접속"></a>새 터미널을 열고 geth 접속</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth attach http://localhost:8545</span></span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/v1.10.26-stable/darwin-arm64/go1.19.3</span><br><span class="line">coinbase: 0x945cd603a6754cb13c3d61d8fe240990f86f9f8a</span><br><span class="line">at block: 1533 (Wed Dec 14 2022 17:41:40 GMT+0900 (KST))</span><br><span class="line"> modules: eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">To exit, press ctrl-d or type exit</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="첫번째-계정-잠금-해제"><a href="#첫번째-계정-잠금-해제" class="headerlink" title="첫번째 계정 잠금 해제"></a>첫번째 계정 잠금 해제</h2><p>password 파일의 첫번째 행이 첫번째 계정의 비밀번호입니다.</p><p>저는 blah로 정했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.personal.unlockAccount(eth.accounts[0])</span></span><br><span class="line">Unlock account 0x945cd603a6754cb13c3d61d8fe240990f86f9f8a</span><br><span class="line">Passphrase: </span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="나머지-4개의-계정-잠금-해제"><a href="#나머지-4개의-계정-잠금-해제" class="headerlink" title="나머지 4개의 계정 잠금 해제"></a>나머지 4개의 계정 잠금 해제</h2><p>위의 eth.accounts[0]부터 eth.accounts[4]까지 반복하여 5번째 계정까지 모두 해제합니다.</p><h1 id="프라이빗-네트워크에-계약-배포"><a href="#프라이빗-네트워크에-계약-배포" class="headerlink" title="프라이빗 네트워크에 계약 배포"></a>프라이빗 네트워크에 계약 배포</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle migrate --network development</span></span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/ConvertLib.sol-bin. Attempt <span class="comment">#1</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiling ./contracts/MetaCoin.sol</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Artifacts written to /Users/devsawd/private-net/truffle-metacoin/build/contracts</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Compiled successfully using:</span></span><br><span class="line">   - solc: 0.8.13+commit.abaa5c0e.Emscripten.clang</span><br><span class="line">⠸ Fetching solc version list from solc-bin. Attempt #1</span><br><span class="line">✓ Downloading compiler. Attempt #1.</span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network name:    <span class="string">'development'</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Network id:      15</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Block gas <span class="built_in">limit</span>: 15265600 (0xe8ef40)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying 'ConvertLib'</span><br><span class="line">   ----------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x2c4b0d752d2ad6fe16fdbbc904ddcc4bdb0292cff854ede6a59a662d99c152beg compiler. Attempt <span class="comment">#1.</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 1            Seconds: 4lc-bin. Attempt <span class="comment">#1</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0xc786144E0BEb71b86B71eF4b93e0c05F39904E75</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1621nds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1671007549</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x945Cd603A6754cB13C3D61d8fe240990f86f9f8A</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             500003242</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            180656 (0x2c1b0)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           1 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.000180656 ETH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Linking</span><br><span class="line">   -------</span><br><span class="line">   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib (at address: 0xc786144E0BEb71b86B71eF4b93e0c05F39904E75)</span><br><span class="line"></span><br><span class="line">   Deploying 'MetaCoin'</span><br><span class="line">   --------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> transaction <span class="built_in">hash</span>:    0x0c5a64372ed0ed72455c908216aa58817062a13a9ccc3b3db71310ae31b7d737</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Blocks: 0            Seconds: 0lc-bin. Attempt <span class="comment">#1</span></span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> contract address:    0x2785BA9c8c1d765E85f6F46DF3E6fF22B6EdcaeA</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block number:        1623nds: 0</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> block timestamp:     1671007555</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> account:             0x945Cd603A6754cB13C3D61d8fe240990f86f9f8A</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> balance:             500003246</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas used:            496498 (0x79372)</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> gas price:           1 gwei</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> value sent:          0 ETH</span></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> total cost:          0.000496498 ETH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Saving artifacts</span></span><br><span class="line">   -------------------------------------</span><br><span class="line"><span class="meta">   &gt;</span><span class="bash"> Total cost:         0.000677154 ETH</span></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Total deployments:   2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Final cost:          0.000677154 ETH</span></span><br></pre></td></tr></table></figure><h1 id="트러플"><a href="#트러플" class="headerlink" title="트러플"></a>트러플</h1><p>트러플을 이용하여 잔액 확인 및 트랜잭션을 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> truffle console --network development</span></span><br><span class="line"><span class="meta">truffle(development)&gt;</span></span><br></pre></td></tr></table></figure><h2 id="메타코인-계약-정보와-계정-정보를-상수에-저장"><a href="#메타코인-계약-정보와-계정-정보를-상수에-저장" class="headerlink" title="메타코인 계약 정보와 계정 정보를 상수에 저장"></a>메타코인 계약 정보와 계정 정보를 상수에 저장</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let instance = await MetaCoin.deployed()</span><br><span class="line">undefined</span><br><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> <span class="built_in">let</span> accounts = await web3.eth.getAccounts()</span></span><br><span class="line">undefined</span><br><span class="line"><span class="meta">truffle(development)&gt;</span></span><br></pre></td></tr></table></figure><a href="https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">web3.eth — web3.js 1.0.0 documentation</div></div></div></a><blockquote><p><code>web-eth 패키지</code>를 이용해 이더리움 블록체인 및 이더리움 스마트 컨트랙트와 상호 작용할 수 있습니다.</p></blockquote><h2 id="첫-번째와-두-번째-계정의-잔액-확인"><a href="#첫-번째와-두-번째-계정의-잔액-확인" class="headerlink" title="첫 번째와 두 번째 계정의 잔액 확인"></a>첫 번째와 두 번째 계정의 잔액 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> instance.getBalance(accounts[0])</span></span><br><span class="line">BN &#123;</span><br><span class="line">  negative: 0,</span><br><span class="line">  words: [ 10000, &lt;1 empty item&gt; ],</span><br><span class="line">  length: 1,</span><br><span class="line">  red: null</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> instance.getBalance(accounts[1])</span></span><br><span class="line">BN &#123; negative: 0, words: [ 0, &lt;1 empty item&gt; ], length: 1, red: null &#125;</span><br><span class="line"><span class="meta">truffle(development)&gt;</span></span><br></pre></td></tr></table></figure><a href="https://github.com/truffle-box/metacoin-box/blob/master/contracts/MetaCoin.sol" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/f70f53aa8a19441a5effa44d34c231d7b2201bf04d7071243bb8cb03f17c29c0/truffle-box/metacoin-box"></img></div><div class="descriptions"><div class="og-title">metacoin-box/MetaCoin.sol at master · truffle-box/metacoin-box</div><div class="og-description">MetaCoin smart contracts example box. Contribute to truffle-box/metacoin-box development by creating an account on GitHub.</div></div></div></a><blockquote><p><code>MetaCoin.sol</code> 소스코드를 보면 다른 함수 목록과 코드를 볼 수 있습니다.</p></blockquote><h2 id="트랜잭션-실행"><a href="#트랜잭션-실행" class="headerlink" title="트랜잭션 실행"></a>트랜잭션 실행</h2><p>첫 번째 계정에서 10 메타코인을 두 번째 계정으로 보내는 트랜잭션을 실행해봅니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> instance.sendCoin(accounts[1], 10, &#123;from: accounts[0]&#125;)</span></span><br><span class="line">&#123;</span><br><span class="line">  tx: '0x1671f227950efd2e8fe6c35397670af8e614bc2dbb42274a279af7e3d855b59b',</span><br><span class="line">  receipt: &#123;</span><br><span class="line">    blockHash: '0x3f8bdbe2f2fd7fd94bf6d2cb6c411f9c9f90dcaa651c576a1528e7255b860837',</span><br><span class="line">    blockNumber: 1745,</span><br><span class="line">    contractAddress: null,</span><br><span class="line">    cumulativeGasUsed: 51921,</span><br><span class="line">    effectiveGasPrice: 1000000000,</span><br><span class="line">    from: '0x945cd603a6754cb13c3d61d8fe240990f86f9f8a',</span><br><span class="line">    gasUsed: 51921,</span><br><span class="line">    logs: [ [Object] ],</span><br><span class="line">    logsBloom: '0xspan><br><span class="line">    status: true,</span><br><span class="line">    to: '0x2785ba9c8c1d765e85f6f46df3e6ff22b6edcaea',</span><br><span class="line">    transactionHash: '0x1671f227950efd2e8fe6c35397670af8e614bc2dbb42274a279af7e3d855b59b',</span><br><span class="line">    transactionIndex: 0,</span><br><span class="line">    type: '0x0',</span><br><span class="line">    rawLogs: [ [Object] ]</span><br><span class="line">  &#125;,</span><br><span class="line">  logs: [</span><br><span class="line">    &#123;</span><br><span class="line">      address: '0x2785BA9c8c1d765E85f6F46DF3E6fF22B6EdcaeA',</span><br><span class="line">      blockNumber: 1745,</span><br><span class="line">      transactionHash: '0x1671f227950efd2e8fe6c35397670af8e614bc2dbb42274a279af7e3d855b59b',</span><br><span class="line">      transactionIndex: 0,</span><br><span class="line">      blockHash: '0x3f8bdbe2f2fd7fd94bf6d2cb6c411f9c9f90dcaa651c576a1528e7255b860837',</span><br><span class="line">      logIndex: 0,</span><br><span class="line">      removed: false,</span><br><span class="line">      id: 'log_a1c1c0d3',</span><br><span class="line">      event: 'Transfer',</span><br><span class="line">      args: [Result]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="만약-인증이-필요하다는-오류가-발생한다면"><a href="#만약-인증이-필요하다는-오류가-발생한다면" class="headerlink" title="만약 인증이 필요하다는 오류가 발생한다면.."></a>만약 인증이 필요하다는 오류가 발생한다면..</h3><p>아래와 같이 인증 오류가 발생할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Uncaught:</span><br><span class="line">Error: Returned error: authentication needed: password or unlock -- Reason given: Custom error (could not decode).</span><br><span class="line">    at evalmachine.&lt;anonymous&gt;</span><br><span class="line">    at sigintHandlersWrap (node:vm:276:12)</span><br><span class="line">    at Script.runInContext (node:vm:139:14)</span><br><span class="line">    at runScript (/opt/homebrew/lib/node_modules/truffle/build/webpack:/packages/core/lib/console.js:454:1)</span><br><span class="line">    at Console.interpret (/opt/homebrew/lib/node_modules/truffle/build/webpack:/packages/core/lib/console.js:469:1)</span><br><span class="line">    at bound (node:domain:426:15)</span><br><span class="line">    at REPLServer.runBound [as eval] (node:domain:437:12)</span><br><span class="line">    at REPLServer.onLine (node:repl:902:10)</span><br><span class="line">    at REPLServer.emit (node:events:513:28)</span><br><span class="line">    at REPLServer.emit (node:domain:482:12)</span><br><span class="line">    at REPLServer.[_onLine] [as _onLine] (node:internal/readline/interface:425:12)</span><br><span class="line">    at REPLServer.[_line] [as _line] (node:internal/readline/interface:886:18)</span><br><span class="line">    at REPLServer.[_ttyWrite] [as _ttyWrite] (node:internal/readline/interface:1264:22)</span><br><span class="line">    at REPLServer.self._ttyWrite (node:repl:997:9)</span><br><span class="line">    at ReadStream.onkeypress (node:internal/readline/interface:273:20)</span><br><span class="line">    at ReadStream.emit (node:events:513:28)</span><br><span class="line">    at ReadStream.emit (node:domain:482:12)</span><br><span class="line">    at emitKeys (node:internal/readline/utils:357:14)</span><br><span class="line">    at emitKeys.next (&lt;anonymous&gt;)</span><br><span class="line">    at ReadStream.onData (node:internal/readline/emitKeypressEvents:64:36) &#123;</span><br><span class="line">  data: null,</span><br><span class="line">  reason: 'Custom error (could not decode)',</span><br><span class="line">  hijackedStack: 'Error: Returned error: authentication needed: password or unlock -- Reason given: Custom error (could not decode).\n' +</span><br><span class="line">    '    at Object.ErrorResponse (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/web3-core-helpers/lib/errors.js:28:1)\n' +</span><br><span class="line">    '    at /opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/web3-core-requestmanager/lib/index.js:300:1\n' +</span><br><span class="line">    '    at /opt/homebrew/lib/node_modules/truffle/build/webpack:/packages/provider/wrapper.js:123:1\n' +</span><br><span class="line">    '    at XMLHttpRequest.request.onreadystatechange (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/web3-providers-http/lib/index.js:98:1)\n' +</span><br><span class="line">    '    at XMLHttpRequestEventTarget.dispatchEvent (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:1)\n' +</span><br><span class="line">    '    at XMLHttpRequest.exports.modules.996763.XMLHttpRequest._setReadyState (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:208:1)\n' +</span><br><span class="line">    '    at XMLHttpRequest.exports.modules.996763.XMLHttpRequest._onHttpResponseEnd (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:318:1)\n' +</span><br><span class="line">    '    at IncomingMessage.&lt;anonymous&gt; (/opt/homebrew/lib/node_modules/truffle/build/webpack:/node_modules/xhr2-cookies/dist/xml-http-request.js:289:48)\n' +</span><br><span class="line">    '    at IncomingMessage.emit (node:events:525:35)\n' +</span><br><span class="line">    '    at IncomingMessage.emit (node:domain:545:15)\n' +</span><br><span class="line">    '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +</span><br><span class="line">    '    at processTicksAndRejections (node:internal/process/task_queues:82:21)'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앞서 계정의 비밀번호를 입력하는 과정을 한번 더 거친후 트랜잭션을 실행합니다.</p><p>일정 시간이 지나면 계정이 잠기니 실습이 오래걸리면 발생할 수 있습니다.</p><h2 id="트랜잭션-확인"><a href="#트랜잭션-확인" class="headerlink" title="트랜잭션 확인"></a>트랜잭션 확인</h2><p>계정 잔고를 확인해 트랜잭션이 실행되었는지 확인합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> instance.getBalance(accounts[0])</span></span><br><span class="line">BN &#123;</span><br><span class="line">  negative: 0,</span><br><span class="line">  words: [ 9990, &lt;1 empty item&gt; ],</span><br><span class="line">  length: 1,</span><br><span class="line">  red: null</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">truffle(development)&gt;</span><span class="bash"> instance.getBalance(accounts[1])</span></span><br><span class="line">BN &#123; negative: 0, words: [ 10, &lt;1 empty item&gt; ], length: 1, red: null &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/15/Ethereum-deploy-contract/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;메타코인 예제 프로젝트를 이용해 프라이빗 네트워크에 컨트랙트를 배포하고 테스트해보겠습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
      <category term="Truffle" scheme="https://dev-sawd.github.io/tags/Truffle/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] keccak256</title>
    <link href="https://dev-sawd.github.io/2022/12/14/Ethereum-keccak256/"/>
    <id>https://dev-sawd.github.io/2022/12/14/Ethereum-keccak256/</id>
    <published>2022-12-13T19:31:33.000Z</published>
    <updated>2022-12-13T19:33:38.574Z</updated>
    
    <content type="html"><![CDATA[<p>Keccak 알고리즘군 중 하나의 알고리즘</p><p>SHA1, SHA2(미국 NIST가 승인하여 사용중인 해시함수들)의 취약점을 개선하고자 개발된 암호화 해시 알고리즘</p><p>Keccak 알고리즘은 2007년 11월부터 경진대회에 참가하여 2012년 12월에 우승 알고리즘이 되었음</p><p>2015년 8월에 미국국립표준기술연구소에서 SHA3 적용 표준으로 선정</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Keccak 알고리즘군 중 하나의 알고리즘&lt;/p&gt;
&lt;p&gt;SHA1, SHA2(미국 NIST가 승인하여 사용중인 해시함수들)의 취약점을 개선하고자 개발된 암호화 해시 알고리즘&lt;/p&gt;
&lt;p&gt;Keccak 알고리즘은 2007년 11월부터 경진대회에 참가하
      
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] local private network</title>
    <link href="https://dev-sawd.github.io/2022/12/11/Ethereum-local-private-network/"/>
    <id>https://dev-sawd.github.io/2022/12/11/Ethereum-local-private-network/</id>
    <published>2022-12-10T19:52:42.000Z</published>
    <updated>2022-12-22T16:58:45.620Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/11/Ethereum-local-private-network/thumbnail.png" class=""><p>go-ethereum(이하 geth)을 이용해 로컬 프라이빗 네트워크를 구성합니다.</p><p><code>/Users/{USER_NAME}</code>에 <code>private-net</code> 폴더를 생성하고 아래의 절차대로 실습을 진행했습니다.</p><a id="more"></a><h1 id="Genesis-json-생성"><a href="#Genesis-json-생성" class="headerlink" title="Genesis.json 생성"></a>Genesis.json 생성</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"chainId"</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip150Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip158Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"byzantiumBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"constantinopleBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"petersburgBlock"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"coinbase"</span>   : <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"difficulty"</span> : <span class="string">"0x1"</span>,</span><br><span class="line">  <span class="attr">"extraData"</span>  : <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"gasLimit"</span>   : <span class="string">"0x2fefd8"</span>,</span><br><span class="line">  <span class="attr">"nonce"</span>      : <span class="string">"0x0000000000000042"</span>,</span><br><span class="line">  <span class="attr">"mixhash"</span>    : <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"parentHash"</span> : <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>  : <span class="string">"0x00"</span>,</span><br><span class="line">  <span class="attr">"alloc"</span>: &#123;</span><br><span class="line">    <span class="attr">"945cd603a6754cb13c3d61d8fe240990f86f9f8a"</span>: &#123; <span class="attr">"balance"</span>: <span class="string">"500000000000000000000000000"</span> &#125;,</span><br><span class="line">    <span class="attr">"66b4e7be902300f9a15d900822bbd8803be87391"</span>: &#123; <span class="attr">"balance"</span>: <span class="string">"500000000000000000000000000"</span> &#125;,</span><br><span class="line">    <span class="attr">"104f0d848da3f760dddadc56fc4ab78305110dba"</span>: &#123; <span class="attr">"balance"</span>: <span class="string">"500000000000000000000000000"</span> &#125;,</span><br><span class="line">    <span class="attr">"addfaa808c59581f04cdadfc0be28ebfb520e839"</span>: &#123; <span class="attr">"balance"</span>: <span class="string">"500000000000000000000000000"</span> &#125;,</span><br><span class="line">    <span class="attr">"450a8a99bf5ad49db301f6068c619de2400de6f7"</span>: &#123; <span class="attr">"balance"</span>: <span class="string">"500000000000000000000000000"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>chaindId<br>체인 식별값</p></li><li><p>difficulty<br>nonce값을 발견하는 난이도 설정으로 높을수록 블록 생성 속도가 느려짐</p></li><li><p>gasLimit<br>블록당 가스 지출의 제한량</p></li><li><p>alloc<br>Genesis 블록 생성 시 해당 지갑에 값만큼 이더 배분</p></li></ul><h1 id="password-파일-작성"><a href="#password-파일-작성" class="headerlink" title="password 파일 작성"></a>password 파일 작성</h1><p>현재는 실습으로 임의의 내용으로 작성하였습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blah</span><br><span class="line">blah</span><br><span class="line">blah</span><br><span class="line">blah</span><br><span class="line">blah</span><br></pre></td></tr></table></figure><h1 id="geth-초기화"><a href="#geth-초기화" class="headerlink" title="geth 초기화"></a>geth 초기화</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth --datadir ~/private-net --nodiscover --maxpeers 0 init ~/private-net/genesis.json</span></span><br><span class="line">INFO [12-09|16:44:01.339] Maximum peer count                       ETH=0 LES=0 total=0</span><br><span class="line">INFO [12-09|16:44:01.345] Set global gas cap                       cap=50,000,000</span><br><span class="line">INFO [12-09|16:44:01.346] Allocated cache and file handles         database=/Users/devsawd/private-net/geth/chaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [12-09|16:44:01.413] Opened ancient database                  database=/Users/devsawd/private-net/geth/chaindata/ancient/chain readonly=false</span><br><span class="line">INFO [12-09|16:44:01.413] Writing custom genesis block </span><br><span class="line">INFO [12-09|16:44:01.416] Persisted trie from memory database      nodes=7 size=1.02KiB time="114.125µs" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [12-09|16:44:01.416] Successfully wrote genesis state         database=chaindata hash=0e1989..f9d68e</span><br><span class="line">INFO [12-09|16:44:01.416] Allocated cache and file handles         database=/Users/devsawd/private-net/geth/lightchaindata cache=16.00MiB handles=16</span><br><span class="line">INFO [12-09|16:44:01.470] Opened ancient database                  database=/Users/devsawd/private-net/geth/lightchaindata/ancient/chain readonly=false</span><br><span class="line">INFO [12-09|16:44:01.470] Writing custom genesis block </span><br><span class="line">INFO [12-09|16:44:01.470] Persisted trie from memory database      nodes=7 size=1.02KiB time="104.166µs" gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line">INFO [12-09|16:44:01.471] Successfully wrote genesis state         database=lightchaindata hash=0e1989..f9d68e</span><br></pre></td></tr></table></figure><p>초기화에 성공하면 private-net 디렉터리 아래 geth 디렉터리가 생성됩니다.</p><blockquote><p>번거롭게 긴 명령어를 치지 말고 셸 스크립트 파일로 만들어 실행하는 것이 편합니다.</p></blockquote><h1 id="geth에서-프라이빗-네트워크-실행"><a href="#geth에서-프라이빗-네트워크-실행" class="headerlink" title="geth에서 프라이빗 네트워크 실행"></a>geth에서 프라이빗 네트워크 실행</h1><p>예전에 실습했던 명령어로 실행해보니 되지 않았습니다.</p><p>시간이 지나면서 버전이 바뀌고 Command-Line Options가 많이 변경된것을 확인했습니다.</p><ul><li>ex) rpc가 http로 변경</li><li><a href="https://stackoverflow.com/a/69643321" target="_blank" rel="noopener">https://stackoverflow.com/a/69643321</a></li><li><a href="https://geth.ethereum.org/docs/interface/command-line-options" target="_blank" rel="noopener">https://geth.ethereum.org/docs/interface/command-line-options</a></li></ul><p>위의 사이트를 참고해서 지금 기준에 맞게 수정하였습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth --datadir ~/private-net --networkid 15 --nodiscover --maxpeers 0 --mine --miner.threads 1 --http --http.addr <span class="string">"0.0.0.0"</span> --http.corsdomain <span class="string">"*"</span> --http.vhosts <span class="string">"*"</span> --http.api <span class="string">"eth,web3,personal,net,miner"</span> --ipcpath ~/private-net/geth.ipc --ws --ws.addr <span class="string">"0.0.0.0"</span> --ws.api <span class="string">"eth,web3,personal,net,miner"</span> --ws.origins <span class="string">"*"</span> --allow-insecure-unlock --password ~/private-net/password</span></span><br></pre></td></tr></table></figure><h1 id="geth-콘솔-접속"><a href="#geth-콘솔-접속" class="headerlink" title="geth 콘솔 접속"></a>geth 콘솔 접속</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> geth attach http://localhost:8545</span></span><br><span class="line">Welcome to the Geth JavaScript console!</span><br><span class="line"></span><br><span class="line">instance: Geth/v1.10.26-stable/darwin-arm64/go1.19.3</span><br><span class="line">coinbase: 0x945cd603a6754cb13c3d61d8fe240990f86f9f8a</span><br><span class="line">at block: 99 (Fri Dec 09 2022 17:06:12 GMT+0900 (KST))</span><br><span class="line"> modules: eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 web3:1.0</span><br><span class="line"></span><br><span class="line">To exit, press ctrl-d or type exit</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> %</span></span><br></pre></td></tr></table></figure><h2 id="블록-높이-확인"><a href="#블록-높이-확인" class="headerlink" title="블록 높이 확인"></a>블록 높이 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.blockNumber</span></span><br><span class="line">108</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.blockNumber</span></span><br><span class="line">109</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.blockNumber</span></span><br><span class="line">110</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.blockNumber</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/11/Ethereum-local-private-network/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;go-ethereum(이하 geth)을 이용해 로컬 프라이빗 네트워크를 구성합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/Users/{USER_NAME}&lt;/code&gt;에 &lt;code&gt;private-net&lt;/code&gt; 폴더를 생성하고 아래의 절차대로 실습을 진행했습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
      <category term="Geth" scheme="https://dev-sawd.github.io/tags/Geth/"/>
    
  </entry>
  
  <entry>
    <title>[Ethereum] 스마트컨트랙트 개발툴(macOS)</title>
    <link href="https://dev-sawd.github.io/2022/12/09/Ethereum-development-for-macOS/"/>
    <id>https://dev-sawd.github.io/2022/12/09/Ethereum-development-for-macOS/</id>
    <published>2022-12-09T08:57:04.000Z</published>
    <updated>2022-12-10T20:24:47.884Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/12/09/Ethereum-development-for-macOS/thumbnail.png" class=""><p>이전에 공부할때 가볍게 실습하고 넘어갔던 부분을 정리해서 적어두려 합니다.</p><p>아마.. 2년전 쯤에 실습한 것이라 버전이 올라가면서 바뀐부분이 좀 있네요.</p><a id="more"></a><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><a href="https://brew.sh/index_ko" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://brew.sh/assets/img/homebrew-social-card.png"></img></div><div class="descriptions"><div class="og-title">Homebrew</div><div class="og-description">The Missing Package Manager for macOS (or Linux).</div></div></div></a><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> /bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew -v </span></span><br><span class="line">Homebrew 3.5.5 </span><br><span class="line">Homebrew/homebrew-core (git revision 25e0a25aceb; last commit 2022-07-19)</span><br></pre></td></tr></table></figure><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><a href="https://www.docker.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://www.docker.com/wp-content/uploads/2022/12/Docker-Temporary-Image-Social-Thumbnail-1200x630-1.png"></img></div><div class="descriptions"><div class="og-title">Docker: Accelerated, Containerized Application Development</div><div class="og-description">Docker is a platform designed to help developers build, share, and run modern applications. We handle the tedious setup, so you can focus on…</div></div></div></a><h2 id="버전-확인"><a href="#버전-확인" class="headerlink" title="버전 확인"></a>버전 확인</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker version</span></span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">Client:</span><br><span class="line"> Cloud integration: v1.0.22</span><br><span class="line"> Version:           20.10.13</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.15</span><br><span class="line"> Git commit:        a224086</span><br><span class="line"> Built:             Thu Mar 10 14:08:43 2022</span><br><span class="line"> OS/Arch:           darwin/arm64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br></pre></td></tr></table></figure><h1 id="Geth"><a href="#Geth" class="headerlink" title="Geth"></a>Geth</h1><p>이더리움 노드 전체를 실행하거나 다룰때 사용합니다.</p><p>Go 프로그래밍 언어로 구현되어있습니다.</p><p>메인넷과 테스트넷에 배포하기 전에 로컬에서 테스트할때 유용하게 사용할수 있습니다.</p><img src="/2022/12/09/Ethereum-development-for-macOS/2.webp" class=""><a href="https://geth.ethereum.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Go Ethereum</div></div></div></a><h2 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew tap ethereum/ethereum </span></span><br><span class="line"><span class="meta">%</span><span class="bash"> brew install ethereum</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> geth version       </span></span><br><span class="line">Geth</span><br><span class="line">Version: 1.10.26-stable</span><br><span class="line">Architecture: arm64</span><br><span class="line">Go Version: go1.19.3</span><br><span class="line">Operating System: darwin</span><br><span class="line">GOPATH=</span><br><span class="line">GOROOT=</span><br></pre></td></tr></table></figure><h1 id="Ganache"><a href="#Ganache" class="headerlink" title="Ganache"></a>Ganache</h1><p>개발용 이더리움 블록체인 에뮬레이터입니다.</p><p>블록이나 트랜잭션을 테스트하는데 사용됩니다.</p><p>그래픽 인터페이스 기반으로 스마트 컨트랙트를 로컬 환경에서 테스트할 수 있습니다.</p><img src="/2022/12/09/Ethereum-development-for-macOS/3.png" class=""><a href="https://trufflesuite.com/ganache/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Ganache - Truffle Suite</div><div class="og-description">Quickly fire up a personal Ethereum blockchain which you can use to run tests, execute commands, and inspect state while controlling how the…</div></div></div></a><h1 id="Node-js-npm"><a href="#Node-js-npm" class="headerlink" title="Node.js / npm"></a>Node.js / npm</h1><h2 id="설치-2"><a href="#설치-2" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install node</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> node -v</span></span><br><span class="line">v18.6.0</span><br><span class="line"><span class="meta">%</span><span class="bash"> npm -v</span></span><br><span class="line">8.13.2</span><br></pre></td></tr></table></figure><h1 id="Truffle"><a href="#Truffle" class="headerlink" title="Truffle"></a>Truffle</h1><p>개발 속도를 향상시킬 수 있는 솔리디티 기반 프레임워크입니다.</p><p>스마트 컨트랙트의 컴파일, 테스트, 배포를 지원합니다.</p><img src="/2022/12/09/Ethereum-development-for-macOS/4.png" class=""><a href="https://trufflesuite.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Home - Truffle Suite</div><div class="og-description">The Truffle Suite gets developers from idea to dapp as comfortably as possible.</div></div></div></a><h2 id="설치-3"><a href="#설치-3" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> npm install -g truffle</span></span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> truffle version</span></span><br><span class="line">Truffle v5.6.9 (core: 5.6.9)</span><br><span class="line">Ganache v7.5.0</span><br><span class="line">Solidity v0.5.16 (solc-js)</span><br><span class="line">Node v18.6.0</span><br><span class="line">Web3.js v1.7.4</span><br></pre></td></tr></table></figure><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><img src="/2022/12/09/Ethereum-development-for-macOS/5.png" class=""><h2 id="설치-4"><a href="#설치-4" class="headerlink" title="설치"></a>설치</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> brew install git</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> git --version</span></span><br><span class="line">git version 2.37.1 (Apple Git-137.1)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2022/12/09/Ethereum-development-for-macOS/thumbnail.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;이전에 공부할때 가볍게 실습하고 넘어갔던 부분을 정리해서 적어두려 합니다.&lt;/p&gt;
&lt;p&gt;아마.. 2년전 쯤에 실습한 것이라 버전이 올라가면서 바뀐부분이 좀 있네요.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/categories/Ethereum/"/>
    
    
      <category term="Ethereum" scheme="https://dev-sawd.github.io/tags/Ethereum/"/>
    
      <category term="Tool" scheme="https://dev-sawd.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>[ETC] 구글 크롬 번역 팝업 끄기</title>
    <link href="https://dev-sawd.github.io/2022/12/09/ETC-disable-google-translate/"/>
    <id>https://dev-sawd.github.io/2022/12/09/ETC-disable-google-translate/</id>
    <published>2022-12-08T19:44:52.000Z</published>
    <updated>2022-12-08T19:50:41.329Z</updated>
    
    <content type="html"><![CDATA[<p>현재 블로그를 사용하는데 있어 영어가 많은 페이지의 경우 크롬의 우측 상단에 번역 팝업이 자꾸 뜨는것을 볼 수 있었습니다.</p><p>이전에 1차적으로 html 태그에 번역 기능을 끄는 정보를 넣었습니다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">translate</span>=<span class="string">"no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하지만 일부 페이지는 정상 동작하지만 일부 페이지에서는 계속해서 번역 팝업이 떴습니다.</p><a id="more"></a><p>처음에는 페이지가 배포되고 아직 새로고침이 되지 않아서 발생했다고 생각했지만 시간이 꽤 흘렀는데도 아직까지 팝업이 뜨는군요..</p><p>검색해서 헤더에 메타를 넣어 해결했습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"notranslate"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;현재 블로그를 사용하는데 있어 영어가 많은 페이지의 경우 크롬의 우측 상단에 번역 팝업이 자꾸 뜨는것을 볼 수 있었습니다.&lt;/p&gt;
&lt;p&gt;이전에 1차적으로 html 태그에 번역 기능을 끄는 정보를 넣었습니다. &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;translate&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;하지만 일부 페이지는 정상 동작하지만 일부 페이지에서는 계속해서 번역 팝업이 떴습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/tags/ETC/"/>
    
  </entry>
  
  <entry>
    <title>[ETC] 운영중인 http 사이트를 https로...</title>
    <link href="https://dev-sawd.github.io/2022/12/07/ETC-http-to-https/"/>
    <id>https://dev-sawd.github.io/2022/12/07/ETC-http-to-https/</id>
    <published>2022-12-07T08:38:14.000Z</published>
    <updated>2022-12-10T20:24:47.944Z</updated>
    
    <content type="html"><![CDATA[<p>기존에 공부하면서 만든 사이트는 http로 운영되고 있었습니다.</p><p>그런데 사용자가 조금씩 늘고 https도 공부해서 바꿔야 겠다는 생각이 문득 들더군요..</p><p>그래서 시도해봤습니다.</p><a id="more"></a><p>가장 좋은 방법은 개발 단계에서 https로 개발해서 오픈했으면 좋았겠지만 실력이나 시간적으로 여유가 없었습니다.</p><p>https로 바꾸면서 http의 서비스를 갑자기 막을수는 없고 https로의 유도가 필요했습니다.</p><p>처음에는 <code>http 페이지에 xx월 xx일에 http가 만료되니 https로 접속해주세요!</code> 라고 안내할까 했습니다.</p><p>하지만 제가 사용자라면 저 문구를 발견하고 https로 다시 접속해야하는 불편함이 분명하게 있을거라 판단했습니다.</p><p>고민 끝에 <code>https를 완전히 막지 않고 http로 접근한 사용자에게 https로 강제 이동시키는 방향</code>으로 개발했습니다.</p><h1 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h1><p>AWS에서 Express로 구성했고 pm2로 관리하고있었습니다.</p><h2 id="HTTPS-443-포트-열기"><a href="#HTTPS-443-포트-열기" class="headerlink" title="HTTPS(443) 포트 열기"></a>HTTPS(443) 포트 열기</h2><img src="/2022/12/07/ETC-http-to-https/1.png" class=""><p>좌측 메뉴에서 인스턴스를 선택 하고 현재 사용중인 인스턴스의 보안 그룹 이름을 확인합니다.</p><img src="/2022/12/07/ETC-http-to-https/2.png" class=""><p>확인한 보안 그룹 아이템을 선택하여 하단의 인바운드 규칙 탭에서 인바운드 규칙 편집을 선택합니다.</p><img src="/2022/12/07/ETC-http-to-https/3.png" class=""><p>좌측 하단의 규칙 추가를 선택하여 HTTPS를 선택하여 443포트를 열어줍니다.</p><h2 id="HTTPS-443-포트를-8080으로-포트포워딩"><a href="#HTTPS-443-포트를-8080으로-포트포워딩" class="headerlink" title="HTTPS(443) 포트를 8080으로 포트포워딩"></a>HTTPS(443) 포트를 8080으로 포트포워딩</h2><p>저는 기존에도 HTTP(80) 포트를 8000으로 포트포워딩해서 쓰고있었습니다.</p><p>이번에는 HTTPS(443) 포트를 8080으로 포트포워딩 설정을 해서 구성할겁니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8080</span><br></pre></td></tr></table></figure><p>잘 설정되었는지 확인합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -L -t nat </span><br><span class="line">Chain PREROUTING (policy ACCEPT) </span><br><span class="line">target     prot opt source               destination </span><br><span class="line">REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:https redir ports 8080 </span><br><span class="line">REDIRECT   tcp  --  anywhere             anywhere             tcp dpt:http redir ports 8000</span><br></pre></td></tr></table></figure><h2 id="기존-http-서버-코드를-https로-변경"><a href="#기존-http-서버-코드를-https로-변경" class="headerlink" title="기존 http 서버 코드를 https로 변경"></a>기존 http 서버 코드를 https로 변경</h2><p>SSL 인증서 사이트로 부터 받은 파일들을 이용해 createServer의 옵션을 아래와 같이 설정해줍니다.</p><figure class="highlight javascript"><figcaption><span>https_server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require 생략</span></span><br><span class="line"><span class="keyword">const</span> HTTPS_PORT = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(KEY_PEM_PATH), </span><br><span class="line">  cert: fs.readFileSync(CRT_PEM_PATH),</span><br><span class="line">  ca : fs.readFileSync(CA_PEM_PATH)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https.createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`SSL Server is running at port <span class="subst">$&#123;HTTPS_PORT&#125;</span>`</span>);</span><br><span class="line">&#125;).listen(HTTPS_PORT);</span><br></pre></td></tr></table></figure><h2 id="기존-http-서버를-대체할-코드"><a href="#기존-http-서버를-대체할-코드" class="headerlink" title="기존 http 서버를 대체할 코드"></a>기존 http 서버를 대체할 코드</h2><p>기존의 8000포트 서버를 8080 https용으로 변경했으니 8000포트의 새 서버를 만들어줬습니다.</p><figure class="highlight javascript"><figcaption><span>http_server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>); </span><br><span class="line"><span class="keyword">const</span> app = express(); </span><br><span class="line"><span class="keyword">const</span> HTTP_PORT = <span class="number">8000</span>; </span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; </span><br><span class="line">    res.sendFile(__dirname + <span class="string">'/index.html'</span>) </span><br><span class="line">&#125;); </span><br><span class="line">app.listen(HTTP_PORT, () =&gt; &#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server is running at port <span class="subst">$&#123;HTTP_PORT&#125;</span>`</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>html의 meta 태그를 이용해 즉시 https url로 이동시켜줄겁니다.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; url=https://YOUR_HTTPS_URL"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pm2를-이용해-구동"><a href="#pm2를-이용해-구동" class="headerlink" title="pm2를 이용해 구동"></a>pm2를 이용해 구동</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start http_server.js --name http_server</span><br><span class="line">$ pm2 start https_server.js --name https_server</span><br></pre></td></tr></table></figure><p>잘 구동되는지 확인해봅시다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 list </span><br><span class="line">┌─────┬───────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐ </span><br><span class="line">│ id  │ name              │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │ </span><br><span class="line">├─────┼───────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤ </span><br><span class="line">│ 17  │ https_server      │ default     │ N&#x2F;A     │ fork    │ 495678   │ 0M     │ 0    │ online    │ 0%       │ 42.1mb   │ ubuntu   │ disabled │ </span><br><span class="line">│ 3   │ http_server       │ default     │ N&#x2F;A     │ fork    │ 147708   │ 0M     │ 0    │ online    │ 0%       │ 20.3mb   │ ubuntu   │ disabled │ </span><br><span class="line">└─────┴───────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘</span><br></pre></td></tr></table></figure><p>그리고 실제로 기존 http url로 접속하여 https로 이동시켜주는지 확인하면 작업은 끝납니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;기존에 공부하면서 만든 사이트는 http로 운영되고 있었습니다.&lt;/p&gt;
&lt;p&gt;그런데 사용자가 조금씩 늘고 https도 공부해서 바꿔야 겠다는 생각이 문득 들더군요..&lt;/p&gt;
&lt;p&gt;그래서 시도해봤습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="AWS" scheme="https://dev-sawd.github.io/tags/AWS/"/>
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>[Golang] Tesseract를 이용한 OCR</title>
    <link href="https://dev-sawd.github.io/2022/04/26/Golang-tesseract-ocr/"/>
    <id>https://dev-sawd.github.io/2022/04/26/Golang-tesseract-ocr/</id>
    <published>2022-04-26T11:41:17.000Z</published>
    <updated>2022-12-09T10:19:30.717Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트에서 OCR을 할 일이 생김</p><p>Go언어를 이용할거라 찾아봤는데 역시나 있음!</p><a href="https://github.com/otiai10/gosseract" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/5cbfe32813406dd5a28d6be30283c4a5974201b7cab4cf10eb9efa07f2c6602d/otiai10/gosseract"></img></div><div class="descriptions"><div class="og-title">GitHub - otiai10/gosseract: Go package for OCR (Optical Character Recognition), by using Tesseract C++ library</div><div class="og-description">Go package for OCR (Optical Character Recognition), by using Tesseract C++ library - GitHub - otiai10/gosseract: Go package for OCR (Optical…</div></div></div></a><a id="more"></a><p>해당 사이트에서 서버 어플리케이션으로 지원하는 gosseract OCR을 이용해 테스트 이미지를 넣어봤음</p><p>의외로 잘 인식했고 이 라이브러리를 사용하기로 결정</p><p>Install 부분을 보니 tesseract-ocr 라이브러리를 이용한 gosseract를 사용하는건데 생각보다 쉽지 않았음</p><p>토이 프로젝트의 환경이 windows 환경인데 issue에 나와 같이 진행 못하는 사람들이 몇몇 확인되었음</p><p>설치부터 난관에 부딪혔고 시간이 많지 않았기 때문에 다른 방법을 생각해야했음</p><p>그리고 tesseract-ocr을 설치하고 혹시나 해서 커맨드로 직접 명령 프롬프트에서 실행할 수 있는지 확인</p><p>설치 파일 위치는 여기 &gt; <a href="https://github.com/UB-Mannheim/tesseract/wiki" target="_blank" rel="noopener">https://github.com/UB-Mannheim/tesseract/wiki</a></p><p>다행히 실행하는데는 큰 문제가 없었고 Go언어에서 tesseract.exe와 ocr 변환을 원하는 이미지를 넣고 실행하기로 결정</p><p>명령 프롬프트에서 기본 사용법은 아래와 같음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tesseract.exe temp.png stdout</span><br></pre></td></tr></table></figure><p>이걸 Go언어에서는 <code>exec.Command</code>를 이용해 실행하면 됨</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result, err :&#x3D; exec.Command(&quot;%tesseract_path%\\tesseract.exe&quot;, &quot;temp.png&quot;, &quot;stdout&quot;, &quot;--psm&quot;, &quot;8&quot;, &quot;-c&quot;, &quot;tessedit_char_whitelist&#x3D;0123456789&quot;).Output()</span><br></pre></td></tr></table></figure><p><code>psm</code> 인자는 <code>Page segmentation modes</code>라고 하는데 인식 규칙정도라고 할 수 있음</p><p>자세한건 검색하면 나오는데 내가 테스트한 이미지들은 <code>8</code>에서 가장 인식률이 좋았음</p><p>그리고 숫자만 필터링 하기 위해 <code>-c tessedit_char_whitelist=0123456789</code> 인자를 추가했음</p><p>결과는 생각보다 쉽게 OCR을 변환한 정보를 얻을 수는 있는데 신뢰도를 올리기 위해서는 몇가지 작업이 더 필요할 것으로 보이고 테스트를 통해 따로 포스팅할 예정</p><p>ps. 그리고 저 gosseract를 이용해서 깔끔하게 처리하고싶어..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;토이 프로젝트에서 OCR을 할 일이 생김&lt;/p&gt;
&lt;p&gt;Go언어를 이용할거라 찾아봤는데 역시나 있음!&lt;/p&gt;
&lt;a href=&quot;https://github.com/otiai10/gosseract&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://opengraph.githubassets.com/5cbfe32813406dd5a28d6be30283c4a5974201b7cab4cf10eb9efa07f2c6602d/otiai10/gosseract&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;GitHub - otiai10/gosseract: Go package for OCR (Optical Character Recognition), by using Tesseract C++ library&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;Go package for OCR (Optical Character Recognition), by using Tesseract C++ library - GitHub - otiai10/gosseract: Go package for OCR (Optical…&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="OCR" scheme="https://dev-sawd.github.io/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드에서의 MVC...? (2)</title>
    <link href="https://dev-sawd.github.io/2022/04/22/Golang-mvc-pattern2/"/>
    <id>https://dev-sawd.github.io/2022/04/22/Golang-mvc-pattern2/</id>
    <published>2022-04-22T02:17:46.000Z</published>
    <updated>2022-12-10T20:24:48.013Z</updated>
    
    <content type="html"><![CDATA[<p>이전에 체인코드에서의 MVC패턴에 대해서 공부하고 앞으로의 프로젝트에서 적용하려고 정리했습니다.</p><p>그리고 실제로 프로젝트 투입 후 이렇게 저렇게 구조를 정리해본 결과를 한번 더 정리하려 합니다.</p><p>완성도는 올라간것 같지만 아직 손봐야될 부분이 생길수도 있다고 생각합니다.</p><hr><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><h2 id="기존-프로젝트-구조"><a href="#기존-프로젝트-구조" class="headerlink" title="기존 프로젝트 구조"></a>기존 프로젝트 구조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">├─controller</span><br><span class="line">├─dao</span><br><span class="line">├─dto</span><br><span class="line">└─service</span><br></pre></td></tr></table></figure><a id="more"></a><p>이 구조의 문제는 큰 기능별로 패키지를 묶었는데 Golang의 패키지 사상과 맞지 않았음</p><p>프로젝트의 덩치가 커지면 여기 저기 파일을 생성해 개발하고 또 수정되면 각 폴더를 찾아가며 관련 부분을 수정해야하는 불편함이 발생</p><h2 id="수정된-프로젝트-구조"><a href="#수정된-프로젝트-구조" class="headerlink" title="수정된 프로젝트 구조"></a>수정된 프로젝트 구조</h2><p>feature 별로 패키지를 묶고 개발 및 수정시 여기저기 폴더를 이동하며 수정하는 불편함을 최소화</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">|   main.go</span><br><span class="line">|   personController.go</span><br><span class="line">|</span><br><span class="line">+---DB</span><br><span class="line">|       DBManager.go</span><br><span class="line">|</span><br><span class="line">\---person</span><br><span class="line">        person.go</span><br><span class="line">        service.go</span><br></pre></td></tr></table></figure><h1 id="person에서-다른-서비스를-호출해야-할때"><a href="#person에서-다른-서비스를-호출해야-할때" class="headerlink" title="person에서 다른 서비스를 호출해야 할때"></a>person에서 다른 서비스를 호출해야 할때</h1><p>고민을 많이 했던 부분인데 결과적으로는 person controller에서 다른 feature의 service를 호출하는것으로 생각</p><p>person의 service에서 다른 feature의 service를 호출하지 않은 이유는 service는 해당 feature의 기능만 담당해 feature간 의존성을 줄이기 위해서 service를 호출하는것은 controller</p><p>그리고 호출 순서도 controller에서 관리</p><script src="//gist.github.com/033504fe87a1ce67c602773803bd6061.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이전에 체인코드에서의 MVC패턴에 대해서 공부하고 앞으로의 프로젝트에서 적용하려고 정리했습니다.&lt;/p&gt;
&lt;p&gt;그리고 실제로 프로젝트 투입 후 이렇게 저렇게 구조를 정리해본 결과를 한번 더 정리하려 합니다.&lt;/p&gt;
&lt;p&gt;완성도는 올라간것 같지만 아직 손봐야될 부분이 생길수도 있다고 생각합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;폴더-구조&quot;&gt;&lt;a href=&quot;#폴더-구조&quot; class=&quot;headerlink&quot; title=&quot;폴더 구조&quot;&gt;&lt;/a&gt;폴더 구조&lt;/h1&gt;&lt;h2 id=&quot;기존-프로젝트-구조&quot;&gt;&lt;a href=&quot;#기존-프로젝트-구조&quot; class=&quot;headerlink&quot; title=&quot;기존 프로젝트 구조&quot;&gt;&lt;/a&gt;기존 프로젝트 구조&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\GOPROJECT\SRC\MVC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─controller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─dao&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─dto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└─service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="체인코드에서의 MVC...?" scheme="https://dev-sawd.github.io/tags/%EC%B2%B4%EC%9D%B8%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-MVC/"/>
    
  </entry>
  
  <entry>
    <title>[React] 혼자 만들어본 채팅 웹 앱(클라이언트 부분)</title>
    <link href="https://dev-sawd.github.io/2022/03/14/React-chatting-socket-client/"/>
    <id>https://dev-sawd.github.io/2022/03/14/React-chatting-socket-client/</id>
    <published>2022-03-14T03:46:52.000Z</published>
    <updated>2022-12-10T20:25:03.634Z</updated>
    
    <content type="html"><![CDATA[<p>이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 클라이언트 부분 설명입니다.</p><p>관련 글을 보고싶은 분은 글 최하단의 태그 <code>Toy project</code> 링크를 눌러 확인해보세요!</p><p>설명에 앞서 프론트를 전문으로 하는 개발자가 아니기 때문에 어색한 부분이 있을 수 있습니다.</p><p>특히 디자인 부분은.. 더이상의 설명은 생략하겠습니다 ㅜㅜ</p><hr><p>서버와는 다르게 클라이언트는 코드가 긴편이다.</p><a id="more"></a><h1 id="저장소-주소"><a href="#저장소-주소" class="headerlink" title="저장소 주소"></a>저장소 주소</h1><a href="https://github.com/dev-sawd/chat-react" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/d56d93c00d882fde4c29a51e7f69bd625535b4780717dcbe8d4d9d35ad460f26/dev-sawd/chat-react"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/chat-react</div><div class="og-description">Contribute to dev-sawd/chat-react development by creating an account on GitHub.</div></div></div></a><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dev-sawd&#x2F;chat-react</span><br><span class="line">cd chat-react</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><h2 id="로그인"><a href="#로그인" class="headerlink" title="로그인"></a>로그인</h2><img src="/2022/03/14/React-chatting-socket-client/1.png" class=""><p>내가 만든 채팅 웹 앱은 첫 화면이 로그인 화면이다.</p><p>따라서 로그인 화면이 떴을때 서버와의 소켓 연결을 시도한다.</p><figure class="highlight javascript"><figcaption><span>src/login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    SocketManager.setSocket(io.connect(<span class="string">'http://localhost:4000'</span>))</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>서버에서는 <code>io.on(&#39;connection&#39;, (socket) =&gt; {...}</code> 이벤트가 호출된다.</p><figure class="highlight javascript"><figcaption><span>src/login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 로그인 버튼 onClick</span></span><br><span class="line">onClick=&#123;() =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (userName === <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  dispatch(setLoginUser(userName));</span><br><span class="line">  SocketManager.getSocket().emit(<span class="string">'login'</span>, &#123;userName&#125;);</span><br><span class="line">  SocketManager.getSocket().on(<span class="string">'returnLoginResponse'</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">result, userNameList</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">          dispatch(setUserNameList(userNameList));</span><br><span class="line">          navigate(<span class="string">'/main'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">'같은 아이디가 이미 존재합니다'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>입력한 ID가 공백이 아니라면 서버로 <code>login</code> 이벤트를 호출한다.</p><p>이후 서버로부터 <code>returnLoginResponse</code> 이벤트가 호출됐을때 채팅 메인페이지로 이동하거나 같은 아이디가 존재하는지 경고창을 보이는등의 처리를 한다.</p><blockquote><p>지금 보니 <code>returnLoginResponse</code> 이벤트는 useEffect에서 지정하면 조금 더 좋을것 같다.</p></blockquote><h2 id="채팅-메인-페이지"><a href="#채팅-메인-페이지" class="headerlink" title="채팅 메인 페이지"></a>채팅 메인 페이지</h2><img src="/2022/03/14/React-chatting-socket-client/2.png" class=""><p>스크린샷의 좌측 리스트 영역으로 로그인한 사용자 목록과 함께 가장 최근 리스트를 간략하게 보여준다.</p><p>우측은 간단한 웰컴 페이지와 함께 대화 상대를 선택하면 채팅 방으로 변경된다.</p><p>이 화면에서는 주로 state에 따라 UI를 변경하고 소켓으로부터 받은 정보를 Redux에 전달한다.</p><figure class="highlight javascript"><figcaption><span>src/chat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    socket.on(<span class="string">'message'</span>, (message) =&gt; &#123;</span><br><span class="line">        dispatch(addMessage(message))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'loginUser'</span>, (userName) =&gt; &#123;</span><br><span class="line">        dispatch(addUserName(userName))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'logoutUser'</span>, (userName) =&gt; &#123;</span><br><span class="line">        dispatch(deleteUserName(userName))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><ul><li>message<br>서버에서 <code>message</code> 이벤트를 호출해 메세지를 수신하면 Redux로 저장한다.</li></ul><ul><li>loginUser<br>서버에서 <code>loginUser</code> 이벤트를 호출해 추가로 로그인한 사용자 정보를 Redux로 저장한다. </li></ul><ul><li>logoutUser<br>서버에서 <code>logoutUser</code> 이벤트를 호출해 로그아웃한 사용자 정보를 Redux에서 삭제한다.</li></ul><p>위의 조합을 통해 채팅 목록과 유저 목록을 관리한다.</p><h2 id="로그인-유저-목록-채팅-룸"><a href="#로그인-유저-목록-채팅-룸" class="headerlink" title="로그인 유저 목록(채팅 룸)"></a>로그인 유저 목록(채팅 룸)</h2><p>좌측 로그인 유저 목록을 관리하는 컴포넌트로 Redux에 저장된 <code>usernameList</code>를 통해 해당 목록을 보여준다.</p><figure class="highlight javascript"><figcaption><span>src/components/chatRoomSide.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">userNameList.map(<span class="function">(<span class="params">userName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (userName !== loginUser) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ChatRoomBox</span> <span class="attr">key</span>=<span class="string">&#123;userName&#125;</span> <span class="attr">userName</span>=<span class="string">&#123;userName&#125;</span></span></span></span><br><span class="line"><span class="xml">                        lastMessage=&#123;messageList.filter(</span></span><br><span class="line"><span class="xml">                            message =&gt; ((message.sendUserName ===</span></span><br><span class="line"><span class="xml">                                    loginUser &amp;&amp;</span></span><br><span class="line"><span class="xml">                                    message.targetUserName === userName)</span></span><br><span class="line"><span class="xml">                                ||</span></span><br><span class="line"><span class="xml">                                (message.sendUserName === userName &amp;&amp;</span></span><br><span class="line"><span class="xml">                                    message.targetUserName ===</span></span><br><span class="line"><span class="xml">                                    loginUser)))&#125;</span></span><br><span class="line"><span class="xml">                        onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="xml">                          dispatch(setTargetUserName(userName));</span></span><br><span class="line"><span class="xml">                        &#125;&#125;/&gt;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="채팅"><a href="#채팅" class="headerlink" title="채팅"></a>채팅</h2><p>유저 목록에서 채팅할 상대를 선택하면 우측 영역이 채팅 영역으로 변경된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props.messages.map(<span class="function">(<span class="params">message, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.sendUserName === loginUser)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyMessageBox</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message.message&#125;/</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">OtherMessageBox</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">message</span>=<span class="string">&#123;message.message&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>내가 보낸 메세지인지, 상대방으로 부터 받은 메세지인지를 판단해서 좌측 또는 우측에 메세지를 배치시킨다.</p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>부모 컴포넌트에서 자식 컴포넌트로 반복적인 props 전달 및 state관리를 조금 더 편하게 하기 위해서 REDUX를 사용했다.</p><a href="https://ko.redux.js.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://ko.redux.js.org/img/redux-logo-landscape.png"></img></div><div class="descriptions"><div class="og-title">Redux - 자바스크립트 앱을 위한 예측 가능한 상태 컨테이너. | Redux</div><div class="og-description">자바스크립트 앱을 위한 예측 가능한 상태 컨테이너.</div></div></div></a><p>이 사이트의 Quick Start 부분을 그대로 따라해서 구조를 잡았다.</p><figure class="highlight javascript"><figcaption><span>features/chatSlice.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 채팅 관련 state 관리</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> chatSlice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">'chat'</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    targetUserName: <span class="literal">null</span>,</span><br><span class="line">    userNameList: [],</span><br><span class="line">    messageList: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    setTargetUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.targetUserName = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setUserNameList: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = [...state.userNameList, action.payload];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    deleteUserName: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.userNameList = state.userNameList.filter(<span class="function"><span class="keyword">function</span>(<span class="params">userNameElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userNameElement !== action.payload;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setMessageList: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.messageList = action.payload;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addMessage: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.messageList = [...state.messageList, action.payload];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>채팅과 관련된 state를 관리한다.</p><p>예를들면 채팅 가능한 상대들의 목록이나 채팅 상대 지정, 메세지 목록등의 정보를 저장한다.</p><blockquote><p>처음부터 더 고민해서 만들었다면 조금 더 일관적인 구조가 되었을것 같다.<br>코드 자체는 간단하지만 구조에 기준이 없는 조잡한느낌..</p></blockquote><figure class="highlight javascript"><figcaption><span>features/loginSlice.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 로그인한 내 정보 관리</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginSlice = createSlice(&#123;</span><br><span class="line">    name: <span class="string">'loginUser'</span>,</span><br><span class="line">    initialState: &#123;</span><br><span class="line">        user: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    reducers: &#123;</span><br><span class="line">        setLoginUser: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">            state.user = action.payload</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>로그인한 내 정보를 관리한다.</p><p>이 정보를 이용해 유저 목록에서 내 정보를 가장 위에 배치하거나 내가 보낸 메세지인지 받은 메세지인지를 구분하는등의 정보로 사용한다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>이곳저곳 더 신경쓰거나 DB를 추가한다면 더 괜찮은 채팅 웹 앱이 될 수 있다고 생각한다.</p><p>이 프로젝트 개발하면서 또 다른것을 만들어야겠다는 생각이 들었던 만큼 재미있는 프로젝트였다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 클라이언트 부분 설명입니다.&lt;/p&gt;
&lt;p&gt;관련 글을 보고싶은 분은 글 최하단의 태그 &lt;code&gt;Toy project&lt;/code&gt; 링크를 눌러 확인해보세요!&lt;/p&gt;
&lt;p&gt;설명에 앞서 프론트를 전문으로 하는 개발자가 아니기 때문에 어색한 부분이 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;특히 디자인 부분은.. 더이상의 설명은 생략하겠습니다 ㅜㅜ&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;서버와는 다르게 클라이언트는 코드가 긴편이다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://dev-sawd.github.io/categories/React/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 혼자 만들어본 채팅 웹 앱(서버 부분)</title>
    <link href="https://dev-sawd.github.io/2022/03/13/Node-js-chatting-socket-server/"/>
    <id>https://dev-sawd.github.io/2022/03/13/Node-js-chatting-socket-server/</id>
    <published>2022-03-13T12:21:01.000Z</published>
    <updated>2022-12-10T20:24:47.919Z</updated>
    
    <content type="html"><![CDATA[<p>이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 서버 부분 설명입니다.</p><p>관련 글을 보고싶은 분은 글 최하단의 태그 <code>Toy project</code> 링크를 눌러 확인해보세요!</p><hr><p>소켓의 개념이 조금 어려울 수 있으나 막상 코드는 몇줄 되지 않는다.</p><a id="more"></a><h1 id="저장소-주소"><a href="#저장소-주소" class="headerlink" title="저장소 주소"></a>저장소 주소</h1><a href="https://github.com/dev-sawd/chat-server" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/9f09575552dce125cf22be85ceca371b592fe12bfd43b56b1fc6504248cf1bcf/dev-sawd/chat-server"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/chat-server</div><div class="og-description">Contribute to dev-sawd/chat-server development by creating an account on GitHub.</div></div></div></a><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;dev-sawd&#x2F;chat-server</span><br><span class="line">cd chat-server</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><p>개발할때는 코드의 변경사항을 바로바로 체크할 수 있게 nodemon으로 돌리는것이 편리하다.</p><h1 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userNameToSocketId = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> socketIdToUserName = &#123;&#125;</span><br></pre></td></tr></table></figure><p>로그인한 유저의 소켓 아이디와 소켓 아이디의 유저 이름을 관리하는 Dictionary 형태의 변수이다.<br>로그인때 해당 변수 안에 정보를 담고 로그아웃했을때 해당 변수들에서 정보를 삭제한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>React에서 로그인화면이 열렸을때 소켓의 연결 먼저 실행한다.</p><p>로그인과는 다른 개념으로 로그인 전에 소켓이 연결 된 후 해당 소켓을 이용해 로그인, 메세지 보내기, 로그아웃 등의 이벤트를 보낼 수 있다.</p><p>해당 소켓과 이 블록 안에 정의된 이벤트를 이용해 각 로직을 처리한다.</p><h2 id="connection-안의-이벤트"><a href="#connection-안의-이벤트" class="headerlink" title="connection 안의 이벤트"></a>connection 안의 이벤트</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'login'</span>, (&#123;userName&#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 이미 존재하는 아이디 체크</span></span><br><span class="line">    <span class="keyword">if</span> (!userNameToSocketId.hasOwnProperty(userName)) &#123;</span><br><span class="line">        userNameToSocketId[userName] = socket.id</span><br><span class="line">        socketIdToUserName[socket.id] = userName</span><br><span class="line">        socket.broadcast.emit(<span class="string">'loginUser'</span>, userName)</span><br><span class="line">        socket.emit(<span class="string">'returnLoginResponse'</span>, <span class="literal">true</span>, <span class="built_in">Object</span>.keys(userNameToSocketId))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        socket.emit(<span class="string">'returnLoginResponse'</span>, <span class="literal">false</span>, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>로그인 이벤트가 발생했을때 이미 존재하는 아이디인지 확인 후 <code>returnLoginResponse</code> 이벤트를 클라이언트에게 발생시킨다.</p><p><code>returnLoginResponse</code> 이벤트를 받은 클라이언트는 Alert을 이용해 아이디가 중복되었다고 사용자에게 알리거나 로그인 처리를 진행한다.</p><p>기존에 로그인한 아이디가 아니라면 모든 클라이언트에 <code>loginUser</code> 이벤트를 발생시킨다.</p><p><code>loginUser</code> 이벤트를 수신한 모든 클라이언트는 좌측 로그인한 유저 리스트에 이 유저 정보를 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'sendMessage'</span>, (&#123;sendUserName, targetUserName, message&#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 다른사람에게 보내는 메세지일때</span></span><br><span class="line">    <span class="keyword">if</span> (sendUserName === targetUserName) &#123;</span><br><span class="line">        io.to(userNameToSocketId[targetUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        io.to(userNameToSocketId[sendUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">        io.to(userNameToSocketId[targetUserName]).emit(<span class="string">'message'</span>, (&#123;sendUserName, targetUserName, message&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>클라이언트로 부터 메세지를 보내는 이벤트가 발생했을때 처리한다.</p><p>자신에게 보내는 메세지인지, 다른사람에게 보내는 메세지인지를 확인한다.</p><p>자신에게 보내는 메세지라면 자신에게 <code>message</code> 이벤트를 발생시킨다.</p><p>다른사람에게 메세지라면 자신과 수신자에게 <code>message</code> 이벤트를 각각 발생시킨다.</p><p><code>message</code> 이벤트를 받은 클라이언트는 메모리에 이 정보를 저장하고 채팅방이 활성화 되었을때 말풍선형태의 UI로 보여준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'disconnect'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 로그아웃 처리</span></span><br><span class="line">    <span class="keyword">var</span> userName = socketIdToUserName[socket.id]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> userNameToSocketId[userName]</span><br><span class="line">    <span class="keyword">delete</span> socketIdToUserName[socket.id]</span><br><span class="line"></span><br><span class="line">    socket.broadcast.emit(<span class="string">'logoutUser'</span>, userName)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>클라이언트가 로그아웃(또는 강제 종료) 했을때  <code>userNameToSocketId</code>와 <code>socketIdToUserName</code> 변수에서 해당 정보를 삭제하고 <code>logoutUser</code> 이벤트를 접속한 모든 클라이언트에 발생시킨다.</p><p><code>logoutUser</code> 이벤트를 수신한 모든 클라이언트는 좌측 로그인 유저 리스트에서 해당 유저를 삭제한다.</p><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>간단한 소켓을 이용한 채팅 서버는 이정도 수준에서 개발했다.</p><p>이것을 토대로 조금 더 개발한다면 DB를 붙여서 회원관리, 이전 메세지 관리 등의 기능을 확장할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 포스트는 “[React] 혼자 만들어본 채팅 웹 앱”의 서버 부분 설명입니다.&lt;/p&gt;
&lt;p&gt;관련 글을 보고싶은 분은 글 최하단의 태그 &lt;code&gt;Toy project&lt;/code&gt; 링크를 눌러 확인해보세요!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;소켓의 개념이 조금 어려울 수 있으나 막상 코드는 몇줄 되지 않는다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[React] 혼자 만들어본 채팅 웹 앱</title>
    <link href="https://dev-sawd.github.io/2022/03/08/React-chatting-web/"/>
    <id>https://dev-sawd.github.io/2022/03/08/React-chatting-web/</id>
    <published>2022-03-07T15:41:19.000Z</published>
    <updated>2022-12-10T20:24:47.869Z</updated>
    
    <content type="html"><![CDATA[<p>개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..</p><h1 id="이제-뭘하지"><a href="#이제-뭘하지" class="headerlink" title="이제 뭘하지?"></a>이제 뭘하지?</h1><p>뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.</p><p>그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…</p><h1 id="소켓을-이용한-무언가를-해보고싶어"><a href="#소켓을-이용한-무언가를-해보고싶어" class="headerlink" title="소켓을 이용한 무언가를 해보고싶어."></a>소켓을 이용한 무언가를 해보고싶어.</h1><p>소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.</p><p>당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.</p><blockquote><p><strong>소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.</strong></p></blockquote><a id="more"></a><h1 id="뭘-이용해서-만들까"><a href="#뭘-이용해서-만들까" class="headerlink" title="뭘 이용해서 만들까?"></a>뭘 이용해서 만들까?</h1><p>최근에 만든 사이트는 프론트를 React, 백엔드를 Node.js, DB를 MySQL로 만들었다.</p><p>하지만 너무 겉핥기 식이고 빠르게 만드는 것에 바쁜 나머지 너무 날로 먹은것 같은 느낌이 들었다.</p><h2 id="또-다시-React"><a href="#또-다시-React" class="headerlink" title="또 다시 React"></a>또 다시 React</h2><p>내가 처음 React를 공부했을때(아마.. 2007년? 2008년?) 그때는 클래스형 구조로 되어있었다.</p><p>그리고 최근에 사이트를 만들었을 때 그때의 기억을 토대로 클래스형 구조로 만들고 사이트의 구조가 굳어갈때..</p><p>요즘 예제들은 함수형 구조로 된것이 많더라.</p><p>이 말은 뭔가 검색해도 함수형 구조를 이해하고 있지 않으면 빠르게 문제를 해결할 수 없다는 것과 같은 말이다.</p><p>결국은 클래스형 구조에서 함수형 구조로 다 뜯어 고치고 이 과정에서 생각보다 많은 시간을 잡아먹었다.</p><blockquote><p><strong>이번 채팅 앱은 처음부터 함수형 구조로 시작해야겠어.</strong></p></blockquote><h2 id="그리고-Node-js-서버"><a href="#그리고-Node-js-서버" class="headerlink" title="그리고 Node.js 서버"></a>그리고 Node.js 서버</h2><p>Javascript는 잘 못하는데, 그래도 Node.js로 서버개발을 해보니 의외로 간편하고 쉬웠다.</p><blockquote><p><strong>무엇보다 React도 Javascript니까.</strong></p></blockquote><h2 id="MUI"><a href="#MUI" class="headerlink" title="MUI"></a>MUI</h2><p>React UI library로 기본 UI보다 좀더 있어보이게 꾸밀 수 있다.</p><p>컴포넌트마다 예제는 너무 잘 돼있는데 조금 취향에 맞게 수정하려고 하려면 생각보다 쉽진않은 듯 하다.</p><a href="https://mui.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://mui.com/static/social-previews/default-preview.jpg"></img></div><div class="descriptions"><div class="og-title">MUI: The React component library you always wanted</div><div class="og-description">MUI provides a simple, customizable, and accessible library of React components. Follow your own design system, or start with Material Desig…</div></div></div></a><h2 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h2><p>소켓을 사용하기 위해서 검색중 socket.io를 이용하면 간편하게 개발할 수 있을것으로 보였다.</p><a href="https://socket.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Socket.IO</div></div></div></a><p>그리고 채팅 앱을 만드는 간단한 튜토리얼도 제공한다.</p><ul><li><a href="https://socket.io/get-started/chat" target="_blank" rel="noopener">https://socket.io/get-started/chat</a></li></ul><p>개발하는데 필요한 부분만 보고 개발했는데, 정리해서 포스팅해두면 나중에 쉽게 찾아볼 수 있을것 같아 조만간 정리할 예정이다.</p><h1 id="디자인"><a href="#디자인" class="headerlink" title="디자인"></a>디자인</h1><p>디자인에는 정말 소질이 없기 때문에 구글에서 ‘web chatting design’ 등의 검색 키워드를 몇개 참고해서 만들기로 했다.</p><img src="/2022/03/08/React-chatting-web/1.png" class=""><p>로그인 화면은 사실 많은 기능을 필요로 하지 않도록 ID만 입력하게 했고,</p><p>서버를 통해 동일한 ID가 존재하는지 중복 체크만 했다.</p><img src="/2022/03/08/React-chatting-web/2.png" class=""><p>좌측 상단에는 ‘나만의 채팅’ 기능으로 로그인한 나 자신이 가장 상단에 뜨고 이미 접속해있는 유저나 새로 접속한 유저들은 그 밑으로 리스트를 뿌려주어 채팅할 상대를 선택할 수 있도록 구성했다.</p><p>우측 환영 페이지는 딱히 디자인할 것이 없어 간단히 환영메세지만 작성했다.</p><img src="/2022/03/08/React-chatting-web/3.png" class=""><p>채팅을 작성하면 내 채팅은 우측 말풍선으로 표시했다.</p><p>가장 최근 메세지는 카카오톡처럼 대화상대 아이디 밑에 나오도록 했다.</p><img src="/2022/03/08/React-chatting-web/4.png" class=""><p>상대방과 채팅을 한다면 이런 식으로 표시된다.</p><h1 id="만들면서-느낀점"><a href="#만들면서-느낀점" class="headerlink" title="만들면서 느낀점"></a>만들면서 느낀점</h1><h2 id="flexbox-너무-어렵고…"><a href="#flexbox-너무-어렵고…" class="headerlink" title="flexbox 너무 어렵고…"></a>flexbox 너무 어렵고…</h2><p>화면의 영역과 구조가 복잡해질수록 부모와 자식의 계층을 잘 나눠야 하고 결국 디자인 영역까지 영향을 준다.</p><p>어떤 컴포넌트들은 세로로 배치해야하고 어떤 컴포넌트들은 가로로, 그리고 좌측 정렬, 우측 정렬… 가운데정렬..</p><p>주먹구구식으로 배우니 답이 없어 주변 친구에게 하소연할때 그 친구가 기본적인 flexbox 배치를 공부해 볼 수 있는 사이트를 추천해줬다.</p><a href="https://flexboxfroggy.com/#ko" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://flexboxfroggy.com/images/screenshot.png"></img></div><div class="descriptions"><div class="og-title">Flexbox Froggy</div><div class="og-description">A game for learning CSS flexbox</div></div></div></a><p>24단계의 간단한 문제로 컴포넌트의 배치를 공부해 볼 수 있다.</p><p>정말 도움이 많이 되었고 능숙하진 않지만 확실히 개발 속도를 올려주었다.</p><blockquote><p><strong>flexbox froggy 알려준 친구야 고마워!</strong></p></blockquote><h2 id="부모의-자식의-자식의-자식의…-props-props-props…-props-지옥"><a href="#부모의-자식의-자식의-자식의…-props-props-props…-props-지옥" class="headerlink" title="부모의 자식의 자식의 자식의… props, props, props… props 지옥"></a>부모의 자식의 자식의 자식의… props, props, props… props 지옥</h2><p>위에 설명한대로 이전에 React를 공부했을때도 발생했던 문제다.</p><p>계층을 여러개로 나누다 보면 몇단계 위에서 가지고있는 데이터를 자식에게 보내기 위해서 props의 지옥이 시작된다.</p><p>반대로 자식이 가지고있는 데이터를 부모 컴포넌트에서 업데이트해서 사용해야 될 경우도 생긴다.</p><blockquote><p><strong>또 이렇게 Redux를…</strong></p></blockquote><a href="https://ko.redux.js.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://ko.redux.js.org/img/redux-logo-landscape.png"></img></div><div class="descriptions"><div class="og-title">Redux - 자바스크립트 앱을 위한 예측 가능한 상태 컨테이너. | Redux</div><div class="og-description">자바스크립트 앱을 위한 예측 가능한 상태 컨테이너.</div></div></div></a><p><del>뭐야 한글 번역 사이트도 있었네…</del></p><p>예전에도 Redux를 사용했는데.. 너무 어렵고 공부했을때의 경험이 썩 좋지는 않았다..</p><p>그래서 다시 사용하고 싶지는 않았지만 결국 다시 사용해야 하는 상황이 왔다.</p><p>설치 방법을 보고 따라해보는데 이런 생각이 들었다.</p><blockquote><p><strong>의외로 쉽네. 앞으로 겁먹지 않아도 되겠다.</strong></p></blockquote><h2 id="그래도-아쉬운-구조"><a href="#그래도-아쉬운-구조" class="headerlink" title="그래도 아쉬운 구조"></a>그래도 아쉬운 구조</h2><p>주변에 React를 전문으로 하는 친구가 있어 조언을 구하고 싶은데 항상 바쁘다..</p><p>프론트 전문도 아니고 공부하며 만든 토이 프로젝트라 폴더 계층이나 컴포넌트 구조등 마음에 안드는 부분이 많다.</p><p>잘 만들어진 프로젝트를 보고 배우는것이 이 아쉬움을 해소하는데 도움이 될것으로 보인다.</p><blockquote><p><strong>그런 프로젝트를 github에서 찾으면 뜯어봐야지.</strong></p></blockquote><h2 id="3주간의-개발"><a href="#3주간의-개발" class="headerlink" title="3주간의 개발"></a>3주간의 개발</h2><p>뭘 만들지 고민하고, 디자인이나 기능을 생각하고 코딩을 시작해서 지금까지 3주 정도 걸린 것 같다.</p><p>일하면서 취미도 즐기고 마지막으로 남는 시간에 만들었는데 정말 재미있었다!</p><blockquote><p><strong>이렇게 정리하고 보니 생각보다 배운게 많네.</strong></p></blockquote><h1 id="그래서-앞으로는"><a href="#그래서-앞으로는" class="headerlink" title="그래서 앞으로는?"></a>그래서 앞으로는?</h1><p>지금 이 글을 정리하면서 다음 토이 프로젝트를 구상중이다.</p><p>짧으면 3개월에서 길면 6개월을 예상하고 있는데 덩치가 너무 큰것은 아닌지 걱정되기도 하고..</p><p>이와 병행해서 배운것들은 계속해서 블로그에 작성할 예정이다.</p><p>내가 만든 채팅앱 소스와 설명은 간단히 포스팅 할 예정이다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..&lt;/p&gt;
&lt;h1 id=&quot;이제-뭘하지&quot;&gt;&lt;a href=&quot;#이제-뭘하지&quot; class=&quot;headerlink&quot; title=&quot;이제 뭘하지?&quot;&gt;&lt;/a&gt;이제 뭘하지?&lt;/h1&gt;&lt;p&gt;뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.&lt;/p&gt;
&lt;p&gt;그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…&lt;/p&gt;
&lt;h1 id=&quot;소켓을-이용한-무언가를-해보고싶어&quot;&gt;&lt;a href=&quot;#소켓을-이용한-무언가를-해보고싶어&quot; class=&quot;headerlink&quot; title=&quot;소켓을 이용한 무언가를 해보고싶어.&quot;&gt;&lt;/a&gt;소켓을 이용한 무언가를 해보고싶어.&lt;/h1&gt;&lt;p&gt;소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.&lt;/p&gt;
&lt;p&gt;당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://dev-sawd.github.io/categories/React/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[CSS] Flexbox 정리</title>
    <link href="https://dev-sawd.github.io/2022/02/21/CSS-flexbox/"/>
    <id>https://dev-sawd.github.io/2022/02/21/CSS-flexbox/</id>
    <published>2022-02-21T06:46:54.000Z</published>
    <updated>2022-12-10T20:24:47.929Z</updated>
    
    <content type="html"><![CDATA[<p>프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 <del>복사 붙여넣기는 잘함</del></p><p>flexbox의 속성들을 간단히 정리</p><a id="more"></a><h1 id="AXIS"><a href="#AXIS" class="headerlink" title="AXIS"></a>AXIS</h1><h2 id="main-axis"><a href="#main-axis" class="headerlink" title="main axis"></a>main axis</h2><p>사용자가 지정한 중심축</p><h2 id="across-axis"><a href="#across-axis" class="headerlink" title="across axis"></a>across axis</h2><p>사용자가 지정한 중심축의 수직축</p><h1 id="container-item"><a href="#container-item" class="headerlink" title="container, item"></a>container, item</h1><h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>말그대로 다른 엘리먼트들을 담을 수 있는 컨테이너</p><h2 id="container-속성"><a href="#container-속성" class="headerlink" title="container 속성"></a>container 속성</h2><ul><li>display</li><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content(main axis)</li><li>align-items(across axis)</li><li>align-content(across axis)</li></ul><h2 id="item"><a href="#item" class="headerlink" title="item"></a>item</h2><p>컨테이너 안에 담긴 엘리먼트</p><h2 id="item-속성"><a href="#item-속성" class="headerlink" title="item 속성"></a>item 속성</h2><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ul><h1 id="vs-vh"><a href="#vs-vh" class="headerlink" title="% vs vh"></a>% vs vh</h1><p>%는 부모 엘리먼트를 기준으로 x%를 채움<br>vh는 보이는 viewport height를 기준으로 채움</p><p>참고</p><ul><li><a href="https://youtu.be/7neASrWEFEM" target="_blank" rel="noopener">https://youtu.be/7neASrWEFEM</a></li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 &lt;del&gt;복사 붙여넣기는 잘함&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;flexbox의 속성들을 간단히 정리&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://dev-sawd.github.io/categories/CSS/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] Error: ER_NOT_SUPPORTED_AUTH_MODE 에러 해결</title>
    <link href="https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/"/>
    <id>https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/</id>
    <published>2022-02-16T00:42:57.000Z</published>
    <updated>2022-02-16T00:50:37.382Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">\node_modules\mysql\lib\protocol\Parser.js:437</span><br><span class="line">      throw err; &#x2F;&#x2F; Rethrow non-MySQL errors</span><br><span class="line">      ^</span><br><span class="line">      </span><br><span class="line">Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line">    at Handshake.Sequence._packetToError</span><br><span class="line">    at Handshake.ErrorPacket</span><br><span class="line">    at Protocol._parsePacket</span><br><span class="line">    at Parser._parsePacket</span><br><span class="line">    at Parser.write</span><br><span class="line">    at Protocol.write</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.emit</span><br><span class="line">    at addChunk</span><br><span class="line">    --------------------</span><br><span class="line">    at Protocol._enqueue</span><br><span class="line">    at Protocol.handshake</span><br><span class="line">    at Connection.connect</span><br><span class="line">    at Object.&lt;anonymous&gt;</span><br><span class="line">    at Module._compile</span><br><span class="line">    at Object.Module._extensions..js</span><br><span class="line">    at Module.load</span><br><span class="line">  sqlMessage: &#39;Client does not support authentication protocol requested by server; consider upgrading MySQL client&#39;,</span><br><span class="line">  sqlState: &#39;08004&#39;,</span><br><span class="line">  fatal: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내 개발 환경은 백엔드는 현재 로컬에서 작업중이고 MySQL은 AWS 서버에 올려둔 상태로 AWS에서는 외부 접속의 개념이 됨</p><p>아이디는 root에 비밀번호가 11111111을 예로 아래와 같은 쿼리를 실행하여 해결</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;11111111&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드 개발자용 Hyperledger fabric 테스트 네트워크</title>
    <link href="https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/"/>
    <id>https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/</id>
    <published>2022-02-15T03:53:28.000Z</published>
    <updated>2022-02-15T04:18:08.797Z</updated>
    
    <content type="html"><![CDATA[<p>하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요</p><p>네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아</p><p>네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음</p><a href="https://github.com/dev-sawd/hyperledger-fabric-basic-network" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/hyperledger-fabric-basic-network</div><div class="og-description">Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.</div></div></div></a><a id="more"></a><p>기존에 Fabric version 1.4.3을 기준으로 만들어놨었는데</p><p>이번에 맥북 에어 M1으로 바꾸면서 M1에서도 돌아갈 수 있는 2.4.2 최신 버전을 기준으로 다시 재구성</p><p>fabric-samples/test-network를 기반으로 필요없는 부분을 제거해서 작성</p><ul><li><a href="https://github.com/hyperledger/fabric-samples/tree/main/test-network" target="_blank" rel="noopener">https://github.com/hyperledger/fabric-samples/tree/main/test-network</a></li></ul><h2 id="Docker-Container-list"><a href="#Docker-Container-list" class="headerlink" title="Docker Container list"></a>Docker Container list</h2><ul><li>ca_org1</li><li>ca_orderer</li><li>peer0.org1.example.com</li><li>couchdb0</li><li>orderer.example.com</li><li>cli</li></ul><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ start.sh</span><br></pre></td></tr></table></figure><h2 id="종료"><a href="#종료" class="headerlink" title="종료"></a>종료</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ teardown.sh</span><br></pre></td></tr></table></figure><h2 id="체인코드-설치"><a href="#체인코드-설치" class="headerlink" title="체인코드 설치"></a>체인코드 설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh .&#x2F;network.sh deployCC -ccn [CHAINCODE_NAME] -ccv [CHIANCODE_VERSION] -cci initLedger -ccl &quot;go&quot; -ccp [CHAINCODE_PATH]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요&lt;/p&gt;
&lt;p&gt;네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아&lt;/p&gt;
&lt;p&gt;네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음&lt;/p&gt;
&lt;a href=&quot;https://github.com/dev-sawd/hyperledger-fabric-basic-network&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;GitHub - dev-sawd/hyperledger-fabric-basic-network&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 이벤트 스케줄 사용시 주의사항</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/</id>
    <published>2022-02-14T18:09:13.000Z</published>
    <updated>2022-02-14T18:18:27.580Z</updated>
    
    <content type="html"><![CDATA[<p>이벤트 스케줄을 사용할때 시간을 지정해서 사용</p><p>예를들면 <code>하루 한번 0시에 어떤 작업을 실행</code></p><p>그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><p>한국의 시간과 9시간이 차이가 나는것을 확인할 수 있었음</p><p>그리고 내가 설정할 이벤트 스케줄의 시간을 MySQL 시간을 기준으로 1분뒤에 실행하도록 설정하고 확인한 결과는</p><p><code>이벤트 스케줄은 MySQL의 시간을 기준으로 실행된다.</code></p><p>관리를 편하게 하기 위해 MySQL의 시간을 한국 시간으로 변경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set time_zone&#x3D;&#39;Asia&#x2F;Seoul&#39;;</span><br></pre></td></tr></table></figure><p>그리고 실제 해당 시각에 정상 실행되는 것을 확인 할 수 있었음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이벤트 스케줄을 사용할때 시간을 지정해서 사용&lt;/p&gt;
&lt;p&gt;예를들면 &lt;code&gt;하루 한번 0시에 어떤 작업을 실행&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 두 컬럼의 값 바꾸기</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/</id>
    <published>2022-02-14T17:55:21.000Z</published>
    <updated>2022-02-14T18:00:50.055Z</updated>
    
    <content type="html"><![CDATA[<p>DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE</span><br><span class="line">    [TABLE_NAME]</span><br><span class="line">SET</span><br><span class="line">    A &#x3D; (@temp:&#x3D;A),</span><br><span class="line">    A &#x3D; B,</span><br><span class="line">    B &#x3D; @temp</span><br></pre></td></tr></table></figure><p>이때 주의해야 할 점이 <code>A = (@temp:=A)</code>에서 콜론이 들어간다는것</p><p>만약 콜론을 빼고 UPDATE를 실행한다면 B 컬럼에 NULL이 들어가니 신중히 실행해야함</p><p>가장 좋은 방법은 테스트용 DB에서 실행한 결과를 확인하고 운영 DB에 적용하는것이 좋다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
