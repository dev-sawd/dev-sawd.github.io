<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SAWD</title>
  
  <subtitle>NOT CODER BUT S.W DEVELOPER</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dev-sawd.github.io/"/>
  <updated>2022-02-13T14:29:31.213Z</updated>
  <id>https://dev-sawd.github.io/</id>
  
  <author>
    <name>SAWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[MySQL] access denied for user</title>
    <link href="https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/"/>
    <id>https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/</id>
    <published>2022-02-13T14:22:14.000Z</published>
    <updated>2022-02-13T14:29:31.213Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김</p><p>프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access denied for user &#39;root&#39;@&#39;%&#39; to database &#39;information_schema&#39;</span><br></pre></td></tr></table></figure><p>거의 반나절을 구글링과 스택오버플로우를 찾아봤는데도 해답을 찾을 수 없었음</p><p>대부분 권한 문제 때문이라고 하는데 이미 필요한 권한은 다 가지고있었음</p><p>그리고 며칠 지나 다시 문제를 풀어보려고 열었는데 에러 문구에 <code>database &#39;information_schema&#39;</code> 부분이 자꾸 거슬렸음</p><p>그래서 이 부분에 초점을 두고 database를 내가 원하는 데이터베이스로 설정 후 프로시져를 생성하니 성공</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use my_database</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; procedure 생성</span><br></pre></td></tr></table></figure><p>너무 허무하다.. 😪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김&lt;/p&gt;
&lt;p&gt;프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Docker] no matching manifest for linux/arm64/v8 in the manifest list entries</title>
    <link href="https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/"/>
    <id>https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/</id>
    <published>2022-02-07T06:05:33.000Z</published>
    <updated>2022-02-07T06:25:45.776Z</updated>
    
    <content type="html"><![CDATA[<p>M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% docker pull hyperledger&#x2F;fabric-javaenv:2.4</span><br><span class="line">2.4: Pulling from hyperledger&#x2F;fabric-javaenv</span><br><span class="line">no matching manifest for linux&#x2F;arm64&#x2F;v8 in the manifest list entries</span><br></pre></td></tr></table></figure><p>M1 환경에서 발생하는 문제로 보임</p><p><code>--platform linux/x86_64</code> 인자를 주어 실행하면 정상적으로 받아오는것을 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% docker pull --platform linux&#x2F;x86_64 hyperledger&#x2F;fabric-javaenv:2.4</span><br></pre></td></tr></table></figure><ul><li><a href="https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/" target="_blank" rel="noopener">https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/</a></li><li><a href="https://stackoverflow.com/a/67361161" target="_blank" rel="noopener">https://stackoverflow.com/a/67361161</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="M1 MacBook Air" scheme="https://dev-sawd.github.io/tags/M1-MacBook-Air/"/>
    
  </entry>
  
  <entry>
    <title>[Golang] go modules 사용</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Golang-go-modules/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Golang-go-modules/</id>
    <published>2022-02-06T10:20:03.000Z</published>
    <updated>2022-02-06T12:57:14.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="govendor-deprecated"><a href="#govendor-deprecated" class="headerlink" title="govendor (deprecated)"></a>govendor (deprecated)</h1><p>Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음</p><ul><li><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">https://github.com/kardianos/govendor</a></li></ul><h1 id="Go-modules"><a href="#Go-modules" class="headerlink" title="Go modules"></a>Go modules</h1><p>이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음</p><p>사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임</p><ul><li><a href="https://go.dev/blog/using-go-modules" target="_blank" rel="noopener">https://go.dev/blog/using-go-modules</a></li></ul><a id="more"></a><h3 id="go-mod-init-module-name"><a href="#go-mod-init-module-name" class="headerlink" title="go mod init [module-name]"></a>go mod init [module-name]</h3><p>새 모듈을 만들었을때 go mod init 명령어로 go.mod 파일 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-get-module-name"><a href="#go-get-module-name" class="headerlink" title="go get [module-name]"></a>go get [module-name]</h3><p>종속성 모듈을 다운로드</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>사용되지 않는 종속성 모듈을 제거하거나 추가된 종속성 모듈을 go.mod에 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><p>해당 위치에 종속성 모듈을 vendor 폴더안에 복사</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod vendor</span><br></pre></td></tr></table></figure><p>프로젝트를 새로 만들었을 경우는 go mod init를 이용해 go.mod를 생성하고 작업하면서 필요한 모듈들을 정리해가며 개발</p><p>만약 github에 공유된 모듈들을 받아 직접 실행하는 경우는 go.mod파일이 이미 존재하기 때문에 go get을 이용해 해당 모듈에서 사용하고 있는 모듈들을 다운받아 실행하면 됨</p><p>go get등을 이용해 github에 공유되어있는 모듈들을 다운로드 받을 수 없는 경우에는 go mod vendor를 이용해 해당 모듈들을 현재 개발중인 모듈 폴더의 vendor에 복사하게 한 후</p><p>모듈 전체를 배포하는 형태로 진행해야함</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;govendor-deprecated&quot;&gt;&lt;a href=&quot;#govendor-deprecated&quot; class=&quot;headerlink&quot; title=&quot;govendor (deprecated)&quot;&gt;&lt;/a&gt;govendor (deprecated)&lt;/h1&gt;&lt;p&gt;Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kardianos/govendor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kardianos/govendor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Go-modules&quot;&gt;&lt;a href=&quot;#Go-modules&quot; class=&quot;headerlink&quot; title=&quot;Go modules&quot;&gt;&lt;/a&gt;Go modules&lt;/h1&gt;&lt;p&gt;이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음&lt;/p&gt;
&lt;p&gt;사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/blog/using-go-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://go.dev/blog/using-go-modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] panic recover 샘플</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/</id>
    <published>2022-02-05T16:23:25.000Z</published>
    <updated>2022-02-05T16:50:32.950Z</updated>
    
    <content type="html"><![CDATA[<p>체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음</p><p>도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨</p><p>이러한 방법은 에러 추적이 어려워짐</p><p>Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각</p><a id="more"></a><h1 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h1><blockquote><p>Go 내장함수인 panic()함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다. 이러한 panic 모드 실행 방식은 다시 상위함수에도 똑같이 적용되고, 계속 콜스택을 타고 올라가며 적용된다. 그리고 마지막에는 프로그램이 에러를 내고 종료하게 된다.</p></blockquote><p>&nbsp;</p><h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><blockquote><p>Go 내장함수인 recover()함수는 panic 함수에 의한 패닉상태를 다시 정상상태로 되돌리는 함수이다.</p></blockquote><ul><li><a href="http://golang.site/go/article/20-Go-defer%EC%99%80-panic" target="_blank" rel="noopener">http://golang.site/go/article/20-Go-defer%EC%99%80-panic</a></li></ul><p>&nbsp;</p><h1 id="smaple-code"><a href="#smaple-code" class="headerlink" title="smaple code"></a>smaple code</h1><script src="//gist.github.com/66e46a62183d2d316ff9100d93a4fa6d.js"></script><p>샘플 프로젝트로 직접 확인해보고 개선해 나갈 예정</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음&lt;/p&gt;
&lt;p&gt;도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨&lt;/p&gt;
&lt;p&gt;이러한 방법은 에러 추적이 어려워짐&lt;/p&gt;
&lt;p&gt;Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드에서의 MVC...?</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/</id>
    <published>2022-02-04T11:45:25.000Z</published>
    <updated>2022-02-06T09:57:22.972Z</updated>
    
    <content type="html"><![CDATA[<p>조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><blockquote><p>MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Glossary/MVC" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Glossary/MVC</a></li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>데이터를 받아 비즈니스 로직을 처리<br>주로 DB와의 상호작용이 해당</p><a id="more"></a><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>레이아웃과 화면을 처리<br>애플리케이션의 데이터를 보여주는 방식</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>사용자로부터 요청을 받아 수행할 비즈니스 로직을 제어</p><p>&nbsp;</p><h1 id="Go언어에서의-MVC"><a href="#Go언어에서의-MVC" class="headerlink" title="Go언어에서의 MVC"></a>Go언어에서의 MVC</h1><p>Go언어에서는 Revel이라고 하는 MVC를 도와주는 웹 프레임워크가 있다고 함</p><a href="https://revel.github.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Revel - Go Web Framework</div></div></div></a><p>&nbsp;</p><h1 id="하지만-체인코드에서는"><a href="#하지만-체인코드에서는" class="headerlink" title="하지만 체인코드에서는..?"></a>하지만 체인코드에서는..?</h1><p>MVC패턴을 제대로 모르더라도 구조를 보면 많이 익숙한 느낌이 들정도로 개발자들은 자주 접하는 구조<br>하지만 체인코드를 개발할때 MVC를 그대로 사용하기에는 무리가 있어서 조금 내 방식대로 수정<br>호출 순서는 아래와 같다고 생각</p><p>사용자 → Controller → Service → DAO → DB</p><p>그리고 각 호출에서 필요한 데이터 구조(DTO)를 정의하는 정도로 생각</p><p>&nbsp;</p><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><p>직관적으로 각 구조마다 폴더명을 지정해서 관리<br>dao, dto는 service, object등으로 상황에 따라 다르게 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">│  main.go</span><br><span class="line">│</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><script src="//gist.github.com/c8bc668ea2d139dfdc69a16128db3189.js"></script><p>개발을 하면서 반복되는 코드는 계속해서 리펙토링을 통해 제거하고 관리해야함</p><p><del>그래도 나중엔 감당안되긴 해…</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리&lt;/p&gt;
&lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/MVC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/ko/docs/Glossary/MVC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Model&quot;&gt;&lt;a href=&quot;#Model&quot; class=&quot;headerlink&quot; title=&quot;Model&quot;&gt;&lt;/a&gt;Model&lt;/h3&gt;&lt;p&gt;데이터를 받아 비즈니스 로직을 처리&lt;br&gt;주로 DB와의 상호작용이 해당&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Pattern" scheme="https://dev-sawd.github.io/tags/Pattern/"/>
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>Hello Golang</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Hello-Golang/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Hello-Golang/</id>
    <published>2022-02-03T18:47:41.000Z</published>
    <updated>2022-02-04T08:36:32.832Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Golang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="//gist.github.com/44e38cda1e98acfca88c81c2ddba1024.js"></script><p>가볍게라도 꾸준히!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 이벤트와 이벤트 리스너</title>
    <link href="https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/"/>
    <id>https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/</id>
    <published>2020-06-09T21:45:10.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEvent = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">myEvent.addListener(<span class="string">'event1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2 추가'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.emit(<span class="string">'event1'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event2'</span>);</span><br><span class="line"></span><br><span class="line">myEvent.once(<span class="string">'event3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>); <span class="comment">// 위의 event3 이벤트만 한번 호출됨</span></span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event4'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 4'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.removeAllListeners(<span class="string">'event4'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event4'</span>); <span class="comment">// 위의 removeAllListeners를 통해 event4 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 5'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">myEvent.on(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.removeListener(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.emit(<span class="string">'event5'</span>); <span class="comment">// 위의 removeListener를 통해 event5 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myEvent.listenerCount(<span class="string">'event2'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node event.js</span></span><br><span class="line">이벤트 1</span><br><span class="line">이벤트 2</span><br><span class="line">이벤트 2 추가</span><br><span class="line">이벤트 3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><p>on(이벤트명, 콜백)<br>이벤트 이름과 이벤트 발생 시의 콜백을 연결해주고 이렇게 연결하는 동작을 이벤트 리스닝이라고 부름<br>event2처럼 이벤트 하나에 여러개를 달아줄 수도 있음</p></li><li><p>addListener(이벤트명, 콜백)<br>on과 기능이 같음</p></li><li><p>emit(이벤트명)<br>이벤트를 호출하는 메서드<br>이벤트 이름을 인자로 넣어주면 미리 등록해뒀던 이벤트 콜백이 실행됨</p></li><li><p>once(이벤트명, 콜백)<br>한번만 실행되는 이벤트<br>위의 예제에서 myEvent.emit(‘event3’)을 두 번 연속 호출했지만 콜백이 한번만 실행됨</p></li><li><p>removeAllListeners(이벤트명)<br>이벤트에 연결된 모든 이벤트 리스너를 제거함<br>event4가 호출되기 전에 이벤트 리스너를 제거했으므로 event4의 콜백은 호출되지 않음</p></li><li><p>removeListener(이벤트명, 리스너)<br>이벤트에 연결된 리스너를 하나씩 제거<br>event5의 콜백도 호출되지 않음</p></li><li><p>off(이벤트명, 콜백)<br>노드 10 버전에서 추가된 메서드로, removeListener와 기능이 같음</p></li><li><p>listenerCount(이벤트명)<br>현재 리스너가 몇 개 연결되어 있는지 확인</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 파일 시스템</title>
    <link href="https://dev-sawd.github.io/2020/06/09/Node-js-file-system/"/>
    <id>https://dev-sawd.github.io/2020/06/09/Node-js-file-system/</id>
    <published>2020-06-09T11:37:51.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>fs 모듈은 파일 시스템에 접근하는 모듈</p><a id="more"></a><h1 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; readme.txt</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readFile.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 버퍼로 출력</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">// 문자열로 출력</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node readFile.js</span></span><br><span class="line">&lt;Buffer 74 68 69 73 20 69 73 20 72 65 61 64 6d 65 2e 74 78 74 0d 0a&gt;</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><h1 id="동기-메서드와-비동기-메서드"><a href="#동기-메서드와-비동기-메서드" class="headerlink" title="동기 메서드와 비동기 메서드"></a>동기 메서드와 비동기 메서드</h1><p>setTimeout 같은 타이머와 process.netTick 외에도 노드는 대부분의 메서드를 비동기 방식으로 처리<br>특히 fs 모듈이 비동기 메서드를 많이 가지고있음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node async.js</span></span><br><span class="line">시작</span><br><span class="line">끝</span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br></pre></td></tr></table></figure><p>비동기 메서드들은 백그라운드에 해당 파일을 읽으라고만 요청하고 다음 작업으로 넘어감<br>따라서 파일 읽기 요청만 세번 보내고 <code>console.log(&#39;끝&#39;)</code>을 찍음<br>나중에 읽기가 완료되면 백그라운드가 다시 메인 스레드에 알림을 주고 이때 콜백 함수를 실행</p><blockquote><p>동기와 비동기, 블로킹과 논블로킹<br>노드에서는 비동기와 동기, 블로킹과 논블로킹이라는 네 용어가 혼용됨</p><ul><li>동기와 비동기 : 함수가 바로 return 되는지 여부</li><li>블로킹과 논 블로킹 : 백그라운드 작업 완료 여부<br>노드에서는 동기-블로킹 방식과 비동기-논블로킹 방식이 대부분</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sync.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% node sync.js</span><br><span class="line">시작</span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br><span class="line"></span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">끝</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;fs 모듈은 파일 시스템에 접근하는 모듈&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 단방향 암호화</title>
    <link href="https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/"/>
    <id>https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/</id>
    <published>2020-06-08T12:19:54.000Z</published>
    <updated>2022-01-26T13:51:21.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함<br>단방향 암호화 알고리즘은 주로 해시 기법을 사용<br>해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'base64'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hex:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'hex'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'다른 비밀번호'</span>).digest(<span class="string">'base64'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node hash.js</span></span><br><span class="line">base64: dvfV6nyLRRt3NxKSlTHOkkEGgqW2HRtfu19Ou/psUXvwlebbXCboxIPmDYOFRIpqav2eUTBFuHaZri5x+usy1g==</span><br><span class="line">hex: 76f7d5ea7c8b451b773712929531ce92410682a5b61d1b5fbb5f4ebbfa6c517bf095e6db5c26e8c483e60d8385448a6a6afd9e513045b87699ae2e71faeb32d6</span><br><span class="line">base64: cx49cjC8ctKtMzwJGBY853itZeb6qxzXGvuUJkbWTGn5VXAFbAwXGEOxU2Qksoj+aM2GWPhc1O7mmkyohXMsQw==</span><br></pre></td></tr></table></figure><h1 id="createHash-알고리즘"><a href="#createHash-알고리즘" class="headerlink" title="createHash(알고리즘)"></a>createHash(알고리즘)</h1><p>사용할 해시 알고리즘<br>md5, sha1, sha256, sha512등이 가능, 현재는 sha512정도로 충분</p><h1 id="update-문자열"><a href="#update-문자열" class="headerlink" title="update(문자열)"></a>update(문자열)</h1><p>변환할 문자열</p><h1 id="digest-인코딩"><a href="#digest-인코딩" class="headerlink" title="digest(인코딩)"></a>digest(인코딩)</h1><p>인코딩할 알고리즘<br>base64, hex, latin1이 주로 사용, 그중 base64 결과 문자열이 가장 짧아 애용</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함&lt;br&gt;단방향 암호화 알고리즘은 주로 해시 기법을 사용&lt;br&gt;해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] path module</title>
    <link href="https://dev-sawd.github.io/2020/06/07/Node.js-node-js-path-module/"/>
    <id>https://dev-sawd.github.io/2020/06/07/Node.js-node-js-path-module/</id>
    <published>2020-06-07T12:26:47.000Z</published>
    <updated>2022-01-26T13:51:21.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈<br>운영체제별로 경로 구분자가 다르기 때문에 사용</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /Users/devsawd/hello-world/index.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.sep:'</span>, path.sep);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.delimiter:'</span>, path.delimiter);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.dirname(__filename):'</span>, path.dirname(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.extname(__filename):'</span>, path.extname(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.basename(__filename):'</span>, path.basename(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.basename(__filename):'</span>, path.basename(__filename, path.extname(__filename)));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.parse(__filename)'</span>, path.parse(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`path.format(&#123;</span></span><br><span class="line"><span class="string">    dir: '/Users/devsawd/hello-world',</span></span><br><span class="line"><span class="string">    name: 'index',</span></span><br><span class="line"><span class="string">    ext: '.js',</span></span><br><span class="line"><span class="string">&#125;));:`</span>, path.format(&#123;</span><br><span class="line">    dir: <span class="string">'/Users/devsawd/hello-world'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    ext: <span class="string">'.js'</span>,</span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.normalize('</span>/Users/devsawd/hello-world/index.js<span class="string">'):'</span>, path.normalize(<span class="string">'/Users/devsawd/hello-world/index.js'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.isAbsolute('</span>/users<span class="string">'):'</span>, path.isAbsolute(<span class="string">'/users'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.isAbsolute('</span>./home<span class="string">'):'</span>, path.isAbsolute(<span class="string">'./home'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`path.relative('/Users/devsawd/hello-world/index.js', '/Users'));: `</span>, path.relative(<span class="string">'/Users/devsawd/hello-world/index.js'</span>, <span class="string">'/Users'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'__dirname:'</span>, __dirname);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.join(__dirname, '</span>..<span class="string">', '</span>/Users<span class="string">', '</span>.<span class="string">', '</span>devsawd<span class="string">'):'</span>, path.join(__dirname, <span class="string">'..'</span>, <span class="string">'/Users'</span>, <span class="string">'.'</span>, <span class="string">'devsawd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.resolve(__dirname, '</span>..<span class="string">', '</span>/Users<span class="string">', '</span>.<span class="string">', '</span>devsawd<span class="string">'):'</span>, path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'/Users'</span>, <span class="string">'.'</span>, <span class="string">'devsawd'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hello-world % node index.js</span><br><span class="line">path.sep: /</span><br><span class="line">path.delimiter: :</span><br><span class="line">=====================================================================================</span><br><span class="line">path.dirname(__filename): /Users/devsawd/hello-world</span><br><span class="line">path.extname(__filename): .js</span><br><span class="line">path.basename(__filename): index.js</span><br><span class="line">path.basename(__filename): index</span><br><span class="line">=====================================================================================</span><br><span class="line">path.parse(__filename) &#123;</span><br><span class="line">  root: '/',</span><br><span class="line">  dir: '/Users/devsawd/hello-world',</span><br><span class="line">  base: 'index.js',</span><br><span class="line">  ext: '.js',</span><br><span class="line">  name: 'index'</span><br><span class="line">&#125;</span><br><span class="line">=====================================================================================</span><br><span class="line">path.format(&#123;</span><br><span class="line">    dir: '/Users/devsawd/hello-world',</span><br><span class="line">    name: 'index',</span><br><span class="line">    ext: '.js',</span><br><span class="line">&#125;));: /Users/devsawd/hello-world/index.js</span><br><span class="line">=====================================================================================</span><br><span class="line">path.normalize('/Users/devsawd/hello-world/index.js') /Users/devsawd/hello-world/index.js</span><br><span class="line">=====================================================================================</span><br><span class="line">path.isAbsolute('/users') true</span><br><span class="line">path.isAbsolute('./home'): false</span><br><span class="line">=====================================================================================</span><br><span class="line">path.relative('/Users/devsawd/hello-world/index.js', '/Users'));:  ../../..</span><br><span class="line">__dirname: /Users/devsawd/hello-world</span><br><span class="line">path.join(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd/Users/devsawd</span><br><span class="line">path.resolve(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd</span><br></pre></td></tr></table></figure><h1 id="path-join"><a href="#path-join" class="headerlink" title="path.join()"></a>path.join()</h1><p>인자로 받은 경로들을 합쳐서 문자열 형태로 path를 리턴</p><h1 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve()"></a>path.resolve()</h1><p>기본적으로 path.join과 같지만 오른쪽 인자부터 경로를 합쳐나가며 <code>/</code>를 만나면 절대경로로 인식하고 앞의 인자들을 무시<br>만약 <code>/</code>를 만나지 못한다면 <code>/현재경로/생성된경</code>로 형태로 결과 리턴</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈&lt;br&gt;운영체제별로 경로 구분자가 다르기 때문에 사용&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Data Structure] Circular Linked List</title>
    <link href="https://dev-sawd.github.io/2020/06/05/Data-Structure-circular-linked-list/"/>
    <id>https://dev-sawd.github.io/2020/06/05/Data-Structure-circular-linked-list/</id>
    <published>2020-06-05T12:47:27.000Z</published>
    <updated>2022-01-26T13:51:21.149Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.google.com/presentation/d/12zMa_KtpQRJjjA8uI1CBC6gNbYSJx-GKB3g677IsVy0/edit?usp=sharing" target="_blank" rel="noopener">원본자료</a></p><p>원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!</p><img src="/2020/06/05/Data-Structure-circular-linked-list/02.png" class=""><br><a id="more"></a><img src="/2020/06/05/Data-Structure-circular-linked-list/03.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/04.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/05.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/06.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/07.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/08.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/09.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/10.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/11.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/12.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/13.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/14.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/15.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/16.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/17.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/18.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/19.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/20.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/21.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/22.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/23.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/24.png" class=""><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/12zMa_KtpQRJjjA8uI1CBC6gNbYSJx-GKB3g677IsVy0/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;원본자료&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!&lt;/p&gt;
&lt;img src=&quot;/2020/06/05/Data-Structure-circular-linked-list/02.png&quot; class=&quot;&quot;&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://dev-sawd.github.io/categories/Data-Structure/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[GitLab] 백업과 복구</title>
    <link href="https://dev-sawd.github.io/2020/06/04/GitLab-backup-and-restore/"/>
    <id>https://dev-sawd.github.io/2020/06/04/GitLab-backup-and-restore/</id>
    <published>2020-06-04T09:58:02.000Z</published>
    <updated>2022-02-03T19:19:07.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gitlab_logo.jpg" alt=""></p><p>이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.<br>어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요.</p><blockquote><p>뭔가 3부작 느낌인데..</p></blockquote><a id="more"></a><p>아래의 내용은 <a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html" target="_blank" rel="noopener">GitLab 백업 공식 페이지</a>를 참고했습니다.</p><br><br><h2 id="백업-파일-생성"><a href="#백업-파일-생성" class="headerlink" title="백업 파일 생성"></a>백업 파일 생성</h2><p>먼저 실행중인 Docker GitLab의 데이터 백업 파일을 생성합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker <span class="built_in">exec</span> -t gitlab gitlab-backup create</span></span><br><span class="line">2020-06-04 01:45:41 +0000 -- Dumping database ...</span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line">2020-06-04 01:46:12 +0000 -- done</span><br><span class="line">2020-06-04 01:46:12 +0000 -- Dumping repositories ...</span><br><span class="line">* devsawd/hello-world (@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b) ... [DONE]</span><br><span class="line">[SKIPPED] Wiki</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping uploads ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping builds ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping artifacts ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping pages ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping lfs objects ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping container registry images ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- [DISABLED]</span><br><span class="line">Creating backup archive: 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ... done</span><br><span class="line">Uploading backup archive to remote storage  ... skipped</span><br><span class="line">Deleting tmp directories ... done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">Deleting old backups ... skipping</span><br><span class="line">Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data</span><br><span class="line">and are not included in this backup. You will need these files to restore a backup.</span><br><span class="line">Please back them up manually.</span><br><span class="line">Backup task is done.</span><br></pre></td></tr></table></figure><p>제가 생성한 hello-world 프로젝트도 보입니다.</p><br><br><h2 id="백업-파일-확인"><a href="#백업-파일-확인" class="headerlink" title="백업 파일 확인"></a>백업 파일 확인</h2><p>저는 docker-compose.yml에 volumes를 이용해 backups 폴더를 지정해놓았습니다.<br>이부분에 대해 이해가 안되는 분들은 <a href="https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/">Docker를 이용해 GitLab을 설치해보자</a>를 참고해주세요</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups'</span><br></pre></td></tr></table></figure><p>backups 폴더로 이동해 백업 데이터가 잘 생성되었는지 확인해봅니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> backups</span></span><br><span class="line">backups % ls</span><br><span class="line">1591235174_2020_06_04_13.0.3_gitlab_backup.tar</span><br><span class="line">backups %</span><br></pre></td></tr></table></figure><br><br><h2 id="GitLab-컨테이너-중지"><a href="#GitLab-컨테이너-중지" class="headerlink" title="GitLab 컨테이너 중지"></a>GitLab 컨테이너 중지</h2><p>백업 파일이 정상적으로 생성되었다면 실행중인 컨테이너를 종료합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker stop gitlab</span></span><br></pre></td></tr></table></figure><br><br><h2 id="백업-파일-임시이동"><a href="#백업-파일-임시이동" class="headerlink" title="백업 파일 임시이동"></a>백업 파일 임시이동</h2><p>백업파일을 임시적으로 이동시킵니다.<br>저는 하나 상위 폴더인 gitlab 폴더로 이동시켰습니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backups % mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ../</span><br></pre></td></tr></table></figure><br><br><h2 id="데이터-파일-삭제"><a href="#데이터-파일-삭제" class="headerlink" title="데이터 파일 삭제"></a>데이터 파일 삭제</h2><blockquote><p>주의!! 아래의 명령어는 모든 데이터를 삭제합니다.</p></blockquote><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">backups % cd ..</span><br><span class="line"><span class="meta">%</span><span class="bash"> rm -rf config backups data logs</span></span><br></pre></td></tr></table></figure><br><br><h2 id="GitLab-컨테이너-실행"><a href="#GitLab-컨테이너-실행" class="headerlink" title="GitLab 컨테이너 실행"></a>GitLab 컨테이너 실행</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span> // Linux의 경우 /src</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure><br><br><h2 id="백업-파일-backups-폴더로-복구"><a href="#백업-파일-backups-폴더로-복구" class="headerlink" title="백업 파일 backups 폴더로 복구"></a>백업 파일 backups 폴더로 복구</h2><p>docker ps 명령어를 이용해 gitlab 컨테이너가 정상적으로 실행됐다면<br>gitlab 폴더로 임시 이동시켰던 백업파일을 다시 backups 폴더로 이동시킵니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar backups</span></span><br></pre></td></tr></table></figure><br><br><h2 id="복구-시작"><a href="#복구-시작" class="headerlink" title="복구 시작"></a>복구 시작</h2><p>복구 실행 명령어를 실행합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker <span class="built_in">exec</span> -it gitlab gitlab-backup restore</span></span><br><span class="line">Unpacking backup ... done</span><br><span class="line">Before restoring the database, we will remove all existing</span><br><span class="line">tables to avoid future upgrade problems. Be aware that if you have</span><br><span class="line">custom tables in the GitLab database these tables and all data will be</span><br><span class="line">removed.</span><br><span class="line"></span><br><span class="line">Do you want to continue (yes/no)? yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-06-04 01:59:16 +0000 -- done</span><br><span class="line">2020-06-04 01:59:16 +0000 -- Restoring repositories ...</span><br><span class="line">* devsawd/hello-world ... [DONE]</span><br><span class="line">2020-06-04 01:59:16 +0000 -- done</span><br><span class="line">2020-06-04 01:59:16 +0000 -- Restoring uploads ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring builds ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring artifacts ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring pages ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring lfs objects ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">This task will now rebuild the authorized_keys file.</span><br><span class="line">You will lose any data stored in the authorized_keys file.</span><br><span class="line">Do you want to continue (yes/no)? yes</span><br><span class="line"></span><br><span class="line">Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data</span><br><span class="line">and are not included in this backup. You will need to restore these files manually.</span><br><span class="line">Restore task is done.</span><br></pre></td></tr></table></figure><p>devsawd/hello-world 프로젝트도 복구되었다는 로그가 보입니다.</p><br><br><h2 id="로그인-후-확인"><a href="#로그인-후-확인" class="headerlink" title="로그인 후 확인"></a>로그인 후 확인</h2><img src="/2020/06/04/GitLab-backup-and-restore/1.png" class=""><p>root, devsawd 계정도 잘 살아있고 프로젝트도 정상적으로 복구되었습니다!</p><br><br><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>명령어 몇번과 tar 복구파일 하나만으로 GitLab의 데이터들을 복구할 수 있었습니다.<br>일정 기간을 가지고 스냅샷을 찍듯 데이터를 백업하는 방법도 있는데…<br><del>~ 언제 하지? ~</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gitlab_logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.&lt;br&gt;어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;뭔가 3부작 느낌인데..&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>[GitLab] 개인 저장소 연동 테스트</title>
    <link href="https://dev-sawd.github.io/2020/06/03/GitLab-create-personal-repository/"/>
    <id>https://dev-sawd.github.io/2020/06/03/GitLab-create-personal-repository/</id>
    <published>2020-06-03T11:44:56.000Z</published>
    <updated>2022-02-03T19:19:07.299Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gitlab_logo.jpg" alt=""></p><p>지난 포스트 <a href="https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/">Docker를 이용해 GitLab을 설치해보자</a>로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.<br>이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요.</p> <a id="more"></a><br><h2 id="저장소-생성"><a href="#저장소-생성" class="headerlink" title="저장소 생성"></a>저장소 생성</h2><img src="/2020/06/03/GitLab-create-personal-repository/1.png" class=""><p>GitLab에 로그인 후 [Create a project]를 클릭합니다.</p><br><br><img src="/2020/06/03/GitLab-create-personal-repository/2.png" class=""><p>프로젝트 이름을 적고 생성을 눌러줍니다.</p><br><br><img src="/2020/06/03/GitLab-create-personal-repository/3.png" class=""><p>정상적으로 생성되었네요.<br>빨간 박스를 참고해 아래의 스텝에서 저장소를 복제하도록 합니다.</p><br><br><h2 id="저장소-복제"><a href="#저장소-복제" class="headerlink" title="저장소 복제"></a>저장소 복제</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> %</span><span class="bash"> git <span class="built_in">clone</span> http://xxx.xxx.xxx.xxx/devsawd/hello-world.git</span></span><br><span class="line"></span><br><span class="line">Cloning into 'hello-world'...</span><br><span class="line">Username for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.com</span><br><span class="line">Password for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line"><span class="meta"> %</span><span class="bash"> <span class="built_in">cd</span> hello-world</span></span><br></pre></td></tr></table></figure><blockquote><p>빈 프로젝트를 복제한것이기 때문에 warning이 뜨니 가볍게 무시해줍니다.</p></blockquote><br><h2 id="README-md-파일-생성"><a href="#README-md-파일-생성" class="headerlink" title="README.md 파일 생성"></a>README.md 파일 생성</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> touch README.md</span></span><br></pre></td></tr></table></figure><br><h2 id="Commit-and-Push"><a href="#Commit-and-Push" class="headerlink" title="Commit and Push"></a>Commit and Push</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hello-world % git add README.md</span><br><span class="line">hello-world % git commit -m "add README"</span><br><span class="line">[master (root-commit) 204db60] add README</span><br><span class="line">1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">hello-world % git push -u origin master</span><br><span class="line">Username for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.com</span><br><span class="line">Password for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 212 bytes | 212.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To http://xxx.xxx.xxx.xxx/devsawd/hello-world.git</span><br><span class="line">* [new branch]      master -&gt; master</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'origin'.</span><br></pre></td></tr></table></figure><br><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/06/03/GitLab-create-personal-repository/4.png" class=""><p>정상적으로 파일이 올라간것이 보입니다!<br>이제 집 밖의 어디에서든 개인 GitLab에 접근해서 사용할 수 있게 되었습니다.</p><p>다음에는 이 hello-world 프로젝트를 백업하고 GitLab Docker를 삭제하고 재구동했을때 복구가 되는지 확인해볼거예요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gitlab_logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 포스트 &lt;a href=&quot;https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/&quot;&gt;Docker를 이용해 GitLab을 설치해보자&lt;/a&gt;로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.&lt;br&gt;이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요.&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>[Gitlab] Docker를 이용해 GitLab을 설치해보자</title>
    <link href="https://dev-sawd.github.io/2020/05/30/GitLab-gitlab-with-docker/"/>
    <id>https://dev-sawd.github.io/2020/05/30/GitLab-gitlab-with-docker/</id>
    <published>2020-05-30T10:37:43.000Z</published>
    <updated>2022-02-04T04:59:11.430Z</updated>
    
    <content type="html"><![CDATA[<br>당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다.그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다.그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다.<a id="more"></a><p>GitLab은 위키와 이슈 추적 기능을 갖춘 웹 기반의 데브옵스 시스템입니다.<br>흔히 우리가 일고있는 Git 저장소로 많이 쓰이는 솔루션중 하나입니다.<br>과거 GitHub에서는 지원하지 않던 Private 저장소를 지원했기에 인기가 많았지만, 최근 GitHub에서도 Private를 지원하고 있어 이슈 추적 기능을 제외하면 기본기능에서는 많이 흡사합니다.<br>개인적인 선호는 GitHub이 단연 마음에 들지만 서두에 적은것 처럼 내부적으로 운영할 수 있도록 설치를 지원하는 GitLab에 정말 감사하고있습니다.</p><blockquote><p>내가 직접 저장소를 운영할 수 있다니.. 벌써부터 재밌네요. GitLab 만세!</p></blockquote><br><h1 id="설치-환경"><a href="#설치-환경" class="headerlink" title="설치 환경"></a>설치 환경</h1><p>GitLab은 Ubuntu, Debian, CentOS 8 심지어 Rasberry Pi2의 OS를 지원합니다.<br>클라우드도 AWS와 GCP는 물론 MS의 Azure까지..<br>설치 방법으로는 Docker와 소스를 통한 설치등 많은 환경을 지원합니다.</p><blockquote><p>이정도면 깃랩이 아니라 갓랩 아닙니까?</p></blockquote><p>저는 이 중에서 공식적으로 지원하지는 않지만 MacOS에 Docker를 이용해 공부용 맥북에 세팅해보려 합니다.</p><blockquote><p>Docker…. 또커…</p></blockquote><p>GitLab은 커뮤니티 버전(CE)과 엔터프라이즈 버전(EE)이 있는데 저는 커뮤니티 버전의 도커 이미지를 사용해 설치할겁니다.</p><p>Docker 이미지 설치 및 운영 방법은 크게 세가지로 아래와 같습니다.</p><ul><li>Docker Engine</li><li>Docker Compose</li><li>Docker Swwarm mode</li></ul><p>저는 이 중 Docker Compose를 이용해 설치 할겁니다.<br>설명이 장황하고 어려워 보이지만 막상 설치 스텝은 얼마 되지 않습니다.<br>곧 직접 설치한 GitLab에 접속할 수 있을겁니다. :)</p><br><h2 id="선수-조건"><a href="#선수-조건" class="headerlink" title="선수 조건"></a>선수 조건</h2><p>Docker Compose를 이용해 설치할 것이기 때문에 Docker와 Docker Compose가 설치되어 있어야 합니다.<br><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">Docker 설치 링크</a><br><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose 설치 가이드 링크</a></p><br><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><h2 id="docker-compose-yml-작성"><a href="#docker-compose-yml-작성" class="headerlink" title="docker-compose.yml 작성"></a>docker-compose.yml 작성</h2><p>저는 gitlab이라는 폴더를 만들어 이곳에서 GitLab의 데이터와 백업등 모든것을 관리할 겁니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir gitlab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gitlab</span></span><br></pre></td></tr></table></figure><p>gitlab 폴더 안에서 docker-compose.yml를 작성해 사용할 docker 이미지와 gitlab 운영에 관련된 환경세팅을 설정할 것입니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi docker-compose.yml</span></span><br></pre></td></tr></table></figure><p>docker-compose.yml 내용</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: 'gitlab/gitlab-ce:latest'</span><br><span class="line"><span class="meta">  #</span><span class="bash"> restart: always</span></span><br><span class="line">  container_name: 'gitlab'</span><br><span class="line">  hostname: '127.0.0.1'</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url 'http://xxx.xxx.xxx.xxx' # 프로젝트 생성시 앞에 붙을 도메인 또는 IP</span><br><span class="line">      gitlab_rails['gitlab_shell_ssh_port'] = 2224</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - '80:80'</span><br><span class="line">    - '443:443'</span><br><span class="line">    - '10022:22' # port 충돌 방지로 외부 포트 10022를 docker 내부포트 22로 연결</span><br><span class="line">  volumes:</span><br><span class="line">    - '$GITLAB_HOME/gitlab/config:/etc/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/logs:/var/log/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/data:/var/opt/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups'</span><br></pre></td></tr></table></figure><p>간단히 설명하자면 최신 버전의 gitlab ce 이미지를 사용할 것이고 (지금은 주석이지만)오류로 인해 docker container가 내려갈 경우 다시 재시작할 수 있도록 설정했습니다.<br>호스트 이름은 로컬 호스트인 127.0.0.1, 프로젝트 생성시 외부 접속 가능한 도메인을 설정했습니다.<br>이외 ports는 외부 port와 docker container 내부 port를 매핑해주는 것이고 외부 22번 포트를 그냥 사용할 경우 ssh와 충돌이 일어나기 때문에 10022를 사용했습니다.<br>volumes는 실제 로컬 폴더와 docker container 내부의 폴더를 매핑해 주는 것으로 gitlab docker container에서 만들어진 데이터나 파일들을 로컬에서 접근할 수 있게, 또는 반대로도 가능하도록 연결해줍니다.</p><br><h2 id="docker-compose-실행"><a href="#docker-compose-실행" class="headerlink" title="docker compose 실행"></a>docker compose 실행</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span> // Linux의 경우 /src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure><br><h2 id="정상-실행-확인"><a href="#정상-실행-확인" class="headerlink" title="정상 실행 확인"></a>정상 실행 확인</h2><p>GitLab 이미지가 다운되고 done이라고 로그는 찍혀있지만 실제 내부가 완전히 구동되기 까지는 시간이 오래걸립니다.<br>제 구형 맥북 기준으로 7분정도가 소요되는것으로 확인됐습니다.</p><p>그래서 잘 구동되고 있는지 Docker 로그를 확인해야겠네요.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -f gitlab</span></span><br></pre></td></tr></table></figure><p>구동이 어느정도 진행되고 프로메테우스 또는 프로덕션 로그가 올라오면 구동에 성공했다고 볼 수 있습니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt; /var/log/gitlab/gitlab-rails/production.log &lt;==</span><br><span class="line">Started GET "/-/metrics" for 127.0.0.1 at 2020-05-30 05:56:55 +0000</span><br><span class="line">Processing by MetricsController#index as HTML</span><br><span class="line">Completed 200 OK in 13ms (Views: 1.4ms | ActiveRecord: 0.0ms | Elasticsearch: 0.0ms | Allocations: 710)</span><br><span class="line"></span><br><span class="line">==&gt; /var/log/gitlab/gitlab-rails/sidekiq_exporter.log &lt;==</span><br><span class="line">[2020-05-30T05:56:59.927+0000] 127.0.0.1 - - [30/May/2020:05:56:59 UTC] "GET /metrics HTTP/1.1" 200 9863 "-" "Prometheus/2.16.0"</span><br></pre></td></tr></table></figure><p>이제 컨트롤 + C를 눌러 로그에서 빠져 나옵니다.</p><p>docker ps 명령어로 현재 잘 구동되고있는지 확인해줍니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS                    PORTS                                                             NAMES</span><br><span class="line">ce25f2d0adad        gitlab/gitlab-ce:latest   "/assets/wrapper"   17 minutes ago      Up 17 minutes (healthy)   0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:10022-&gt;22/tcp   gitlab</span><br></pre></td></tr></table></figure><p>STATUS에 Up 타임과 healthy로 나온다면 축하드립니다.<br>구동에 성공했어요!</p><br><h2 id="설치한-GitLab-사이트-접속"><a href="#설치한-GitLab-사이트-접속" class="headerlink" title="설치한 GitLab 사이트 접속"></a>설치한 GitLab 사이트 접속</h2><p>이제 웹페이지로 접속 해 봅시다.<br>브라우저를 실행해 <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> 접속해 봅니다.</p><p>화면이 정상적으로 보인다면 root 비밀번호를 설정해야합니다.</p><p>sign in에서 root와 설정한 비밀번호로 로그인합니다.</p><p>관리자 계정으로 로그인 완료!!</p><br><h1 id="이외-설정"><a href="#이외-설정" class="headerlink" title="이외 설정"></a>이외 설정</h1><p>혼자 사용할 때는 회원가입 기능이 필요 없기 때문에 비활성화 시켜놓을 필요가 있습니다.</p><p>상단의 Admin Area 아이콘을 눌러 관리자 페이지에 들어갑니다.</p><p>좌측 메뉴 Settings &gt; General &gt; Sign-up restrictions &gt; Sign-up enabled 체크 해제 &gt; 하단 Save changes 클릭</p><br><h2 id="회원-가입-기능-비활성화"><a href="#회원-가입-기능-비활성화" class="headerlink" title="회원 가입 기능 비활성화"></a>회원 가입 기능 비활성화</h2><p>Admin Area 대쉬보드의 New user를 통해 회원가입을 시킬 수 있습니다.</p><br><h1 id="처음부터-다시-세팅"><a href="#처음부터-다시-세팅" class="headerlink" title="처음부터 다시 세팅"></a>처음부터 다시 세팅</h1><p>설치가 제대로 되지 않아 처음부터 다시 세팅하고 싶을 때가 있습니다.</p><p>현재 구동중인 GitLab 컨테이너 중지</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop gitlab</span></span><br></pre></td></tr></table></figure><p>GitLab 데이터 파일 삭제</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf config data logs</span></span><br></pre></td></tr></table></figure><p>백업 파일 삭제</p><blockquote><p>주의! 아래의 명령어는 백업 데이터를 모두 삭제합니다.</p></blockquote><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf backups</span></span><br></pre></td></tr></table></figure><p>세팅 변경 후 재 구동을 진행하면 됩니다.</p><br><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>실제로 운영하기에는 세부 설정을 더 만져야 하지만 처음부터 설치하는 분들에게 도움이 되었으면 좋겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;br&gt;
당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다.
그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다.
그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다.
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>[Data Structure] Linked List ADT</title>
    <link href="https://dev-sawd.github.io/2020/05/30/Data-Structure-linked-list-adt/"/>
    <id>https://dev-sawd.github.io/2020/05/30/Data-Structure-linked-list-adt/</id>
    <published>2020-05-29T16:52:17.000Z</published>
    <updated>2022-01-26T13:51:21.107Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.google.com/presentation/d/1H4IdZrSujjNVlii_uG_20FY5CyuCB07hSyaMGdr5rso/edit?usp=sharing" target="_blank" rel="noopener">원본자료</a></p><img src="/2020/05/30/Data-Structure-linked-list-adt/02.png" class=""><br><a id="more"></a><img src="/2020/05/30/Data-Structure-linked-list-adt/03.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/04.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/05.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/06.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/07.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/08.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/09.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/10.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/11.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/12.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/13.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/14.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/15.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/16.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/17.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/18.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/19.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/20.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/21.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/22.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/23.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/24.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/25.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/26.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/27.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/28.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/29.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/30.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/31.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/32.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/33.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/34.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/35.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/36.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/37.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/38.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/39.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/40.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/41.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/42.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/43.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/44.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/45.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/46.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/47.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/48.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/49.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/50.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/51.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/52.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/53.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/54.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/55.png" class=""><br><img src="/2020/05/30/Data-Structure-linked-list-adt/56.png" class=""><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1H4IdZrSujjNVlii_uG_20FY5CyuCB07hSyaMGdr5rso/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;원본자료&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/2020/05/30/Data-Structure-linked-list-adt/02.png&quot; class=&quot;&quot;&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://dev-sawd.github.io/categories/Data-Structure/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Hyperledger Fabric] 윈도우10에서 Docker를 이용한 fabric-samples 실행</title>
    <link href="https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/"/>
    <id>https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/</id>
    <published>2020-05-29T08:09:22.000Z</published>
    <updated>2022-02-03T19:14:49.217Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hyperledger_fabric_logo.png" alt=""></p><p>Windows10에 docker를 이용한 Hyperledger Fabric Samples를 구동하는 방법을 포스팅합니다.</p><a id="more"></a><h1 id="6개월-전에"><a href="#6개월-전에" class="headerlink" title="6개월 전에.."></a>6개월 전에..</h1><p>설치 시도했다가 오류로 인해 실패했습니다.. ㅜㅜ<br>현재 개발을 Windows에서 진행하고 있는데 체인코드 개발을 Fabric 네트워크가 설치된 장비에 FTP로 올리고 명령어로 실행하고..<br>오류 부분 확인해서 수정후 또 FTP로 올리고 명령어로 실행하고 이런 귀찮음을 방지하고 Windows에서 간단한 Fabric 네트워크를 구성하고 FTP로 올리는 귀찮음을 덜면 정말 좋겠다라고 생각했습니다.<br>6개월 전에 실패한 설치기를 다시 시도해보고 성공 결과를 올립니다.</p><br><br><h2 id="Docker-설치"><a href="#Docker-설치" class="headerlink" title="Docker 설치"></a>Docker 설치</h2><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/docker_logo.png" class="" width="200"><p><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a><br>windows stable 버전으로 다운로드합니다.<br>설치 진행중 [윈도우의 Hyper-V 기능 사용]에 체크 후 설치 합니다.</p><br><br><h2 id="Hyper-V-설정"><a href="#Hyper-V-설정" class="headerlink" title="Hyper-V 설정"></a>Hyper-V 설정</h2><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/hyper-v.png" class="" width="400"><p>제어판 &gt; Windows 기능 켜기/끄기 &gt;  Hyper-V 체크 &gt; 컴퓨터 재부팅</p><br><br><h2 id="Docker-실행"><a href="#Docker-실행" class="headerlink" title="Docker 실행"></a>Docker 실행</h2><p>설치한 Docker를 실행합니다.<br>이때 앞선 단계에서 Hyper-V를 설정했음에도 불구하고 Hyper-V를 사용할 수 없다는 팝업과 함께 Docker가 실행되지 않는다면 BIOS에서 가상화 기능이 켜져있는지 확인해야합니다.<br>가상화 기능 enable/disable는 메인보드 제조사마다 조금 상이하니 확인바랍니다.<br>Docker 실행에 성공하면 작업표시줄 트레이에 고래가 컨테이너를 싣고있는 아이콘 트레이가 생깁니다.</p><br><br><h2 id="Go언어-설치"><a href="#Go언어-설치" class="headerlink" title="Go언어 설치"></a>Go언어 설치</h2><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/golang_logo.png" class="" width="200"><p><a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a><br>1.14.3 버전을 설치했습니다.<br>큰 문제 없이 Next만 누르면 설치 가능합니다.</p><br><br><h3 id="GO-환경설정"><a href="#GO-환경설정" class="headerlink" title="GO 환경설정"></a>GO 환경설정</h3><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/env.png" class="" width="500"><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/env2.png" class="" width="500"><p>시작 &gt; 시스템 환경 변수 편집(검색하면 쉽게 찾을 수 있음) &gt; 하단의 환경변수 &gt; {사용자 이름}에 대한 사용자 변수 &gt; GOPATH 확인</p><p>GOPATH가 없다면 [새로만들기]를 이용해 추가합니다.<br>변수 : GOPATH<br>값 : C:\Users{사용자 이름}\go</p><blockquote><p>1.14.3을 설치하니 자동으로 등록이 돼있었습니다.</p></blockquote><br><br><h2 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h2><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/node.js_logo.png" class="" width="200"><p><a href="https://nodejs.org/ko/" target="_blank" rel="noopener">https://nodejs.org/ko/</a><br>12.17.0 LTS 버전을 설치했습니다.<br>마찬가지로 Next만 누르면 설치 가능합니다.</p><br><br><h2 id="Git-설치"><a href="#Git-설치" class="headerlink" title="Git 설치"></a>Git 설치</h2><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/git_logo.png" class="" width="200"><p><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a><br>Windows에서는 cmd(커맨드)창에서 명령어를 실행하는게 아닌 Git Bash를 이용해 아래의 명령어를 실행합니다.<br>따라서 Git Bash를 설치하기 위해 git을 설치합니다.<br>2.26.2 버전을 설치했고 옵션은 따로 건드리지 않고 기본옵션을 사용했습니다.</p><br><br><h3 id="git-환경설정"><a href="#git-환경설정" class="headerlink" title="git 환경설정"></a>git 환경설정</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global core.autocrlf <span class="literal">false</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global core.longpaths <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/git_env.png" class="" width="600"><p>Linux와 Windows의 개행문자와 긴 경로에 대한 설정인데 이해하지 않고 명령어 실행후 잘 설정되었는지 확인만 하고 넘어가도 무방합니다.</p><br><br><h3 id="컴퓨터-재부팅"><a href="#컴퓨터-재부팅" class="headerlink" title="컴퓨터 재부팅"></a>컴퓨터 재부팅</h3><p>설정들이 적용될 수 있도록 재부팅을 한번 합니다.</p><br><br><h2 id="Git-Bash-실행"><a href="#Git-Bash-실행" class="headerlink" title="Git Bash 실행"></a>Git Bash 실행</h2><p>시작 &gt; Git Bash &gt; 우클릭 &gt; 자세히 &gt; 관리자 권한으로 실행<br>아래의 순서들은 모두 Git Bash에서 실행합니다.<br><br><br><br></p><h3 id="windows-build-tools-설치"><a href="#windows-build-tools-설치" class="headerlink" title="windows-build-tools 설치"></a>windows-build-tools 설치</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --global windows-build-tools</span></span><br></pre></td></tr></table></figure><p>windows-build-tools를 설치합니다.</p><blockquote><p>이때 Successfully installed Python 2.7 이라는 메세지가 나오고 프로세스는 끝나지 않는데 강제종료했습니다.</p></blockquote><br><br><h3 id="grpc-설치"><a href="#grpc-설치" class="headerlink" title="grpc 설치"></a>grpc 설치</h3><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/grpc_logo.png" class="" width="200"><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --global grpc</span></span><br></pre></td></tr></table></figure><p>grpc를 설치합니다.</p><br><br><h2 id="fabric-samples-설치"><a href="#fabric-samples-설치" class="headerlink" title="fabric-samples 설치"></a>fabric-samples 설치</h2><br><br><br><img src="/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/fabric_logo.png" class="" width="300"><br><br><br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -sSL https://bit.ly/2ysbOFE | bash -s</span></span><br></pre></td></tr></table></figure><p>version을 명시하면 원하는 버전의 fabric을 받을 수 있습니다.</p><blockquote><p>curl -sSL <a href="https://bit.ly/2ysbOFE" target="_blank" rel="noopener">https://bit.ly/2ysbOFE</a> | bash -s 1.4.3</p></blockquote><br><br><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><p>설치가 완료되었으니 basic-network를 실행해봅시다</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> fabric-samples/basic-network</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./start.sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> don<span class="string">'t rewrite paths for Windows Git Bash users</span></span></span><br><span class="line">export MSYS_NO_PATHCONV=1</span><br><span class="line"></span><br><span class="line">docker-compose -f docker-compose.yml down</span><br><span class="line">Removing network net_basic</span><br><span class="line">Network net_basic not found.</span><br><span class="line"></span><br><span class="line">docker-compose -f docker-compose.yml up -d ca.example.com orderer.example.com peer0.org1.example.com couchdb</span><br><span class="line">Creating network "net_basic" with the default driver</span><br><span class="line">Creating couchdb             ... done</span><br><span class="line">Creating ca.example.com      ... done</span><br><span class="line">Creating orderer.example.com ... done</span><br><span class="line">Creating peer0.org1.example.com ... done</span><br><span class="line">docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                        COMMAND                  CREATED                  STATUS                  PORTS                                            NAMES</span><br><span class="line">2ca1a7ca4131        hyperledger/fabric-peer      "peer node start"        Less than a second ago   Up Less than a second   0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp   peer0.org1.example.com</span><br><span class="line">c3065525760f        hyperledger/fabric-orderer   "orderer"                2 seconds ago            Up 2 seconds            0.0.0.0:7050-&gt;7050/tcp                           orderer.example.com</span><br><span class="line">756f03161e5f        hyperledger/fabric-ca        "sh -c 'fabric-ca-se…"   10 seconds ago           Up 10 seconds           0.0.0.0:7054-&gt;7054/tcp                           ca.example.com</span><br><span class="line">e4dc3f6c1e35        hyperledger/fabric-couchdb   "tini -- /docker-ent…"   19 seconds ago           Up 19 seconds           4369/tcp, 9100/tcp, 0.0.0.0:5984-&gt;5984/tcp       couchdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">wait</span> <span class="keyword">for</span> Hyperledger Fabric to start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> incase of errors when running later commands, issue <span class="built_in">export</span> FABRIC_START_TIMEOUT=&lt;larger number&gt;</span></span><br><span class="line">export FABRIC_START_TIMEOUT=10</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$&#123;FABRIC_START_TIMEOUT&#125;</span></span></span><br><span class="line">sleep $&#123;FABRIC_START_TIMEOUT&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create the channel</span></span><br><span class="line">docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx</span><br><span class="line">2020-05-30 00:28:15.276 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-05-30 00:28:15.300 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> Join peer0.org1.example.com to the channel.</span></span><br><span class="line">docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel join -b mychannel.block</span><br><span class="line">2020-05-30 00:28:15.621 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized</span><br><span class="line">2020-05-30 00:28:15.723 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel</span><br></pre></td></tr></table></figure><p>채널 조인까지 완료되는 것을 볼 수 있습니다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>정리하고 보니 생각보다 이것저것 설치해야 할 것들이 많네요.<br>확실한건 Mac이나 Linux가 개발자들에게는 이런 불편함들을 어느정도 해소해줄 수 있는 OS이지 않을까 싶습니다.<br>이 포스트는 정말 Windows에서 환경구축이 필요해 임시적으로 쓰는 분들에게는 도움이 될 수 있을것 같습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hyperledger_fabric_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Windows10에 docker를 이용한 Hyperledger Fabric Samples를 구동하는 방법을 포스팅합니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hyperledger Fabric" scheme="https://dev-sawd.github.io/categories/Hyperledger-Fabric/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Windows" scheme="https://dev-sawd.github.io/tags/Windows/"/>
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>[Hyperledger Fabric] fabric 버전을 확인하는 방법</title>
    <link href="https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-how-to-check-fabric-version/"/>
    <id>https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-how-to-check-fabric-version/</id>
    <published>2020-05-29T01:36:27.000Z</published>
    <updated>2022-01-26T13:51:21.102Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hyperledger_fabric_logo.png" alt=""></p><p>지난번 포스트에서 Windows10에 docker와 hyperledger fabric samples 실행을 성공했다고 언급한적이 있습니다.<br>그리고는 제대로 테스트하기 위해서 제 github에 올라가있는 <a href="https://github.com/dev-sawd/hyperledger-fabric-basic-network" target="_blank" rel="noopener">basic-netowrk</a>를 다운받아 실행했습니다.<br>항상 공부용 맥북에서만 개발,테스트 후 원격 저장소에 푸쉬했기 때문에 Windows에서도 문제없이 돌아갈지 궁금했거든요.</p><a id="more"></a><p>start.sh로 실행했는데.. 시작부터 에러가 발생합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./start.sh</span></span><br><span class="line">org1.example.com</span><br><span class="line">2020-05-29 11:56:21.048 KST [common.tools.configtxgen] main -&gt; FATA 001 Missing channelID, please specify it with '-channelID'</span><br><span class="line">2020-05-29 11:56:21.116 KST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-05-29 11:56:21.142 KST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: C:\Users\KimYongTaek\hyperledger-fabric-basic-network\configtx.yaml</span><br><span class="line">2020-05-29 11:56:21.142 KST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx</span><br><span class="line">2020-05-29 11:56:21.142 KST [common.tools.configtxgen] main -&gt; FATA 004 Error on outputChannelCreateTx: could not generate default config template: error parsing configuration: error adding policies to channel group: no policies defined</span><br><span class="line">2020-05-29 11:56:21.189 KST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration</span><br><span class="line">2020-05-29 11:56:21.225 KST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: C:\Users\KimYongTaek\hyperledger-fabric-basic-network\configtx.yaml</span><br><span class="line">2020-05-29 11:56:21.225 KST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 003 Generating anchor peer update</span><br><span class="line">2020-05-29 11:56:21.225 KST [common.tools.configtxgen] main -&gt; FATA 004 Error on inspectChannelCreateTx: error parsing profile as ch</span><br></pre></td></tr></table></figure><blockquote><p>그럼 그렇지.. 쉽게 될리가..</p></blockquote><p>에러 로그는 configtxgen을 실행하면서 <code>-channelID</code> 인자를 넣어주지 않아서 생기는 문제였습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile OneOrgOrdererGenesis -outputBlock .&#x2F;config&#x2F;genesis.block</span><br></pre></td></tr></table></figure><p>configtxgen 명령어를 뚫어져라 쳐다보고있는데..</p><blockquote><p>어? 이상하다..</p></blockquote><p>configtxgen의 위치를 찾아보니 최신 버전으로 설치한 fabric-samples/bin안에 있는 파일을 참조하고 있었습니다.<br>최신 fabric 버전과 구버전 실행 스크립트간의 버전 불일치로 발생한 문제로 보입니다.<br>맥북의 fabric-samples는 5개월 전쯤에 1.4버전대로 설치한것으로 기억합니다.</p><p>설치한 fabric의 버전을 알기 위해 맥북(MacOs)과 데스크탑(Windows)의 cryptogen의 version을 확인해봅니다.</p><p>MacOs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% cd fabric-samples&#x2F;bin</span><br><span class="line">bin % .&#x2F;cryptogen version</span><br><span class="line">cryptogen:</span><br><span class="line"> Version: 1.4.3</span><br><span class="line"> Commit SHA: b8c4a6a</span><br><span class="line"> Go version: go1.11.5</span><br><span class="line"> OS&#x2F;Arch: darwin&#x2F;amd64</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd fabric-samples&#x2F;bin</span><br><span class="line">$ cryptogen version</span><br><span class="line">cryptogen:</span><br><span class="line"> Version: 2.1.0</span><br><span class="line"> Commit SHA: 1bdf97537</span><br><span class="line"> Go version: go1.14.1</span><br><span class="line"> OS&#x2F;Arch: windows&#x2F;amd64</span><br></pre></td></tr></table></figure><p>역시 예상한 대로 버전이 상이합니다.</p><p>Windows에 깔려있는 fabric-samples를 1.4.3버전으로 재설치 후 다시 실행해보니 정상 작동합니다.</p><blockquote><p>야호!</p></blockquote><p>이제 basic-network의 fabric-samples/bin 폴더의 의존성을 끊기 위해 1.4.3버전의 bin 폴더를 basic-network안에 복사해 넣고<br>start.sh의 bin폴더 경로를 방금 복사한 1.4.3 버전의 bin 폴더로 지정했습니다.<br>앞으로 다른 환경에서도 잘 동작할겁니다 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hyperledger_fabric_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난번 포스트에서 Windows10에 docker와 hyperledger fabric samples 실행을 성공했다고 언급한적이 있습니다.&lt;br&gt;그리고는 제대로 테스트하기 위해서 제 github에 올라가있는 &lt;a href=&quot;https://github.com/dev-sawd/hyperledger-fabric-basic-network&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;basic-netowrk&lt;/a&gt;를 다운받아 실행했습니다.&lt;br&gt;항상 공부용 맥북에서만 개발,테스트 후 원격 저장소에 푸쉬했기 때문에 Windows에서도 문제없이 돌아갈지 궁금했거든요.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hyperledger Fabric" scheme="https://dev-sawd.github.io/categories/Hyperledger-Fabric/"/>
    
    
  </entry>
  
  <entry>
    <title>[ETC] URL, URI</title>
    <link href="https://dev-sawd.github.io/2020/05/27/ETC-URL-URI/"/>
    <id>https://dev-sawd.github.io/2020/05/27/ETC-URL-URI/</id>
    <published>2020-05-27T05:20:28.000Z</published>
    <updated>2022-01-26T13:51:21.101Z</updated>
    
    <content type="html"><![CDATA[<p>개발을 하다보면, 개발자들끼리 얘기 하다보면 URL이 자주 등장합니다.<br>그리고 문서나 stackoverflow를 이용하다 보면 URI라는 단어도 심심치 않게 보입니다.<br>아직까지 정확히 URL과 URI에 대해 차이점을 명확히 모르는 관계로 정리해보려 합니다.</p><a id="more"></a><h1 id="URL-Uniform-Resource-Locator"><a href="#URL-Uniform-Resource-Locator" class="headerlink" title="URL : Uniform Resource Locator"></a>URL : Uniform Resource Locator</h1><blockquote><p>ex. <a href="http://github.com/" target="_blank" rel="noopener">http://github.com/</a></p></blockquote><h1 id="URI-Uniform-Resource-Identifier"><a href="#URI-Uniform-Resource-Identifier" class="headerlink" title="URI : Uniform Resource Identifier"></a>URI : Uniform Resource Identifier</h1><p>URL 이하의 식별자까지 포함</p><blockquote><p>ex. <a href="http://github.com/devsawd" target="_blank" rel="noopener">http://github.com/devsawd</a><br>ex. <a href="http://github.com/test" target="_blank" rel="noopener">http://github.com/test</a></p></blockquote><p>URI 예시인 <a href="http://github.com/devsawd" target="_blank" rel="noopener">http://github.com/devsawd</a> 와 <a href="http://github.com/test" target="_blank" rel="noopener">http://github.com/test</a> 를 보면<br>URL은 <a href="http://github.com/" target="_blank" rel="noopener">http://github.com/</a> 으로 같고<br>URI는 각각 <a href="http://github.com/devsawd" target="_blank" rel="noopener">http://github.com/devsawd</a>, <a href="http://github.com/test" target="_blank" rel="noopener">http://github.com/test</a> 이 됩니다.</p><h1 id="현실은"><a href="#현실은" class="headerlink" title="현실은"></a>현실은</h1><p>??? : 주소 줘봐<br>!!! : <a href="http://github.com/devsawd" target="_blank" rel="noopener">http://github.com/devsawd</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개발을 하다보면, 개발자들끼리 얘기 하다보면 URL이 자주 등장합니다.&lt;br&gt;그리고 문서나 stackoverflow를 이용하다 보면 URI라는 단어도 심심치 않게 보입니다.&lt;br&gt;아직까지 정확히 URL과 URI에 대해 차이점을 명확히 모르는 관계로 정리해보려 합니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[ETC] address already in use error</title>
    <link href="https://dev-sawd.github.io/2020/05/26/ETC-address-already-in-use-error/"/>
    <id>https://dev-sawd.github.io/2020/05/26/ETC-address-already-in-use-error/</id>
    <published>2020-05-26T07:48:51.000Z</published>
    <updated>2022-02-03T19:17:50.595Z</updated>
    
    <content type="html"><![CDATA[<p>포스트 작성을 위해 hexo server로 프로세스로 돌고있던 터미널을 강제로 종료했습니다.<br>이후 hexo server를 실행하려 하는데 <code>address already in use</code> 에러가 발생했습니다.</p><p>간단히 이 에러를 해결해봅시다.</p><a id="more"></a><p>에러 전문은 아래와 같습니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> hexo server</span></span><br><span class="line">AL Port 4000 has been used. Try other port instead.</span><br><span class="line">FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: listen EADDRINUSE: address already in use :::4000</span><br><span class="line">    at Server.setupListenHandle [as _listen2] (net.js:1309:16)</span><br><span class="line">    at listenInCluster (net.js:1357:12)</span><br><span class="line">    at Server.listen (net.js:1445:7)</span><br><span class="line">    at /Users/devsawd/blog/node_modules/hexo-server/lib/server.js:69:12</span><br><span class="line">    at Promise._execute (/Users/devsawd/blog/node_modules/bluebird/js/release/debuggability.js:384:9)</span><br><span class="line">    at Promise._resolveFromExecutor (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:518:18)</span><br><span class="line">    at new Promise (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:103:10)</span><br><span class="line">    at checkPort (/Users/devsawd/blog/node_modules/hexo-server/lib/server.js:66:10)</span><br><span class="line">    at Hexo.module.exports (/Users/devsawd/blog/node_modules/hexo-server/lib/server.js:18:10)</span><br><span class="line">    at Hexo.tryCatcher (/Users/devsawd/blog/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (/Users/devsawd/blog/node_modules/bluebird/js/release/method.js:15:34)</span><br><span class="line">    at /Users/devsawd/blog/node_modules/hexo/lib/hexo/index.js:248:17</span><br><span class="line">    at Promise._execute (/Users/devsawd/blog/node_modules/bluebird/js/release/debuggability.js:384:9)</span><br><span class="line">    at Promise._resolveFromExecutor (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:518:18)</span><br><span class="line">    at new Promise (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:103:10)</span><br><span class="line">    at Hexo.call (/Users/devsawd/blog/node_modules/hexo/lib/hexo/index.js:244:12)</span><br><span class="line">    at /usr/local/lib/node_modules/hexo-cli/lib/hexo.js:67:17</span><br><span class="line">    at tryCatcher (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:729:18)</span><br></pre></td></tr></table></figure><p>에러 내용은 4000번 포트가 이미 사용되고 있다는겁니다.<br>4000번 포트를 사용중인 프로세스를 먼저 찾아봐야겠네요.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> lsof -i :4000</span></span><br><span class="line">COMMAND   PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    43609 devsawd   42u  IPv6 0x1a23ef236800be15      0t0  TCP *:terabase (LISTEN)</span><br></pre></td></tr></table></figure><p>PID의 43609번이 사용중으로 확인됩니다.<br>kill 명령어로 해당 프로세스를 종료시킨 후</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">  <span class="built_in">kill</span> -9 43609</span></span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">  hexo server</span></span><br></pre></td></tr></table></figure><p>hexo server 명령어를 이용해 재구동 하니 정상적으로 사용할 수 있습니다.</p><p><code>address already in use</code>에러는 port를 사용하는 프로세스를 다룰때 자주 볼 수 있는 에러입니다.<br>간단히 해당 프로세스를 종료시켜 문제를 해결할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;포스트 작성을 위해 hexo server로 프로세스로 돌고있던 터미널을 강제로 종료했습니다.&lt;br&gt;이후 hexo server를 실행하려 하는데 &lt;code&gt;address already in use&lt;/code&gt; 에러가 발생했습니다.&lt;/p&gt;
&lt;p&gt;간단히 이 에러를 해결해봅시다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/categories/ETC/"/>
    
    
      <category term="HEXO" scheme="https://dev-sawd.github.io/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>[MacOS] 개발 공부를 위한 원격 개발환경 세팅</title>
    <link href="https://dev-sawd.github.io/2020/05/25/MacOS-remote-access-for-dev-study/"/>
    <id>https://dev-sawd.github.io/2020/05/25/MacOS-remote-access-for-dev-study/</id>
    <published>2020-05-25T12:05:52.000Z</published>
    <updated>2022-01-26T13:51:21.085Z</updated>
    
    <content type="html"><![CDATA[<p>10년 다된 구형 맥북을 보유하고 있습니다.<br>2년 전 부터 이걸 어떻게 활용하면 좋을지 꾸준히 고민했었죠.<br>메인으로 쓰기엔 성능이 떨어지고..<br>그냥 두기에는 뭔가 아까운..</p><blockquote><p>이 계륵뇨속!</p></blockquote><a id="more"></a><h1 id="전쟁의-서막"><a href="#전쟁의-서막" class="headerlink" title="전쟁의 서막"></a>전쟁의 서막</h1><p>최근에 블록체인 Hyperledger Fabric 네트워크를 공부하면서 개발용 장비가 있었으면 했습니다.<br><del>윈도우 노트북이 있긴 한데 무슨 이유에서인지 Hyperledger Fabric 개발 환경 구성이 잘 진행되지 않더라구요.</del></p><blockquote><p>윈도우10에서 개발환경 구성에 성공했습니다.<br>가이드도 시간내서 포스팅할게요!<br><a href="https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/">가이드 링크</a></p></blockquote><p>물론 회사에 얘기해서 적절한 개발용 장비를 받아도 됐지만..<br>마음대로 사용할 수 없는게 조금 답답합니다.<br>퇴근때는 꺼놔야 했고, 뭔가 이리 저리 만질 수 없다는 단점이 있었습니다.</p><p>이때 생각난 것이 10년된 맥북.<br>공부용이기 때문에 성능이 좋을 필요도 없고 마음대로 변경할 수 있는게 아주 딱이였습니다.<br>이번에 구형 맥북을 공부용으로 써보고자 세팅한 이야기를 하려고 합니다.</p><h1 id="문제의-맥북"><a href="#문제의-맥북" class="headerlink" title="문제의 맥북"></a>문제의 맥북</h1><p>먼저 10년된 구형 맥북의 사진.</p><img src="/2020/05/25/MacOS-remote-access-for-dev-study/1.jpg" class=""><p>두께가 어마어마한 만큼 무게도 상당합니다.<br>따라서 들고다니기에는 무리가 있어 어느 자리에 위치시켜 놓고 원격으로 접속하는게 좋을 것 같다는 생각이 들었습니다.<br>제 방에 와이파이에서 멀지 않은 넓은 공간에 위치 시키고 충전 케이블을 항상 꽂아두었습니다.</p><h1 id="우리집-네트워크-구성도"><a href="#우리집-네트워크-구성도" class="headerlink" title="우리집 네트워크 구성도"></a>우리집 네트워크 구성도</h1><p>이제 네트워크를 설정해야 하는데 우리집은 기본적으로 개발자가 두명에 사용하는 기기도 엄청 많아 고민해야 했습니다.</p><img src="/2020/05/25/MacOS-remote-access-for-dev-study/1.png" class=""><p>먼저 외부에서 <code>유선 공유기(1)</code>로 네트워크가 들어옵니다.<br>이 <code>유선 공유기(1)</code>에서 제방, 동생 방의 <code>유무선 공유기(2, 3)</code>로 각각 들어갑니다.<br>제 방의 <code>유무선 공유기(2)</code>는 유선으로 데스크탑, 무선으로 구형 맥북에 연결될 예정이였습니다.<br>동생 방의 <code>유무선 공유기(3)</code>에서는 다시 안방으로 선이 들어가고, 안방에서는 거실로…(사실 여기까지 고민할 필요는 없어 보이지만..)</p><h1 id="포트포워딩-설정"><a href="#포트포워딩-설정" class="headerlink" title="포트포워딩 설정"></a>포트포워딩 설정</h1><p>위에서 얘기한 것과 같이 공유기를 2번 거쳐서 맥북에 들어오는 상황입니다.<br>따라서 포트포워딩을 <code>유선 공유기(1)</code>, <code>유무선 공유기(2)</code>에 각각 설정해줘야 했습니다.</p><h2 id="맥북-원격-접속-허용"><a href="#맥북-원격-접속-허용" class="headerlink" title="맥북 원격 접속 허용"></a>맥북 원격 접속 허용</h2><h2 id="IP-확인"><a href="#IP-확인" class="headerlink" title="IP 확인"></a>IP 확인</h2><img src="/2020/05/25/MacOS-remote-access-for-dev-study/2.png" class=""><p>먼저 <code>유선 공유기(1)</code>에 접속해서 외부 인터넷에 연결될때 사용되는 IP를 확인했습니다.<br><code>11.11.11.11(가칭)</code>으로 확인 되었고 한번 더 확인하기 위해 <code>유선 공유기(1)</code>에 데스크탑을 연결해서 IP를 확인하는 사이트에 들어가서 크로스체크했습니다.<br>그리고 <code>유무선 공유기(2)</code>에 접속해서 <code>유선 공유기(1)</code>로부터 할당받은 IP를 확인했습니다.<br><code>22.22.22.22(가칭)</code>으로 확인 되었습니다.<br>그리고 <code>유무선 공유기(2)</code>에 무선으로 연결된 맥북의 IP도 확인했습니다.<br><code>33.33.33.33(가칭)</code>으로 확인 되었습니다.</p><p>제가 사용할 포트는 SSH로 22번 포트에 해당합니다.<br>따라서 간단히 외부에서도 22번 포트로 접속하고 22번 포트로 포트포워딩을 설정했습니다.<br>(물론외부에서 다른 포트로 연결하고 포트포워딩을 그에 맞도록 설정한다면 22번포트 외에 다른 번호도 가능합니다.)</p><img src="/2020/05/25/MacOS-remote-access-for-dev-study/3.png" class=""><p>순서는 아래와 같을것입니다.</p><ol><li>외부에서 <code>11.11.11.11:22</code>로 접속</li><li><code>유선 공유기(1)</code>에서 22번 포트에 대한 장치(<code>유무선 공유기(2)</code>)로 포트포워딩</li><li><code>유무선 공유기(2)</code>에서 22번 포트에 대한 장치(맥북)로 포트포워딩</li><li>맥북의 22번 포트 사용</li></ol><h2 id="포트포워딩"><a href="#포트포워딩" class="headerlink" title="포트포워딩"></a>포트포워딩</h2><p>위의 2, 3번에 대한 포트포워딩 설정을 해야합니다.<br><code>유선 공유기(1)</code>에 접속해서 포트포워딩 설정 페이지로 이동 후<br>외부 연결 포트 <code>22</code>를 내부 IP <code>22.22.22.22</code>와 포트 <code>22</code>로 설정해줍니다.<br><code>유무선 공유기(2)</code>에 접속해서 포트포워딩 설정 페이지로 이동 후<br>외부 연결 포트 <code>22</code>를 내부 IP <code>33.33.33.33</code>와 포트 <code>22</code>로 설정해줍니다.</p><h1 id="확인"><a href="#확인" class="headerlink" title="확인"></a>확인</h1><p>이제 외부 네트워크에 연결되어있는 PC를 이용해 putty나 ssh로 <code>11.11.11.11:22</code>로 접속을 확인해봅니다.<br>이때 외부 네트워크를 만들기 힘들다면 테더링을 이용하거나 카페에서 차 한잔의 여유..읍읍..<br><del>이시국에</del></p><p>만약 확인 작업에서 접속이 되지 않는다면 ISP 외부포트가 완전히 막혀있거나 집으로 들어오는 첫번째 공유기가 알고있는것과 다른 녀석이 존재할 수 있습니다.</p><p><a href="https://www.yougetsignal.com/tools/open-ports/" target="_blank" rel="noopener">포트 체커</a> 사이트를 이용해 22번포트가 열려있는지, 또는 자주 사용하는 다른 포트들이 열려있는지 같이 확인해주면 빨리 찾을 수 있습니다.</p><p>저는 집의 데스크탑으로도 맥북에 연결해서 작업 하는데요<br>실질적으로 구형 맥북은 화면도 작고 듀얼모니터로 사용할 케이블도 분실했고.. 이런저런 답답함이 있기 때문입니다.<br>데스크탑은 <code>유무선공유기(2)</code>에 유선으로 연결되어있습니다.<br>같은 네트워크에 있기 때문에 <code>11.11.11.11:22</code>로 접속하지 않아도 <code>33.33.33.33:22</code>를 이용해 맥북에 접속할 수 있습니다.</p><img src="/2020/05/25/MacOS-remote-access-for-dev-study/4.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10년 다된 구형 맥북을 보유하고 있습니다.&lt;br&gt;2년 전 부터 이걸 어떻게 활용하면 좋을지 꾸준히 고민했었죠.&lt;br&gt;메인으로 쓰기엔 성능이 떨어지고..&lt;br&gt;그냥 두기에는 뭔가 아까운..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 계륵뇨속!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://dev-sawd.github.io/categories/MacOS/"/>
    
    
      <category term="ETC" scheme="https://dev-sawd.github.io/tags/ETC/"/>
    
  </entry>
  
</feed>
