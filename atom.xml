<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SAWD</title>
  
  <subtitle>NOT CODER BUT S.W DEVELOPER</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dev-sawd.github.io/"/>
  <updated>2022-03-08T04:49:01.585Z</updated>
  <id>https://dev-sawd.github.io/</id>
  
  <author>
    <name>SAWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[React] 혼자 만들어본 채팅 앱</title>
    <link href="https://dev-sawd.github.io/2022/03/08/React-chatting-web/"/>
    <id>https://dev-sawd.github.io/2022/03/08/React-chatting-web/</id>
    <published>2022-03-07T15:41:19.000Z</published>
    <updated>2022-03-08T04:49:01.585Z</updated>
    
    <content type="html"><![CDATA[<p>개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..</p><h1 id="이제-뭘하지"><a href="#이제-뭘하지" class="headerlink" title="이제 뭘하지?"></a>이제 뭘하지?</h1><p>뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.</p><p>그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…</p><br><h1 id="소켓을-이용한-무언가를-해보고싶어"><a href="#소켓을-이용한-무언가를-해보고싶어" class="headerlink" title="소켓을 이용한 무언가를 해보고싶어."></a>소켓을 이용한 무언가를 해보고싶어.</h1><p>소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.</p><p>당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.</p><blockquote><p><strong>소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.</strong></p></blockquote><br><h1 id="뭘-이용해서-만들까"><a href="#뭘-이용해서-만들까" class="headerlink" title="뭘 이용해서 만들까?"></a>뭘 이용해서 만들까?</h1><p>최근에 만든 사이트는 프론트를 React, 백엔드를 Node.js, DB를 MySQL로 만들었다.</p><p>하지만 너무 겉핥기 식이고 빠르게 만드는 것에 바쁜 나머지 너무 날로 먹은것 같은 느낌이 들었다.</p><br><h3 id="또-다시-React"><a href="#또-다시-React" class="headerlink" title="또 다시 React"></a>또 다시 React</h3><p>내가 처음 React를 공부했을때(아마.. 2007년? 2008년?) 그때는 클래스형 구조로 되어있었다.</p><p>그리고 최근에 사이트를 만들었을 때 그때의 기억을 토대로 클래스형 구조로 만들고 사이트의 구조가 굳어갈때..</p><p>요즘 예제들은 함수형 구조로 된것이 많더라.</p><p>이 말은 뭔가 검색해도 함수형 구조를 이해하고 있지 않으면 빠르게 문제를 해결할 수 없다는 것과 같은 말이다.</p><p>결국은 클래스형 구조에서 함수형 구조로 다 뜯어 고치고 이 과정에서 생각보다 많은 시간을 잡아먹었다.</p><blockquote><p><strong>이번 채팅 앱은 처음부터 함수형 구조로 시작해야겠어.</strong></p></blockquote><br><h3 id="그리고-Node-js-서버"><a href="#그리고-Node-js-서버" class="headerlink" title="그리고 Node.js 서버"></a>그리고 Node.js 서버</h3><p>Javascript는 잘 못하는데, 그래도 Node.js로 서버개발을 해보니 의외로 간편하고 쉬웠다.</p><blockquote><p><strong>무엇보다 React도 Javascript니까.</strong></p></blockquote><br><h3 id="MUI"><a href="#MUI" class="headerlink" title="MUI"></a>MUI</h3><p>React UI library로 기본 UI보다 좀더 있어보이게 꾸밀 수 있다.</p><p>컴포넌트마다 예제는 너무 잘 돼있는데 조금 취향에 맞게 수정하려고 하려면 생각보다 쉽진않은 듯 하다.</p><a href="https://mui.com/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://mui.com/static/social-previews/default-preview.jpg"></img></div><div class="descriptions"><div class="og-title">MUI: The React component library you always wanted</div><div class="og-description">MUI provides a simple, customizable, and accessible library of React components. Follow your own design system, or start with Material Desig…</div></div></div></a><br><h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><p>소켓을 사용하기 위해서 검색중 socket.io를 이용하면 간편하게 개발할 수 있을것으로 보였다.</p><a href="https://socket.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Socket.IO</div></div></div></a><p>그리고 채팅 앱을 만드는 간단한 튜토리얼도 제공한다.</p><ul><li><a href="https://socket.io/get-started/chat" target="_blank" rel="noopener">https://socket.io/get-started/chat</a></li></ul><p>개발하는데 필요한 부분만 보고 개발했는데, 정리해서 포스팅해두면 나중에 쉽게 찾아볼 수 있을것 같아 조만간 정리할 예정이다.</p><br><h1 id="디자인"><a href="#디자인" class="headerlink" title="디자인"></a>디자인</h1><p>디자인에는 정말 소질이 없기 때문에 구글에서 ‘web chatting design’ 등의 검색 키워드를 몇개 참고해서 만들기로 했다.</p><a id="more"></a><img src="/2022/03/08/React-chatting-web/1.png" class=""><p>로그인 화면은 사실 많은 기능을 필요로 하지 않도록 ID만 입력하게 했고,</p><p>서버를 통해 동일한 ID가 존재하는지 중복 체크만 했다.</p><img src="/2022/03/08/React-chatting-web/2.png" class=""><p>좌측 상단에는 ‘나만의 채팅’ 기능으로 로그인한 나 자신이 가장 상단에 뜨고 이미 접속해있는 유저나 새로 접속한 유저들은 그 밑으로 리스트를 뿌려주어 채팅할 상대를 선택할 수 있도록 구성했다.</p><p>우측 환영 페이지는 딱히 디자인할 것이 없어 간단히 환영메세지만 작성했다.</p><img src="/2022/03/08/React-chatting-web/3.png" class=""><p>채팅을 작성하면 내 채팅은 우측 말풍선으로 표시했다.</p><p>가장 최근 메세지는 카카오톡처럼 대화상대 아이디 밑에 나오도록 했다.</p><img src="/2022/03/08/React-chatting-web/4.png" class=""><p>상대방과 채팅을 한다면 이런 식으로 표시된다.</p><br><h1 id="만들면서-느낀점"><a href="#만들면서-느낀점" class="headerlink" title="만들면서 느낀점"></a>만들면서 느낀점</h1><h3 id="flexbox-너무-어렵고…"><a href="#flexbox-너무-어렵고…" class="headerlink" title="flexbox 너무 어렵고…"></a>flexbox 너무 어렵고…</h3><p>화면의 영역과 구조가 복잡해질수록 부모와 자식의 계층을 잘 나눠야 하고 결국 디자인 영역까지 영향을 준다.</p><p>어떤 컴포넌트들은 세로로 배치해야하고 어떤 컴포넌트들은 가로로, 그리고 좌측 정렬, 우측 정렬… 가운데정렬..</p><p>주먹구구식으로 배우니 답이 없어 주변 친구에게 하소연할때 그 친구가 기본적인 flexbox 배치를 공부해 볼 수 있는 사이트를 추천해줬다.</p><a href="https://flexboxfroggy.com/#ko" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://flexboxfroggy.com/images/screenshot.png"></img></div><div class="descriptions"><div class="og-title">Flexbox Froggy</div><div class="og-description">A game for learning CSS flexbox</div></div></div></a><p>24단계의 간단한 문제로 컴포넌트의 배치를 공부해 볼 수 있다.</p><p>정말 도움이 많이 되었고 능숙하진 않지만 확실히 개발 속도를 올려주었다.</p><blockquote><p><strong>flexbox froggy 알려준 친구야 고마워!</strong></p></blockquote><br><h3 id="부모의-자식의-자식의-자식의…-props-props-props…-props-지옥"><a href="#부모의-자식의-자식의-자식의…-props-props-props…-props-지옥" class="headerlink" title="부모의 자식의 자식의 자식의… props, props, props… props 지옥"></a>부모의 자식의 자식의 자식의… props, props, props… props 지옥</h3><p>위에 설명한대로 이전에 React를 공부했을때도 발생했던 문제다.</p><p>계층을 여러개로 나누다 보면 몇단계 위에서 가지고있는 데이터를 자식에게 보내기 위해서 props의 지옥이 시작된다.</p><p>반대로 자식이 가지고있는 데이터를 부모 컴포넌트에서 업데이트해서 사용해야 될 경우도 생긴다.</p><blockquote><p><strong>또 이렇게 Redux를…</strong></p></blockquote><a href="https://ko.redux.js.org/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://ko.redux.js.org/img/redux-logo-landscape.png"></img></div><div class="descriptions"><div class="og-title">Redux - 자바스크립트 앱을 위한 예측 가능한 상태 컨테이너. | Redux</div><div class="og-description">자바스크립트 앱을 위한 예측 가능한 상태 컨테이너.</div></div></div></a><p><del>뭐야 한글 번역 사이트도 있었네…</del></p><p>예전에도 Redux를 사용했는데.. 너무 어렵고 공부했을때의 경험이 썩 좋지는 않았다..</p><p>그래서 다시 사용하고 싶지는 않았지만 결국 다시 사용해야 하는 상황이 왔다.</p><p>설치 방법을 보고 따라해보는데 이런 생각이 들었다.</p><blockquote><p><strong>의외로 쉽네. 앞으로 겁먹지 않아도 되겠다.</strong></p></blockquote><br><h3 id="그래도-아쉬운-구조"><a href="#그래도-아쉬운-구조" class="headerlink" title="그래도 아쉬운 구조"></a>그래도 아쉬운 구조</h3><p>주변에 React를 전문으로 하는 친구가 있어 조언을 구하고 싶은데 항상 바쁘다..</p><p>프론트 전문도 아니고 공부하며 만든 토이 프로젝트라 폴더 계층이나 컴포넌트 구조등 마음에 안드는 부분이 많다.</p><p>잘 만들어진 프로젝트를 보고 배우는것이 이 아쉬움을 해소하는데 도움이 될것으로 보인다.</p><blockquote><p><strong>그런 프로젝트를 github에서 찾으면 뜯어봐야지.</strong></p></blockquote><br><h3 id="3주간의-개발"><a href="#3주간의-개발" class="headerlink" title="3주간의 개발"></a>3주간의 개발</h3><p>뭘 만들지 고민하고, 디자인이나 기능을 생각하고 코딩을 시작해서 지금까지 3주 정도 걸린 것 같다.</p><p>일하면서 취미도 즐기고 마지막으로 남는 시간에 만들었는데 정말 재미있었다!</p><blockquote><p><strong>이렇게 정리하고 보니 생각보다 배운게 많네.</strong></p></blockquote><br><h1 id="그래서-앞으로는"><a href="#그래서-앞으로는" class="headerlink" title="그래서 앞으로는?"></a>그래서 앞으로는?</h1><p>지금 이 글을 정리하면서 다음 토이 프로젝트를 구상중이다.</p><p>짧으면 3개월에서 길면 6개월을 예상하고 있는데 덩치가 너무 큰것은 아닌지 걱정되기도 하고..</p><p>이와 병행해서 배운것들은 계속해서 블로그에 작성할 예정이다.</p><p>내가 만든 채팅앱 소스와 설명은 간단히 포스팅 할 예정이다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개인적으로 만들고있던 사이트도 어느정도 안정화가 되어가고..&lt;/p&gt;
&lt;h1 id=&quot;이제-뭘하지&quot;&gt;&lt;a href=&quot;#이제-뭘하지&quot; class=&quot;headerlink&quot; title=&quot;이제 뭘하지?&quot;&gt;&lt;/a&gt;이제 뭘하지?&lt;/h1&gt;&lt;p&gt;뭔가 새로운것을 공부하고 만들어야겠다는 생각이 문득 들었다.&lt;/p&gt;
&lt;p&gt;그리고 아는것과 모르는것, 하고싶은 것과 하기싫은 것을 분류해보고…&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;소켓을-이용한-무언가를-해보고싶어&quot;&gt;&lt;a href=&quot;#소켓을-이용한-무언가를-해보고싶어&quot; class=&quot;headerlink&quot; title=&quot;소켓을 이용한 무언가를 해보고싶어.&quot;&gt;&lt;/a&gt;소켓을 이용한 무언가를 해보고싶어.&lt;/h1&gt;&lt;p&gt;소켓은 10여년 전 처음 자바를 배울때를 제외하고는 실무에서 전혀 접할 기회가 없었다.&lt;/p&gt;
&lt;p&gt;당시에는 간단한 1:1 채팅 앱을 학습했는데, 기억도 잘 나지 않고 당시에 나에게는 너무 어려웠다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;소켓을 이용해 다시 채팅 앱을 만들어 보면 되겠다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;h1 id=&quot;뭘-이용해서-만들까&quot;&gt;&lt;a href=&quot;#뭘-이용해서-만들까&quot; class=&quot;headerlink&quot; title=&quot;뭘 이용해서 만들까?&quot;&gt;&lt;/a&gt;뭘 이용해서 만들까?&lt;/h1&gt;&lt;p&gt;최근에 만든 사이트는 프론트를 React, 백엔드를 Node.js, DB를 MySQL로 만들었다.&lt;/p&gt;
&lt;p&gt;하지만 너무 겉핥기 식이고 빠르게 만드는 것에 바쁜 나머지 너무 날로 먹은것 같은 느낌이 들었다.&lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;또-다시-React&quot;&gt;&lt;a href=&quot;#또-다시-React&quot; class=&quot;headerlink&quot; title=&quot;또 다시 React&quot;&gt;&lt;/a&gt;또 다시 React&lt;/h3&gt;&lt;p&gt;내가 처음 React를 공부했을때(아마.. 2007년? 2008년?) 그때는 클래스형 구조로 되어있었다.&lt;/p&gt;
&lt;p&gt;그리고 최근에 사이트를 만들었을 때 그때의 기억을 토대로 클래스형 구조로 만들고 사이트의 구조가 굳어갈때..&lt;/p&gt;
&lt;p&gt;요즘 예제들은 함수형 구조로 된것이 많더라.&lt;/p&gt;
&lt;p&gt;이 말은 뭔가 검색해도 함수형 구조를 이해하고 있지 않으면 빠르게 문제를 해결할 수 없다는 것과 같은 말이다.&lt;/p&gt;
&lt;p&gt;결국은 클래스형 구조에서 함수형 구조로 다 뜯어 고치고 이 과정에서 생각보다 많은 시간을 잡아먹었다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;이번 채팅 앱은 처음부터 함수형 구조로 시작해야겠어.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;h3 id=&quot;그리고-Node-js-서버&quot;&gt;&lt;a href=&quot;#그리고-Node-js-서버&quot; class=&quot;headerlink&quot; title=&quot;그리고 Node.js 서버&quot;&gt;&lt;/a&gt;그리고 Node.js 서버&lt;/h3&gt;&lt;p&gt;Javascript는 잘 못하는데, 그래도 Node.js로 서버개발을 해보니 의외로 간편하고 쉬웠다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;무엇보다 React도 Javascript니까.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;h3 id=&quot;MUI&quot;&gt;&lt;a href=&quot;#MUI&quot; class=&quot;headerlink&quot; title=&quot;MUI&quot;&gt;&lt;/a&gt;MUI&lt;/h3&gt;&lt;p&gt;React UI library로 기본 UI보다 좀더 있어보이게 꾸밀 수 있다.&lt;/p&gt;
&lt;p&gt;컴포넌트마다 예제는 너무 잘 돼있는데 조금 취향에 맞게 수정하려고 하려면 생각보다 쉽진않은 듯 하다.&lt;/p&gt;
&lt;a href=&quot;https://mui.com/&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://mui.com/static/social-previews/default-preview.jpg&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;MUI: The React component library you always wanted&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;MUI provides a simple, customizable, and accessible library of React components. Follow your own design system, or start with Material Desig…&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

&lt;br&gt;

&lt;h3 id=&quot;socket-io&quot;&gt;&lt;a href=&quot;#socket-io&quot; class=&quot;headerlink&quot; title=&quot;socket.io&quot;&gt;&lt;/a&gt;socket.io&lt;/h3&gt;&lt;p&gt;소켓을 사용하기 위해서 검색중 socket.io를 이용하면 간편하게 개발할 수 있을것으로 보였다.&lt;/p&gt;
&lt;a href=&quot;https://socket.io/&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;Socket.IO&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;

&lt;p&gt;그리고 채팅 앱을 만드는 간단한 튜토리얼도 제공한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://socket.io/get-started/chat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://socket.io/get-started/chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;개발하는데 필요한 부분만 보고 개발했는데, 정리해서 포스팅해두면 나중에 쉽게 찾아볼 수 있을것 같아 조만간 정리할 예정이다.&lt;/p&gt;
&lt;br&gt;

&lt;h1 id=&quot;디자인&quot;&gt;&lt;a href=&quot;#디자인&quot; class=&quot;headerlink&quot; title=&quot;디자인&quot;&gt;&lt;/a&gt;디자인&lt;/h1&gt;&lt;p&gt;디자인에는 정말 소질이 없기 때문에 구글에서 ‘web chatting design’ 등의 검색 키워드를 몇개 참고해서 만들기로 했다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://dev-sawd.github.io/categories/React/"/>
    
    
      <category term="Toy project" scheme="https://dev-sawd.github.io/tags/Toy-project/"/>
    
  </entry>
  
  <entry>
    <title>[CSS] Flexbox 정리</title>
    <link href="https://dev-sawd.github.io/2022/02/21/CSS-flexbox/"/>
    <id>https://dev-sawd.github.io/2022/02/21/CSS-flexbox/</id>
    <published>2022-02-21T06:46:54.000Z</published>
    <updated>2022-02-21T07:01:14.056Z</updated>
    
    <content type="html"><![CDATA[<p>프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 <del>복사 붙여넣기는 잘함</del></p><p>flexbox의 속성들을 간단히 정리</p><a id="more"></a><h1 id="AXIS"><a href="#AXIS" class="headerlink" title="AXIS"></a>AXIS</h1><h3 id="main-axis"><a href="#main-axis" class="headerlink" title="main axis"></a>main axis</h3><p>사용자가 지정한 중심축</p><h3 id="across-axis"><a href="#across-axis" class="headerlink" title="across axis"></a>across axis</h3><p>사용자가 지정한 중심축의 수직축</p><h1 id="container-item"><a href="#container-item" class="headerlink" title="container, item"></a>container, item</h1><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>말그대로 다른 엘리먼트들을 담을 수 있는 컨테이너</p><h3 id="container-속성"><a href="#container-속성" class="headerlink" title="container 속성"></a>container 속성</h3><ul><li>display</li><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content(main axis)</li><li>align-items(across axis)</li><li>align-content(across axis)</li></ul><h3 id="item"><a href="#item" class="headerlink" title="item"></a>item</h3><p>컨테이너 안에 담긴 엘리먼트</p><h3 id="item-속성"><a href="#item-속성" class="headerlink" title="item 속성"></a>item 속성</h3><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li></ul><h1 id="vs-vh"><a href="#vs-vh" class="headerlink" title="% vs vh"></a>% vs vh</h1><p>%는 부모 엘리먼트를 기준으로 x%를 채움<br>vh는 보이는 viewport height를 기준으로 채움</p><p>참고</p><ul><li><a href="https://youtu.be/7neASrWEFEM" target="_blank" rel="noopener">https://youtu.be/7neASrWEFEM</a></li><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;프론트 개발자가 아니라 항상 처음부터 UI를 작성할때 어려움을 많이 느낌 &lt;del&gt;복사 붙여넣기는 잘함&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;flexbox의 속성들을 간단히 정리&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://dev-sawd.github.io/categories/CSS/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] Error: ER_NOT_SUPPORTED_AUTH_MODE 에러 해결</title>
    <link href="https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/"/>
    <id>https://dev-sawd.github.io/2022/02/16/MySQL-Error-ER-NOT-SUPPORTED-AUTH-MODE/</id>
    <published>2022-02-16T00:42:57.000Z</published>
    <updated>2022-02-16T00:50:37.382Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">\node_modules\mysql\lib\protocol\Parser.js:437</span><br><span class="line">      throw err; &#x2F;&#x2F; Rethrow non-MySQL errors</span><br><span class="line">      ^</span><br><span class="line">      </span><br><span class="line">Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line">    at Handshake.Sequence._packetToError</span><br><span class="line">    at Handshake.ErrorPacket</span><br><span class="line">    at Protocol._parsePacket</span><br><span class="line">    at Parser._parsePacket</span><br><span class="line">    at Parser.write</span><br><span class="line">    at Protocol.write</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.&lt;anonymous&gt;</span><br><span class="line">    at Socket.emit</span><br><span class="line">    at addChunk</span><br><span class="line">    --------------------</span><br><span class="line">    at Protocol._enqueue</span><br><span class="line">    at Protocol.handshake</span><br><span class="line">    at Connection.connect</span><br><span class="line">    at Object.&lt;anonymous&gt;</span><br><span class="line">    at Module._compile</span><br><span class="line">    at Object.Module._extensions..js</span><br><span class="line">    at Module.load</span><br><span class="line">  sqlMessage: &#39;Client does not support authentication protocol requested by server; consider upgrading MySQL client&#39;,</span><br><span class="line">  sqlState: &#39;08004&#39;,</span><br><span class="line">  fatal: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내 개발 환경은 백엔드는 현재 로컬에서 작업중이고 MySQL은 AWS 서버에 올려둔 상태로 AWS에서는 외부 접속의 개념이 됨</p><p>아이디는 root에 비밀번호가 11111111을 예로 아래와 같은 쿼리를 실행하여 해결</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;11111111&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트 개발중 새로운 MySQL을 설치하고 백엔드 서버에서 접속하려고 할때 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드 개발자용 Hyperledger fabric 테스트 네트워크</title>
    <link href="https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/"/>
    <id>https://dev-sawd.github.io/2022/02/15/Chaincode-hyperledger-fabric-basic-network-for-chiancode-developer/</id>
    <published>2022-02-15T03:53:28.000Z</published>
    <updated>2022-02-15T04:18:08.797Z</updated>
    
    <content type="html"><![CDATA[<p>하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요</p><p>네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아</p><p>네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음</p><a href="https://github.com/dev-sawd/hyperledger-fabric-basic-network" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network"></img></div><div class="descriptions"><div class="og-title">GitHub - dev-sawd/hyperledger-fabric-basic-network</div><div class="og-description">Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.</div></div></div></a><a id="more"></a><p>기존에 Fabric version 1.4.3을 기준으로 만들어놨었는데</p><p>이번에 맥북 에어 M1으로 바꾸면서 M1에서도 돌아갈 수 있는 2.4.2 최신 버전을 기준으로 다시 재구성</p><p>fabric-samples/test-network를 기반으로 필요없는 부분을 제거해서 작성</p><ul><li><a href="https://github.com/hyperledger/fabric-samples/tree/main/test-network" target="_blank" rel="noopener">https://github.com/hyperledger/fabric-samples/tree/main/test-network</a></li></ul><h2 id="Docker-Container-list"><a href="#Docker-Container-list" class="headerlink" title="Docker Container list"></a>Docker Container list</h2><ul><li>ca_org1</li><li>ca_orderer</li><li>peer0.org1.example.com</li><li>couchdb0</li><li>orderer.example.com</li><li>cli</li></ul><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ start.sh</span><br></pre></td></tr></table></figure><h2 id="종료"><a href="#종료" class="headerlink" title="종료"></a>종료</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ teardown.sh</span><br></pre></td></tr></table></figure><h2 id="체인코드-설치"><a href="#체인코드-설치" class="headerlink" title="체인코드 설치"></a>체인코드 설치</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh .&#x2F;network.sh deployCC -ccn [CHAINCODE_NAME] -ccv [CHIANCODE_VERSION] -cci initLedger -ccl &quot;go&quot; -ccp [CHAINCODE_PATH]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;하이퍼레저 프로젝트 개발시 체인코드 개발자는 테스트용 네트워크가 필요&lt;/p&gt;
&lt;p&gt;네트워크가 빨리 구성되면 좋지만 마냥 기다릴 수 없고 개발이 병행으로 진행되는 경우가 많아&lt;/p&gt;
&lt;p&gt;네트워크 구성 전 까지 사용할 기본 네트워크를 만들었음&lt;/p&gt;
&lt;a href=&quot;https://github.com/dev-sawd/hyperledger-fabric-basic-network&quot; class=&quot;link-preview&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;div class=&quot;link-area&quot;&gt;&lt;div class=&quot;og-image&quot;&gt;&lt;img src=&quot;https://opengraph.githubassets.com/730c2750645a82fd4beff9d6e321a59337b69cf394aceaf6cd987f955e397183/dev-sawd/hyperledger-fabric-basic-network&quot;&gt;&lt;/img&gt;&lt;/div&gt;&lt;div class=&quot;descriptions&quot;&gt;&lt;div class=&quot;og-title&quot;&gt;GitHub - dev-sawd/hyperledger-fabric-basic-network&lt;/div&gt;&lt;div class=&quot;og-description&quot;&gt;Contribute to dev-sawd/hyperledger-fabric-basic-network development by creating an account on GitHub.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 이벤트 스케줄 사용시 주의사항</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-event-schedule/</id>
    <published>2022-02-14T18:09:13.000Z</published>
    <updated>2022-02-14T18:18:27.580Z</updated>
    
    <content type="html"><![CDATA[<p>이벤트 스케줄을 사용할때 시간을 지정해서 사용</p><p>예를들면 <code>하루 한번 0시에 어떤 작업을 실행</code></p><p>그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><p>한국의 시간과 9시간이 차이가 나는것을 확인할 수 있었음</p><p>그리고 내가 설정할 이벤트 스케줄의 시간을 MySQL 시간을 기준으로 1분뒤에 실행하도록 설정하고 확인한 결과는</p><p><code>이벤트 스케줄은 MySQL의 시간을 기준으로 실행된다.</code></p><p>관리를 편하게 하기 위해 MySQL의 시간을 한국 시간으로 변경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set time_zone&#x3D;&#39;Asia&#x2F;Seoul&#39;;</span><br></pre></td></tr></table></figure><p>그리고 실제 해당 시각에 정상 실행되는 것을 확인 할 수 있었음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이벤트 스케줄을 사용할때 시간을 지정해서 사용&lt;/p&gt;
&lt;p&gt;예를들면 &lt;code&gt;하루 한번 0시에 어떤 작업을 실행&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그런데 이 실행 시각이 언제를 기준으로 하는지 확인 하기 위해서 MySQL의 시간을 먼저 확인&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] 두 컬럼의 값 바꾸기</title>
    <link href="https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/"/>
    <id>https://dev-sawd.github.io/2022/02/15/MySQL-change-column-value/</id>
    <published>2022-02-14T17:55:21.000Z</published>
    <updated>2022-02-14T18:00:50.055Z</updated>
    
    <content type="html"><![CDATA[<p>DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE</span><br><span class="line">    [TABLE_NAME]</span><br><span class="line">SET</span><br><span class="line">    A &#x3D; (@temp:&#x3D;A),</span><br><span class="line">    A &#x3D; B,</span><br><span class="line">    B &#x3D; @temp</span><br></pre></td></tr></table></figure><p>이때 주의해야 할 점이 <code>A = (@temp:=A)</code>에서 콜론이 들어간다는것</p><p>만약 콜론을 빼고 UPDATE를 실행한다면 B 컬럼에 NULL이 들어가니 신중히 실행해야함</p><p>가장 좋은 방법은 테스트용 DB에서 실행한 결과를 확인하고 운영 DB에 적용하는것이 좋다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DB의 두 컬럼의 값이 바뀌어 들어가는 실수가 발생했을때 아래와 같이 두 컬럼의 값을 바꿀 수 있음&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL] access denied for user</title>
    <link href="https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/"/>
    <id>https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/</id>
    <published>2022-02-13T14:33:52.000Z</published>
    <updated>2022-02-13T14:34:54.604Z</updated>
    
    <content type="html"><![CDATA[<p>토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김</p><p>프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access denied for user &#39;root&#39;@&#39;%&#39; to database &#39;information_schema&#39;</span><br></pre></td></tr></table></figure><p>거의 반나절을 구글링과 스택오버플로우를 찾아봤는데도 해답을 찾을 수 없었음</p><p>대부분 권한 문제 때문이라고 하는데 이미 필요한 권한은 다 가지고있었음</p><p>그리고 며칠 지나 다시 문제를 풀어보려고 열었는데 에러 문구에 <code>database &#39;information_schema&#39;</code> 부분이 자꾸 거슬렸음</p><p>그래서 이 부분에 초점을 두고 database를 내가 원하는 데이터베이스로 설정 후 프로시져를 생성하니 성공</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use my_database</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; procedure 생성</span><br></pre></td></tr></table></figure><p>너무 허무하다.. 😪</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김&lt;/p&gt;
&lt;p&gt;프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://dev-sawd.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[Docker] no matching manifest for linux/arm64/v8 in the manifest list entries</title>
    <link href="https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/"/>
    <id>https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/</id>
    <published>2022-02-07T06:05:33.000Z</published>
    <updated>2022-02-07T06:25:45.776Z</updated>
    
    <content type="html"><![CDATA[<p>M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% docker pull hyperledger&#x2F;fabric-javaenv:2.4</span><br><span class="line">2.4: Pulling from hyperledger&#x2F;fabric-javaenv</span><br><span class="line">no matching manifest for linux&#x2F;arm64&#x2F;v8 in the manifest list entries</span><br></pre></td></tr></table></figure><p>M1 환경에서 발생하는 문제로 보임</p><p><code>--platform linux/x86_64</code> 인자를 주어 실행하면 정상적으로 받아오는것을 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% docker pull --platform linux&#x2F;x86_64 hyperledger&#x2F;fabric-javaenv:2.4</span><br></pre></td></tr></table></figure><ul><li><a href="https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/" target="_blank" rel="noopener">https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/</a></li><li><a href="https://stackoverflow.com/a/67361161" target="_blank" rel="noopener">https://stackoverflow.com/a/67361161</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="M1 MacBook Air" scheme="https://dev-sawd.github.io/tags/M1-MacBook-Air/"/>
    
  </entry>
  
  <entry>
    <title>[Golang] go modules 사용</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Golang-go-modules/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Golang-go-modules/</id>
    <published>2022-02-06T10:20:03.000Z</published>
    <updated>2022-02-06T12:57:14.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="govendor-deprecated"><a href="#govendor-deprecated" class="headerlink" title="govendor (deprecated)"></a>govendor (deprecated)</h1><p>Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음</p><ul><li><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">https://github.com/kardianos/govendor</a></li></ul><h1 id="Go-modules"><a href="#Go-modules" class="headerlink" title="Go modules"></a>Go modules</h1><p>이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음</p><p>사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임</p><ul><li><a href="https://go.dev/blog/using-go-modules" target="_blank" rel="noopener">https://go.dev/blog/using-go-modules</a></li></ul><a id="more"></a><h3 id="go-mod-init-module-name"><a href="#go-mod-init-module-name" class="headerlink" title="go mod init [module-name]"></a>go mod init [module-name]</h3><p>새 모듈을 만들었을때 go mod init 명령어로 go.mod 파일 작성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-get-module-name"><a href="#go-get-module-name" class="headerlink" title="go get [module-name]"></a>go get [module-name]</h3><p>종속성 모듈을 다운로드</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;dev-sawd&#x2F;</span><br></pre></td></tr></table></figure><h3 id="go-mod-tidy"><a href="#go-mod-tidy" class="headerlink" title="go mod tidy"></a>go mod tidy</h3><p>사용되지 않는 종속성 모듈을 제거하거나 추가된 종속성 모듈을 go.mod에 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="go-mod-vendor"><a href="#go-mod-vendor" class="headerlink" title="go mod vendor"></a>go mod vendor</h3><p>해당 위치에 종속성 모듈을 vendor 폴더안에 복사</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod vendor</span><br></pre></td></tr></table></figure><p>프로젝트를 새로 만들었을 경우는 go mod init를 이용해 go.mod를 생성하고 작업하면서 필요한 모듈들을 정리해가며 개발</p><p>만약 github에 공유된 모듈들을 받아 직접 실행하는 경우는 go.mod파일이 이미 존재하기 때문에 go get을 이용해 해당 모듈에서 사용하고 있는 모듈들을 다운받아 실행하면 됨</p><p>go get등을 이용해 github에 공유되어있는 모듈들을 다운로드 받을 수 없는 경우에는 go mod vendor를 이용해 해당 모듈들을 현재 개발중인 모듈 폴더의 vendor에 복사하게 한 후</p><p>모듈 전체를 배포하는 형태로 진행해야함</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;govendor-deprecated&quot;&gt;&lt;a href=&quot;#govendor-deprecated&quot; class=&quot;headerlink&quot; title=&quot;govendor (deprecated)&quot;&gt;&lt;/a&gt;govendor (deprecated)&lt;/h1&gt;&lt;p&gt;Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kardianos/govendor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kardianos/govendor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Go-modules&quot;&gt;&lt;a href=&quot;#Go-modules&quot; class=&quot;headerlink&quot; title=&quot;Go modules&quot;&gt;&lt;/a&gt;Go modules&lt;/h1&gt;&lt;p&gt;이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음&lt;/p&gt;
&lt;p&gt;사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/blog/using-go-modules&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://go.dev/blog/using-go-modules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] panic recover 샘플</title>
    <link href="https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/"/>
    <id>https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/</id>
    <published>2022-02-05T16:23:25.000Z</published>
    <updated>2022-02-05T16:50:32.950Z</updated>
    
    <content type="html"><![CDATA[<p>체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음</p><p>도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨</p><p>이러한 방법은 에러 추적이 어려워짐</p><p>Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각</p><a id="more"></a><h1 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h1><blockquote><p>Go 내장함수인 panic()함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다. 이러한 panic 모드 실행 방식은 다시 상위함수에도 똑같이 적용되고, 계속 콜스택을 타고 올라가며 적용된다. 그리고 마지막에는 프로그램이 에러를 내고 종료하게 된다.</p></blockquote><p>&nbsp;</p><h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><blockquote><p>Go 내장함수인 recover()함수는 panic 함수에 의한 패닉상태를 다시 정상상태로 되돌리는 함수이다.</p></blockquote><ul><li><a href="http://golang.site/go/article/20-Go-defer%EC%99%80-panic" target="_blank" rel="noopener">http://golang.site/go/article/20-Go-defer%EC%99%80-panic</a></li></ul><p>&nbsp;</p><h1 id="smaple-code"><a href="#smaple-code" class="headerlink" title="smaple code"></a>smaple code</h1><script src="//gist.github.com/66e46a62183d2d316ff9100d93a4fa6d.js"></script><p>샘플 프로젝트로 직접 확인해보고 개선해 나갈 예정</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음&lt;/p&gt;
&lt;p&gt;도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨&lt;/p&gt;
&lt;p&gt;이러한 방법은 에러 추적이 어려워짐&lt;/p&gt;
&lt;p&gt;Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>[Chaincode] 체인코드에서의 MVC...?</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/</id>
    <published>2022-02-04T11:45:25.000Z</published>
    <updated>2022-02-06T09:57:22.972Z</updated>
    
    <content type="html"><![CDATA[<p>조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><blockquote><p>MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Glossary/MVC" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Glossary/MVC</a></li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>데이터를 받아 비즈니스 로직을 처리<br>주로 DB와의 상호작용이 해당</p><a id="more"></a><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>레이아웃과 화면을 처리<br>애플리케이션의 데이터를 보여주는 방식</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>사용자로부터 요청을 받아 수행할 비즈니스 로직을 제어</p><p>&nbsp;</p><h1 id="Go언어에서의-MVC"><a href="#Go언어에서의-MVC" class="headerlink" title="Go언어에서의 MVC"></a>Go언어에서의 MVC</h1><p>Go언어에서는 Revel이라고 하는 MVC를 도와주는 웹 프레임워크가 있다고 함</p><a href="https://revel.github.io/" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="descriptions"><div class="og-title">Revel - Go Web Framework</div></div></div></a><p>&nbsp;</p><h1 id="하지만-체인코드에서는"><a href="#하지만-체인코드에서는" class="headerlink" title="하지만 체인코드에서는..?"></a>하지만 체인코드에서는..?</h1><p>MVC패턴을 제대로 모르더라도 구조를 보면 많이 익숙한 느낌이 들정도로 개발자들은 자주 접하는 구조<br>하지만 체인코드를 개발할때 MVC를 그대로 사용하기에는 무리가 있어서 조금 내 방식대로 수정<br>호출 순서는 아래와 같다고 생각</p><p>사용자 → Controller → Service → DAO → DB</p><p>그리고 각 호출에서 필요한 데이터 구조(DTO)를 정의하는 정도로 생각</p><p>&nbsp;</p><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><p>직관적으로 각 구조마다 폴더명을 지정해서 관리<br>dao, dto는 service, object등으로 상황에 따라 다르게 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\GOPROJECT\SRC\MVC</span><br><span class="line">│  main.go</span><br><span class="line">│</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><script src="//gist.github.com/c8bc668ea2d139dfdc69a16128db3189.js"></script><p>개발을 하면서 반복되는 코드는 계속해서 리펙토링을 통해 제거하고 관리해야함</p><p><del>그래도 나중엔 감당안되긴 해…</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리&lt;/p&gt;
&lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Glossary/MVC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/ko/docs/Glossary/MVC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Model&quot;&gt;&lt;a href=&quot;#Model&quot; class=&quot;headerlink&quot; title=&quot;Model&quot;&gt;&lt;/a&gt;Model&lt;/h3&gt;&lt;p&gt;데이터를 받아 비즈니스 로직을 처리&lt;br&gt;주로 DB와의 상호작용이 해당&lt;/p&gt;
    
    </summary>
    
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/categories/Chaincode/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
      <category term="Pattern" scheme="https://dev-sawd.github.io/tags/Pattern/"/>
    
      <category term="Chaincode" scheme="https://dev-sawd.github.io/tags/Chaincode/"/>
    
  </entry>
  
  <entry>
    <title>Hello Golang</title>
    <link href="https://dev-sawd.github.io/2022/02/04/Hello-Golang/"/>
    <id>https://dev-sawd.github.io/2022/02/04/Hello-Golang/</id>
    <published>2022-02-03T18:47:41.000Z</published>
    <updated>2022-02-04T08:36:32.832Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Golang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script src="//gist.github.com/44e38cda1e98acfca88c81c2ddba1024.js"></script><p>가볍게라도 꾸준히!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://dev-sawd.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 이벤트와 이벤트 리스너</title>
    <link href="https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/"/>
    <id>https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/</id>
    <published>2020-06-09T21:45:10.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.js</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEvent = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">myEvent.addListener(<span class="string">'event1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event2'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 2 추가'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myEvent.emit(<span class="string">'event1'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event2'</span>);</span><br><span class="line"></span><br><span class="line">myEvent.once(<span class="string">'event3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event3'</span>); <span class="comment">// 위의 event3 이벤트만 한번 호출됨</span></span><br><span class="line"></span><br><span class="line">myEvent.on(<span class="string">'event4'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 4'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEvent.removeAllListeners(<span class="string">'event4'</span>);</span><br><span class="line">myEvent.emit(<span class="string">'event4'</span>); <span class="comment">// 위의 removeAllListeners를 통해 event4 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'이벤트 5'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">myEvent.on(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.removeListener(<span class="string">'event5'</span>, listener);</span><br><span class="line">myEvent.emit(<span class="string">'event5'</span>); <span class="comment">// 위의 removeListener를 통해 event5 리스너가 삭제되어 콜백 호출되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myEvent.listenerCount(<span class="string">'event2'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node event.js</span></span><br><span class="line">이벤트 1</span><br><span class="line">이벤트 2</span><br><span class="line">이벤트 2 추가</span><br><span class="line">이벤트 3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><ul><li><p>on(이벤트명, 콜백)<br>이벤트 이름과 이벤트 발생 시의 콜백을 연결해주고 이렇게 연결하는 동작을 이벤트 리스닝이라고 부름<br>event2처럼 이벤트 하나에 여러개를 달아줄 수도 있음</p></li><li><p>addListener(이벤트명, 콜백)<br>on과 기능이 같음</p></li><li><p>emit(이벤트명)<br>이벤트를 호출하는 메서드<br>이벤트 이름을 인자로 넣어주면 미리 등록해뒀던 이벤트 콜백이 실행됨</p></li><li><p>once(이벤트명, 콜백)<br>한번만 실행되는 이벤트<br>위의 예제에서 myEvent.emit(‘event3’)을 두 번 연속 호출했지만 콜백이 한번만 실행됨</p></li><li><p>removeAllListeners(이벤트명)<br>이벤트에 연결된 모든 이벤트 리스너를 제거함<br>event4가 호출되기 전에 이벤트 리스너를 제거했으므로 event4의 콜백은 호출되지 않음</p></li><li><p>removeListener(이벤트명, 리스너)<br>이벤트에 연결된 리스너를 하나씩 제거<br>event5의 콜백도 호출되지 않음</p></li><li><p>off(이벤트명, 콜백)<br>노드 10 버전에서 추가된 메서드로, removeListener와 기능이 같음</p></li><li><p>listenerCount(이벤트명)<br>현재 리스너가 몇 개 연결되어 있는지 확인</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 파일 시스템</title>
    <link href="https://dev-sawd.github.io/2020/06/09/Node-js-file-system/"/>
    <id>https://dev-sawd.github.io/2020/06/09/Node-js-file-system/</id>
    <published>2020-06-09T11:37:51.000Z</published>
    <updated>2022-01-26T13:51:21.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>fs 모듈은 파일 시스템에 접근하는 모듈</p><a id="more"></a><h1 id="파일-읽기"><a href="#파일-읽기" class="headerlink" title="파일 읽기"></a>파일 읽기</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; readme.txt</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readFile.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 버퍼로 출력</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString()); <span class="comment">// 문자열로 출력</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node readFile.js</span></span><br><span class="line">&lt;Buffer 74 68 69 73 20 69 73 20 72 65 61 64 6d 65 2e 74 78 74 0d 0a&gt;</span><br><span class="line">this is readme.txt</span><br></pre></td></tr></table></figure><h1 id="동기-메서드와-비동기-메서드"><a href="#동기-메서드와-비동기-메서드" class="headerlink" title="동기 메서드와 비동기 메서드"></a>동기 메서드와 비동기 메서드</h1><p>setTimeout 같은 타이머와 process.netTick 외에도 노드는 대부분의 메서드를 비동기 방식으로 처리<br>특히 fs 모듈이 비동기 메서드를 많이 가지고있음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./readme.txt'</span>, (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node async.js</span></span><br><span class="line">시작</span><br><span class="line">끝</span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br></pre></td></tr></table></figure><p>비동기 메서드들은 백그라운드에 해당 파일을 읽으라고만 요청하고 다음 작업으로 넘어감<br>따라서 파일 읽기 요청만 세번 보내고 <code>console.log(&#39;끝&#39;)</code>을 찍음<br>나중에 읽기가 완료되면 백그라운드가 다시 메인 스레드에 알림을 주고 이때 콜백 함수를 실행</p><blockquote><p>동기와 비동기, 블로킹과 논블로킹<br>노드에서는 비동기와 동기, 블로킹과 논블로킹이라는 네 용어가 혼용됨</p><ul><li>동기와 비동기 : 함수가 바로 return 되는지 여부</li><li>블로킹과 논 블로킹 : 백그라운드 작업 완료 여부<br>노드에서는 동기-블로킹 방식과 비동기-논블로킹 방식이 대부분</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sync.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'시작'</span>);</span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2번'</span>, data.toString());</span><br><span class="line">data = fs.readFileSync(<span class="string">'./readme.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'3번'</span>, data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'끝'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% node sync.js</span><br><span class="line">시작</span><br><span class="line">1번 this is readme.txt</span><br><span class="line"></span><br><span class="line">2번 this is readme.txt</span><br><span class="line"></span><br><span class="line">3번 this is readme.txt</span><br><span class="line"></span><br><span class="line">끝</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;fs 모듈은 파일 시스템에 접근하는 모듈&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] 단방향 암호화</title>
    <link href="https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/"/>
    <id>https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/</id>
    <published>2020-06-08T12:19:54.000Z</published>
    <updated>2022-01-26T13:51:21.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함<br>단방향 암호화 알고리즘은 주로 해시 기법을 사용<br>해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'base64'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hex:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'비밀번호'</span>).digest(<span class="string">'hex'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'base64:'</span>, crypto.createHash(<span class="string">'sha512'</span>).update(<span class="string">'다른 비밀번호'</span>).digest(<span class="string">'base64'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> node hash.js</span></span><br><span class="line">base64: dvfV6nyLRRt3NxKSlTHOkkEGgqW2HRtfu19Ou/psUXvwlebbXCboxIPmDYOFRIpqav2eUTBFuHaZri5x+usy1g==</span><br><span class="line">hex: 76f7d5ea7c8b451b773712929531ce92410682a5b61d1b5fbb5f4ebbfa6c517bf095e6db5c26e8c483e60d8385448a6a6afd9e513045b87699ae2e71faeb32d6</span><br><span class="line">base64: cx49cjC8ctKtMzwJGBY853itZeb6qxzXGvuUJkbWTGn5VXAFbAwXGEOxU2Qksoj+aM2GWPhc1O7mmkyohXMsQw==</span><br></pre></td></tr></table></figure><h1 id="createHash-알고리즘"><a href="#createHash-알고리즘" class="headerlink" title="createHash(알고리즘)"></a>createHash(알고리즘)</h1><p>사용할 해시 알고리즘<br>md5, sha1, sha256, sha512등이 가능, 현재는 sha512정도로 충분</p><h1 id="update-문자열"><a href="#update-문자열" class="headerlink" title="update(문자열)"></a>update(문자열)</h1><p>변환할 문자열</p><h1 id="digest-인코딩"><a href="#digest-인코딩" class="headerlink" title="digest(인코딩)"></a>digest(인코딩)</h1><p>인코딩할 알고리즘<br>base64, hex, latin1이 주로 사용, 그중 base64 결과 문자열이 가장 짧아 애용</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함&lt;br&gt;단방향 암호화 알고리즘은 주로 해시 기법을 사용&lt;br&gt;해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Node.js] path module</title>
    <link href="https://dev-sawd.github.io/2020/06/07/Node.js-node-js-path-module/"/>
    <id>https://dev-sawd.github.io/2020/06/07/Node.js-node-js-path-module/</id>
    <published>2020-06-07T12:26:47.000Z</published>
    <updated>2022-01-26T13:51:21.161Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/node.js_logo.png" alt=""></p><p>폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈<br>운영체제별로 경로 구분자가 다르기 때문에 사용</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /Users/devsawd/hello-world/index.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.sep:'</span>, path.sep);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.delimiter:'</span>, path.delimiter);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.dirname(__filename):'</span>, path.dirname(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.extname(__filename):'</span>, path.extname(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.basename(__filename):'</span>, path.basename(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.basename(__filename):'</span>, path.basename(__filename, path.extname(__filename)));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.parse(__filename)'</span>, path.parse(__filename));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`path.format(&#123;</span></span><br><span class="line"><span class="string">    dir: '/Users/devsawd/hello-world',</span></span><br><span class="line"><span class="string">    name: 'index',</span></span><br><span class="line"><span class="string">    ext: '.js',</span></span><br><span class="line"><span class="string">&#125;));:`</span>, path.format(&#123;</span><br><span class="line">    dir: <span class="string">'/Users/devsawd/hello-world'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    ext: <span class="string">'.js'</span>,</span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.normalize('</span>/Users/devsawd/hello-world/index.js<span class="string">'):'</span>, path.normalize(<span class="string">'/Users/devsawd/hello-world/index.js'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.isAbsolute('</span>/users<span class="string">'):'</span>, path.isAbsolute(<span class="string">'/users'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.isAbsolute('</span>./home<span class="string">'):'</span>, path.isAbsolute(<span class="string">'./home'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'====================================================================================='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`path.relative('/Users/devsawd/hello-world/index.js', '/Users'));: `</span>, path.relative(<span class="string">'/Users/devsawd/hello-world/index.js'</span>, <span class="string">'/Users'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'__dirname:'</span>, __dirname);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.join(__dirname, '</span>..<span class="string">', '</span>/Users<span class="string">', '</span>.<span class="string">', '</span>devsawd<span class="string">'):'</span>, path.join(__dirname, <span class="string">'..'</span>, <span class="string">'/Users'</span>, <span class="string">'.'</span>, <span class="string">'devsawd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'path.resolve(__dirname, '</span>..<span class="string">', '</span>/Users<span class="string">', '</span>.<span class="string">', '</span>devsawd<span class="string">'):'</span>, path.resolve(__dirname, <span class="string">'..'</span>, <span class="string">'/Users'</span>, <span class="string">'.'</span>, <span class="string">'devsawd'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">hello-world % node index.js</span><br><span class="line">path.sep: /</span><br><span class="line">path.delimiter: :</span><br><span class="line">=====================================================================================</span><br><span class="line">path.dirname(__filename): /Users/devsawd/hello-world</span><br><span class="line">path.extname(__filename): .js</span><br><span class="line">path.basename(__filename): index.js</span><br><span class="line">path.basename(__filename): index</span><br><span class="line">=====================================================================================</span><br><span class="line">path.parse(__filename) &#123;</span><br><span class="line">  root: '/',</span><br><span class="line">  dir: '/Users/devsawd/hello-world',</span><br><span class="line">  base: 'index.js',</span><br><span class="line">  ext: '.js',</span><br><span class="line">  name: 'index'</span><br><span class="line">&#125;</span><br><span class="line">=====================================================================================</span><br><span class="line">path.format(&#123;</span><br><span class="line">    dir: '/Users/devsawd/hello-world',</span><br><span class="line">    name: 'index',</span><br><span class="line">    ext: '.js',</span><br><span class="line">&#125;));: /Users/devsawd/hello-world/index.js</span><br><span class="line">=====================================================================================</span><br><span class="line">path.normalize('/Users/devsawd/hello-world/index.js') /Users/devsawd/hello-world/index.js</span><br><span class="line">=====================================================================================</span><br><span class="line">path.isAbsolute('/users') true</span><br><span class="line">path.isAbsolute('./home'): false</span><br><span class="line">=====================================================================================</span><br><span class="line">path.relative('/Users/devsawd/hello-world/index.js', '/Users'));:  ../../..</span><br><span class="line">__dirname: /Users/devsawd/hello-world</span><br><span class="line">path.join(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd/Users/devsawd</span><br><span class="line">path.resolve(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd</span><br></pre></td></tr></table></figure><h1 id="path-join"><a href="#path-join" class="headerlink" title="path.join()"></a>path.join()</h1><p>인자로 받은 경로들을 합쳐서 문자열 형태로 path를 리턴</p><h1 id="path-resolve"><a href="#path-resolve" class="headerlink" title="path.resolve()"></a>path.resolve()</h1><p>기본적으로 path.join과 같지만 오른쪽 인자부터 경로를 합쳐나가며 <code>/</code>를 만나면 절대경로로 인식하고 앞의 인자들을 무시<br>만약 <code>/</code>를 만나지 못한다면 <code>/현재경로/생성된경</code>로 형태로 결과 리턴</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/node.js_logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈&lt;br&gt;운영체제별로 경로 구분자가 다르기 때문에 사용&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://dev-sawd.github.io/categories/Node-js/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[Data Structure] Circular Linked List</title>
    <link href="https://dev-sawd.github.io/2020/06/05/Data-Structure-circular-linked-list/"/>
    <id>https://dev-sawd.github.io/2020/06/05/Data-Structure-circular-linked-list/</id>
    <published>2020-06-05T12:47:27.000Z</published>
    <updated>2022-01-26T13:51:21.149Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.google.com/presentation/d/12zMa_KtpQRJjjA8uI1CBC6gNbYSJx-GKB3g677IsVy0/edit?usp=sharing" target="_blank" rel="noopener">원본자료</a></p><p>원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!</p><img src="/2020/06/05/Data-Structure-circular-linked-list/02.png" class=""><br><a id="more"></a><img src="/2020/06/05/Data-Structure-circular-linked-list/03.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/04.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/05.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/06.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/07.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/08.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/09.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/10.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/11.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/12.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/13.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/14.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/15.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/16.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/17.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/18.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/19.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/20.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/21.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/22.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/23.png" class=""><br><img src="/2020/06/05/Data-Structure-circular-linked-list/24.png" class=""><br>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/12zMa_KtpQRJjjA8uI1CBC6gNbYSJx-GKB3g677IsVy0/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;원본자료&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!&lt;/p&gt;
&lt;img src=&quot;/2020/06/05/Data-Structure-circular-linked-list/02.png&quot; class=&quot;&quot;&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="Data Structure" scheme="https://dev-sawd.github.io/categories/Data-Structure/"/>
    
    
      <category term="TIL" scheme="https://dev-sawd.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>[GitLab] 백업과 복구</title>
    <link href="https://dev-sawd.github.io/2020/06/04/GitLab-backup-and-restore/"/>
    <id>https://dev-sawd.github.io/2020/06/04/GitLab-backup-and-restore/</id>
    <published>2020-06-04T09:58:02.000Z</published>
    <updated>2022-02-03T19:19:07.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gitlab_logo.jpg" alt=""></p><p>이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.<br>어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요.</p><blockquote><p>뭔가 3부작 느낌인데..</p></blockquote><a id="more"></a><p>아래의 내용은 <a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html" target="_blank" rel="noopener">GitLab 백업 공식 페이지</a>를 참고했습니다.</p><br><br><h2 id="백업-파일-생성"><a href="#백업-파일-생성" class="headerlink" title="백업 파일 생성"></a>백업 파일 생성</h2><p>먼저 실행중인 Docker GitLab의 데이터 백업 파일을 생성합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker <span class="built_in">exec</span> -t gitlab gitlab-backup create</span></span><br><span class="line">2020-06-04 01:45:41 +0000 -- Dumping database ...</span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line">2020-06-04 01:46:12 +0000 -- done</span><br><span class="line">2020-06-04 01:46:12 +0000 -- Dumping repositories ...</span><br><span class="line">* devsawd/hello-world (@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b) ... [DONE]</span><br><span class="line">[SKIPPED] Wiki</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping uploads ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping builds ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping artifacts ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping pages ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping lfs objects ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- done</span><br><span class="line">2020-06-04 01:46:13 +0000 -- Dumping container registry images ...</span><br><span class="line">2020-06-04 01:46:13 +0000 -- [DISABLED]</span><br><span class="line">Creating backup archive: 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ... done</span><br><span class="line">Uploading backup archive to remote storage  ... skipped</span><br><span class="line">Deleting tmp directories ... done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">done</span><br><span class="line">Deleting old backups ... skipping</span><br><span class="line">Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data</span><br><span class="line">and are not included in this backup. You will need these files to restore a backup.</span><br><span class="line">Please back them up manually.</span><br><span class="line">Backup task is done.</span><br></pre></td></tr></table></figure><p>제가 생성한 hello-world 프로젝트도 보입니다.</p><br><br><h2 id="백업-파일-확인"><a href="#백업-파일-확인" class="headerlink" title="백업 파일 확인"></a>백업 파일 확인</h2><p>저는 docker-compose.yml에 volumes를 이용해 backups 폴더를 지정해놓았습니다.<br>이부분에 대해 이해가 안되는 분들은 <a href="https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/">Docker를 이용해 GitLab을 설치해보자</a>를 참고해주세요</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups'</span><br></pre></td></tr></table></figure><p>backups 폴더로 이동해 백업 데이터가 잘 생성되었는지 확인해봅니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">cd</span> backups</span></span><br><span class="line">backups % ls</span><br><span class="line">1591235174_2020_06_04_13.0.3_gitlab_backup.tar</span><br><span class="line">backups %</span><br></pre></td></tr></table></figure><br><br><h2 id="GitLab-컨테이너-중지"><a href="#GitLab-컨테이너-중지" class="headerlink" title="GitLab 컨테이너 중지"></a>GitLab 컨테이너 중지</h2><p>백업 파일이 정상적으로 생성되었다면 실행중인 컨테이너를 종료합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker stop gitlab</span></span><br></pre></td></tr></table></figure><br><br><h2 id="백업-파일-임시이동"><a href="#백업-파일-임시이동" class="headerlink" title="백업 파일 임시이동"></a>백업 파일 임시이동</h2><p>백업파일을 임시적으로 이동시킵니다.<br>저는 하나 상위 폴더인 gitlab 폴더로 이동시켰습니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backups % mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ../</span><br></pre></td></tr></table></figure><br><br><h2 id="데이터-파일-삭제"><a href="#데이터-파일-삭제" class="headerlink" title="데이터 파일 삭제"></a>데이터 파일 삭제</h2><blockquote><p>주의!! 아래의 명령어는 모든 데이터를 삭제합니다.</p></blockquote><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">backups % cd ..</span><br><span class="line"><span class="meta">%</span><span class="bash"> rm -rf config backups data logs</span></span><br></pre></td></tr></table></figure><br><br><h2 id="GitLab-컨테이너-실행"><a href="#GitLab-컨테이너-실행" class="headerlink" title="GitLab 컨테이너 실행"></a>GitLab 컨테이너 실행</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span> // Linux의 경우 /src</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure><br><br><h2 id="백업-파일-backups-폴더로-복구"><a href="#백업-파일-backups-폴더로-복구" class="headerlink" title="백업 파일 backups 폴더로 복구"></a>백업 파일 backups 폴더로 복구</h2><p>docker ps 명령어를 이용해 gitlab 컨테이너가 정상적으로 실행됐다면<br>gitlab 폴더로 임시 이동시켰던 백업파일을 다시 backups 폴더로 이동시킵니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar backups</span></span><br></pre></td></tr></table></figure><br><br><h2 id="복구-시작"><a href="#복구-시작" class="headerlink" title="복구 시작"></a>복구 시작</h2><p>복구 실행 명령어를 실행합니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> docker <span class="built_in">exec</span> -it gitlab gitlab-backup restore</span></span><br><span class="line">Unpacking backup ... done</span><br><span class="line">Before restoring the database, we will remove all existing</span><br><span class="line">tables to avoid future upgrade problems. Be aware that if you have</span><br><span class="line">custom tables in the GitLab database these tables and all data will be</span><br><span class="line">removed.</span><br><span class="line"></span><br><span class="line">Do you want to continue (yes/no)? yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-06-04 01:59:16 +0000 -- done</span><br><span class="line">2020-06-04 01:59:16 +0000 -- Restoring repositories ...</span><br><span class="line">* devsawd/hello-world ... [DONE]</span><br><span class="line">2020-06-04 01:59:16 +0000 -- done</span><br><span class="line">2020-06-04 01:59:16 +0000 -- Restoring uploads ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring builds ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring artifacts ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring pages ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">2020-06-04 01:59:17 +0000 -- Restoring lfs objects ...</span><br><span class="line">2020-06-04 01:59:17 +0000 -- done</span><br><span class="line">This task will now rebuild the authorized_keys file.</span><br><span class="line">You will lose any data stored in the authorized_keys file.</span><br><span class="line">Do you want to continue (yes/no)? yes</span><br><span class="line"></span><br><span class="line">Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data</span><br><span class="line">and are not included in this backup. You will need to restore these files manually.</span><br><span class="line">Restore task is done.</span><br></pre></td></tr></table></figure><p>devsawd/hello-world 프로젝트도 복구되었다는 로그가 보입니다.</p><br><br><h2 id="로그인-후-확인"><a href="#로그인-후-확인" class="headerlink" title="로그인 후 확인"></a>로그인 후 확인</h2><img src="/2020/06/04/GitLab-backup-and-restore/1.png" class=""><p>root, devsawd 계정도 잘 살아있고 프로젝트도 정상적으로 복구되었습니다!</p><br><br><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>명령어 몇번과 tar 복구파일 하나만으로 GitLab의 데이터들을 복구할 수 있었습니다.<br>일정 기간을 가지고 스냅샷을 찍듯 데이터를 백업하는 방법도 있는데…<br><del>~ 언제 하지? ~</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gitlab_logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.&lt;br&gt;어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;뭔가 3부작 느낌인데..&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>[GitLab] 개인 저장소 연동 테스트</title>
    <link href="https://dev-sawd.github.io/2020/06/03/GitLab-create-personal-repository/"/>
    <id>https://dev-sawd.github.io/2020/06/03/GitLab-create-personal-repository/</id>
    <published>2020-06-03T11:44:56.000Z</published>
    <updated>2022-02-03T19:19:07.299Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gitlab_logo.jpg" alt=""></p><p>지난 포스트 <a href="https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/">Docker를 이용해 GitLab을 설치해보자</a>로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.<br>이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요.</p> <a id="more"></a><br><h2 id="저장소-생성"><a href="#저장소-생성" class="headerlink" title="저장소 생성"></a>저장소 생성</h2><img src="/2020/06/03/GitLab-create-personal-repository/1.png" class=""><p>GitLab에 로그인 후 [Create a project]를 클릭합니다.</p><br><br><img src="/2020/06/03/GitLab-create-personal-repository/2.png" class=""><p>프로젝트 이름을 적고 생성을 눌러줍니다.</p><br><br><img src="/2020/06/03/GitLab-create-personal-repository/3.png" class=""><p>정상적으로 생성되었네요.<br>빨간 박스를 참고해 아래의 스텝에서 저장소를 복제하도록 합니다.</p><br><br><h2 id="저장소-복제"><a href="#저장소-복제" class="headerlink" title="저장소 복제"></a>저장소 복제</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> %</span><span class="bash"> git <span class="built_in">clone</span> http://xxx.xxx.xxx.xxx/devsawd/hello-world.git</span></span><br><span class="line"></span><br><span class="line">Cloning into 'hello-world'...</span><br><span class="line">Username for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.com</span><br><span class="line">Password for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line"><span class="meta"> %</span><span class="bash"> <span class="built_in">cd</span> hello-world</span></span><br></pre></td></tr></table></figure><blockquote><p>빈 프로젝트를 복제한것이기 때문에 warning이 뜨니 가볍게 무시해줍니다.</p></blockquote><br><h2 id="README-md-파일-생성"><a href="#README-md-파일-생성" class="headerlink" title="README.md 파일 생성"></a>README.md 파일 생성</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> touch README.md</span></span><br></pre></td></tr></table></figure><br><h2 id="Commit-and-Push"><a href="#Commit-and-Push" class="headerlink" title="Commit and Push"></a>Commit and Push</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hello-world % git add README.md</span><br><span class="line">hello-world % git commit -m "add README"</span><br><span class="line">[master (root-commit) 204db60] add README</span><br><span class="line">1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">create mode 100644 README.md</span><br><span class="line"></span><br><span class="line">hello-world % git push -u origin master</span><br><span class="line">Username for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.com</span><br><span class="line">Password for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':</span><br><span class="line">Enumerating objects: 3, done.</span><br><span class="line">Counting objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 212 bytes | 212.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To http://xxx.xxx.xxx.xxx/devsawd/hello-world.git</span><br><span class="line">* [new branch]      master -&gt; master</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'origin'.</span><br></pre></td></tr></table></figure><br><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><img src="/2020/06/03/GitLab-create-personal-repository/4.png" class=""><p>정상적으로 파일이 올라간것이 보입니다!<br>이제 집 밖의 어디에서든 개인 GitLab에 접근해서 사용할 수 있게 되었습니다.</p><p>다음에는 이 hello-world 프로젝트를 백업하고 GitLab Docker를 삭제하고 재구동했을때 복구가 되는지 확인해볼거예요.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gitlab_logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;지난 포스트 &lt;a href=&quot;https://dev-sawd.github.io/2020/05/30/MacOS-gitlab-with-docker/&quot;&gt;Docker를 이용해 GitLab을 설치해보자&lt;/a&gt;로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.&lt;br&gt;이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요.&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>[Gitlab] Docker를 이용해 GitLab을 설치해보자</title>
    <link href="https://dev-sawd.github.io/2020/05/30/GitLab-gitlab-with-docker/"/>
    <id>https://dev-sawd.github.io/2020/05/30/GitLab-gitlab-with-docker/</id>
    <published>2020-05-30T10:37:43.000Z</published>
    <updated>2022-02-04T04:59:11.430Z</updated>
    
    <content type="html"><![CDATA[<br>당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다.그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다.그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다.<a id="more"></a><p>GitLab은 위키와 이슈 추적 기능을 갖춘 웹 기반의 데브옵스 시스템입니다.<br>흔히 우리가 일고있는 Git 저장소로 많이 쓰이는 솔루션중 하나입니다.<br>과거 GitHub에서는 지원하지 않던 Private 저장소를 지원했기에 인기가 많았지만, 최근 GitHub에서도 Private를 지원하고 있어 이슈 추적 기능을 제외하면 기본기능에서는 많이 흡사합니다.<br>개인적인 선호는 GitHub이 단연 마음에 들지만 서두에 적은것 처럼 내부적으로 운영할 수 있도록 설치를 지원하는 GitLab에 정말 감사하고있습니다.</p><blockquote><p>내가 직접 저장소를 운영할 수 있다니.. 벌써부터 재밌네요. GitLab 만세!</p></blockquote><br><h1 id="설치-환경"><a href="#설치-환경" class="headerlink" title="설치 환경"></a>설치 환경</h1><p>GitLab은 Ubuntu, Debian, CentOS 8 심지어 Rasberry Pi2의 OS를 지원합니다.<br>클라우드도 AWS와 GCP는 물론 MS의 Azure까지..<br>설치 방법으로는 Docker와 소스를 통한 설치등 많은 환경을 지원합니다.</p><blockquote><p>이정도면 깃랩이 아니라 갓랩 아닙니까?</p></blockquote><p>저는 이 중에서 공식적으로 지원하지는 않지만 MacOS에 Docker를 이용해 공부용 맥북에 세팅해보려 합니다.</p><blockquote><p>Docker…. 또커…</p></blockquote><p>GitLab은 커뮤니티 버전(CE)과 엔터프라이즈 버전(EE)이 있는데 저는 커뮤니티 버전의 도커 이미지를 사용해 설치할겁니다.</p><p>Docker 이미지 설치 및 운영 방법은 크게 세가지로 아래와 같습니다.</p><ul><li>Docker Engine</li><li>Docker Compose</li><li>Docker Swwarm mode</li></ul><p>저는 이 중 Docker Compose를 이용해 설치 할겁니다.<br>설명이 장황하고 어려워 보이지만 막상 설치 스텝은 얼마 되지 않습니다.<br>곧 직접 설치한 GitLab에 접속할 수 있을겁니다. :)</p><br><h2 id="선수-조건"><a href="#선수-조건" class="headerlink" title="선수 조건"></a>선수 조건</h2><p>Docker Compose를 이용해 설치할 것이기 때문에 Docker와 Docker Compose가 설치되어 있어야 합니다.<br><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">Docker 설치 링크</a><br><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose 설치 가이드 링크</a></p><br><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><h2 id="docker-compose-yml-작성"><a href="#docker-compose-yml-작성" class="headerlink" title="docker-compose.yml 작성"></a>docker-compose.yml 작성</h2><p>저는 gitlab이라는 폴더를 만들어 이곳에서 GitLab의 데이터와 백업등 모든것을 관리할 겁니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir gitlab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gitlab</span></span><br></pre></td></tr></table></figure><p>gitlab 폴더 안에서 docker-compose.yml를 작성해 사용할 docker 이미지와 gitlab 운영에 관련된 환경세팅을 설정할 것입니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi docker-compose.yml</span></span><br></pre></td></tr></table></figure><p>docker-compose.yml 내용</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  image: 'gitlab/gitlab-ce:latest'</span><br><span class="line"><span class="meta">  #</span><span class="bash"> restart: always</span></span><br><span class="line">  container_name: 'gitlab'</span><br><span class="line">  hostname: '127.0.0.1'</span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">      external_url 'http://xxx.xxx.xxx.xxx' # 프로젝트 생성시 앞에 붙을 도메인 또는 IP</span><br><span class="line">      gitlab_rails['gitlab_shell_ssh_port'] = 2224</span><br><span class="line">      # Add any other gitlab.rb configuration here, each on its own line</span><br><span class="line">  ports:</span><br><span class="line">    - '80:80'</span><br><span class="line">    - '443:443'</span><br><span class="line">    - '10022:22' # port 충돌 방지로 외부 포트 10022를 docker 내부포트 22로 연결</span><br><span class="line">  volumes:</span><br><span class="line">    - '$GITLAB_HOME/gitlab/config:/etc/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/logs:/var/log/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/data:/var/opt/gitlab'</span><br><span class="line">    - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups'</span><br></pre></td></tr></table></figure><p>간단히 설명하자면 최신 버전의 gitlab ce 이미지를 사용할 것이고 (지금은 주석이지만)오류로 인해 docker container가 내려갈 경우 다시 재시작할 수 있도록 설정했습니다.<br>호스트 이름은 로컬 호스트인 127.0.0.1, 프로젝트 생성시 외부 접속 가능한 도메인을 설정했습니다.<br>이외 ports는 외부 port와 docker container 내부 port를 매핑해주는 것이고 외부 22번 포트를 그냥 사용할 경우 ssh와 충돌이 일어나기 때문에 10022를 사용했습니다.<br>volumes는 실제 로컬 폴더와 docker container 내부의 폴더를 매핑해 주는 것으로 gitlab docker container에서 만들어진 데이터나 파일들을 로컬에서 접근할 수 있게, 또는 반대로도 가능하도록 연결해줍니다.</p><br><h2 id="docker-compose-실행"><a href="#docker-compose-실행" class="headerlink" title="docker compose 실행"></a>docker compose 실행</h2><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span> // Linux의 경우 /src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-compose up -d</span></span><br></pre></td></tr></table></figure><br><h2 id="정상-실행-확인"><a href="#정상-실행-확인" class="headerlink" title="정상 실행 확인"></a>정상 실행 확인</h2><p>GitLab 이미지가 다운되고 done이라고 로그는 찍혀있지만 실제 내부가 완전히 구동되기 까지는 시간이 오래걸립니다.<br>제 구형 맥북 기준으로 7분정도가 소요되는것으로 확인됐습니다.</p><p>그래서 잘 구동되고 있는지 Docker 로그를 확인해야겠네요.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -f gitlab</span></span><br></pre></td></tr></table></figure><p>구동이 어느정도 진행되고 프로메테우스 또는 프로덕션 로그가 올라오면 구동에 성공했다고 볼 수 있습니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt; /var/log/gitlab/gitlab-rails/production.log &lt;==</span><br><span class="line">Started GET "/-/metrics" for 127.0.0.1 at 2020-05-30 05:56:55 +0000</span><br><span class="line">Processing by MetricsController#index as HTML</span><br><span class="line">Completed 200 OK in 13ms (Views: 1.4ms | ActiveRecord: 0.0ms | Elasticsearch: 0.0ms | Allocations: 710)</span><br><span class="line"></span><br><span class="line">==&gt; /var/log/gitlab/gitlab-rails/sidekiq_exporter.log &lt;==</span><br><span class="line">[2020-05-30T05:56:59.927+0000] 127.0.0.1 - - [30/May/2020:05:56:59 UTC] "GET /metrics HTTP/1.1" 200 9863 "-" "Prometheus/2.16.0"</span><br></pre></td></tr></table></figure><p>이제 컨트롤 + C를 눌러 로그에서 빠져 나옵니다.</p><p>docker ps 명령어로 현재 잘 구동되고있는지 확인해줍니다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS                    PORTS                                                             NAMES</span><br><span class="line">ce25f2d0adad        gitlab/gitlab-ce:latest   "/assets/wrapper"   17 minutes ago      Up 17 minutes (healthy)   0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:10022-&gt;22/tcp   gitlab</span><br></pre></td></tr></table></figure><p>STATUS에 Up 타임과 healthy로 나온다면 축하드립니다.<br>구동에 성공했어요!</p><br><h2 id="설치한-GitLab-사이트-접속"><a href="#설치한-GitLab-사이트-접속" class="headerlink" title="설치한 GitLab 사이트 접속"></a>설치한 GitLab 사이트 접속</h2><p>이제 웹페이지로 접속 해 봅시다.<br>브라우저를 실행해 <a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a> 접속해 봅니다.</p><p>화면이 정상적으로 보인다면 root 비밀번호를 설정해야합니다.</p><p>sign in에서 root와 설정한 비밀번호로 로그인합니다.</p><p>관리자 계정으로 로그인 완료!!</p><br><h1 id="이외-설정"><a href="#이외-설정" class="headerlink" title="이외 설정"></a>이외 설정</h1><p>혼자 사용할 때는 회원가입 기능이 필요 없기 때문에 비활성화 시켜놓을 필요가 있습니다.</p><p>상단의 Admin Area 아이콘을 눌러 관리자 페이지에 들어갑니다.</p><p>좌측 메뉴 Settings &gt; General &gt; Sign-up restrictions &gt; Sign-up enabled 체크 해제 &gt; 하단 Save changes 클릭</p><br><h2 id="회원-가입-기능-비활성화"><a href="#회원-가입-기능-비활성화" class="headerlink" title="회원 가입 기능 비활성화"></a>회원 가입 기능 비활성화</h2><p>Admin Area 대쉬보드의 New user를 통해 회원가입을 시킬 수 있습니다.</p><br><h1 id="처음부터-다시-세팅"><a href="#처음부터-다시-세팅" class="headerlink" title="처음부터 다시 세팅"></a>처음부터 다시 세팅</h1><p>설치가 제대로 되지 않아 처음부터 다시 세팅하고 싶을 때가 있습니다.</p><p>현재 구동중인 GitLab 컨테이너 중지</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop gitlab</span></span><br></pre></td></tr></table></figure><p>GitLab 데이터 파일 삭제</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf config data logs</span></span><br></pre></td></tr></table></figure><p>백업 파일 삭제</p><blockquote><p>주의! 아래의 명령어는 백업 데이터를 모두 삭제합니다.</p></blockquote><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf backups</span></span><br></pre></td></tr></table></figure><p>세팅 변경 후 재 구동을 진행하면 됩니다.</p><br><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>실제로 운영하기에는 세부 설정을 더 만져야 하지만 처음부터 설치하는 분들에게 도움이 되었으면 좋겠습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;br&gt;
당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다.
그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다.
그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다.
    
    </summary>
    
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/categories/GitLab/"/>
    
    
      <category term="Docker" scheme="https://dev-sawd.github.io/tags/Docker/"/>
    
      <category term="GitLab" scheme="https://dev-sawd.github.io/tags/GitLab/"/>
    
      <category term="Docker-Compose" scheme="https://dev-sawd.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
</feed>
