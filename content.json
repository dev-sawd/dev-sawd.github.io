{"meta":{"title":"SAWD","subtitle":"NOT CODER BUT S.W DEVELOPER","description":"시간이 나야지...","author":"SAWD","url":"https://dev-sawd.github.io","root":"/"},"pages":[{"title":"About","date":"2018-06-11T12:37:37.000Z","updated":"2022-01-26T13:51:21.162Z","comments":true,"path":"about/index.html","permalink":"https://dev-sawd.github.io/about/index.html","excerpt":"","text":"SAWD개발을 좋아하고 학습은 싫..아니 좋아하는 개발자입니다.항상 배우는 자세로 소통을 즐깁니다. 시간이 나면 쓰는 블로그이전부터 공책이나 파일로만 정리해놨던 기술적인 것들을 디지털화 하기 위해서 블로그를 알아보았습니다.요즘에 HEXO라는 것이 기술 블로그에 나쁘지 않다는 의견들이 있어서 시작해보려 합니다.기술 블로그는 너무 딱딱한 느낌이라 일상 블로그처럼 편하게 기억하고 쓰기위해서 사용하려 합니다. 시간이 나야지…"}],"posts":[{"title":"[MySQL] access denied for user","slug":"MySQL-access-denied-for-user","date":"2022-02-13T14:22:14.000Z","updated":"2022-02-13T14:29:31.213Z","comments":true,"path":"2022/02/13/MySQL-access-denied-for-user/","link":"","permalink":"https://dev-sawd.github.io/2022/02/13/MySQL-access-denied-for-user/","excerpt":"","text":"토이 프로젝트를 만드는 중에 프로시져를 사용해야 할 일이 생김 프로시져에 대해서 공부하고 테스트 서버에서 프로시져 생성 명령어를 실행하는데 아래와 같은 에러 발생 1Access denied for user &#39;root&#39;@&#39;%&#39; to database &#39;information_schema&#39; 거의 반나절을 구글링과 스택오버플로우를 찾아봤는데도 해답을 찾을 수 없었음 대부분 권한 문제 때문이라고 하는데 이미 필요한 권한은 다 가지고있었음 그리고 며칠 지나 다시 문제를 풀어보려고 열었는데 에러 문구에 database &#39;information_schema&#39; 부분이 자꾸 거슬렸음 그래서 이 부분에 초점을 두고 database를 내가 원하는 데이터베이스로 설정 후 프로시져를 생성하니 성공 123use my_database&#x2F;&#x2F; procedure 생성 너무 허무하다.. 😪","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://dev-sawd.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://dev-sawd.github.io/tags/MySQL/"}]},{"title":"[Docker] no matching manifest for linux/arm64/v8 in the manifest list entries","slug":"Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries","date":"2022-02-07T06:05:33.000Z","updated":"2022-02-07T06:25:45.776Z","comments":true,"path":"2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/","link":"","permalink":"https://dev-sawd.github.io/2022/02/07/Docker-no-matching-manifest-for-linux-arm64-v8-in-the-manifest-list-entries/","excerpt":"","text":"M1 맥북 에어를 구입하고 Docker를 이용해 이미지를 받을때 아래와 같은 문제가 발생 123% docker pull hyperledger&#x2F;fabric-javaenv:2.42.4: Pulling from hyperledger&#x2F;fabric-javaenvno matching manifest for linux&#x2F;arm64&#x2F;v8 in the manifest list entries M1 환경에서 발생하는 문제로 보임 --platform linux/x86_64 인자를 주어 실행하면 정상적으로 받아오는것을 확인 1% docker pull --platform linux&#x2F;x86_64 hyperledger&#x2F;fabric-javaenv:2.4 https://unluckyjung.github.io/develop-setting/2021/03/27/M1-Docker-Mysql-Error/ https://stackoverflow.com/a/67361161","categories":[{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"},{"name":"M1 MacBook Air","slug":"M1-MacBook-Air","permalink":"https://dev-sawd.github.io/tags/M1-MacBook-Air/"}]},{"title":"[Golang] go modules 사용","slug":"Golang-go-modules","date":"2022-02-06T10:20:03.000Z","updated":"2022-02-06T12:57:14.931Z","comments":true,"path":"2022/02/06/Golang-go-modules/","link":"","permalink":"https://dev-sawd.github.io/2022/02/06/Golang-go-modules/","excerpt":"govendor (deprecated)Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음 https://github.com/kardianos/govendor Go modules이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음 사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임 https://go.dev/blog/using-go-modules","text":"govendor (deprecated)Golang을 처음 접하고 체인코드를 개발할때부터 시간에 쫓겨 의존성 라이브러리 관리를 govendor를 통해 했었음 https://github.com/kardianos/govendor Go modules이제는 1.11부터 Go modules가 도입되면서 govendor 개발자도 1.14부터는 Go modules를 사용하도록 권장하고있음 사실상 govendor는 deprecated 되어 앞으로는 사용하지 않을 것임 https://go.dev/blog/using-go-modules go mod init [module-name]새 모듈을 만들었을때 go mod init 명령어로 go.mod 파일 작성 1go mod init github.com&#x2F;dev-sawd&#x2F; go get [module-name]종속성 모듈을 다운로드 1go get github.com&#x2F;dev-sawd&#x2F; go mod tidy사용되지 않는 종속성 모듈을 제거하거나 추가된 종속성 모듈을 go.mod에 추가 1go mod tidy go mod vendor해당 위치에 종속성 모듈을 vendor 폴더안에 복사 1go mod vendor 프로젝트를 새로 만들었을 경우는 go mod init를 이용해 go.mod를 생성하고 작업하면서 필요한 모듈들을 정리해가며 개발 만약 github에 공유된 모듈들을 받아 직접 실행하는 경우는 go.mod파일이 이미 존재하기 때문에 go get을 이용해 해당 모듈에서 사용하고 있는 모듈들을 다운받아 실행하면 됨 go get등을 이용해 github에 공유되어있는 모듈들을 다운로드 받을 수 없는 경우에는 go mod vendor를 이용해 해당 모듈들을 현재 개발중인 모듈 폴더의 vendor에 복사하게 한 후 모듈 전체를 배포하는 형태로 진행해야함","categories":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/categories/Golang/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"}]},{"title":"[Chaincode] panic recover 샘플","slug":"Chaincode-panic-recover-sample","date":"2022-02-05T16:23:25.000Z","updated":"2022-02-05T16:50:32.950Z","comments":true,"path":"2022/02/06/Chaincode-panic-recover-sample/","link":"","permalink":"https://dev-sawd.github.io/2022/02/06/Chaincode-panic-recover-sample/","excerpt":"체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음 도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨 이러한 방법은 에러 추적이 어려워짐 Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각","text":"체인코드 개발시 런타임 에러로 인해 panic 발생으로 체인코드 도커가 내려가는 상황이 잦음 도커 명령어로 해당 에러가 무엇인지 확인해야 하고 체인코드는 다음 실행됐을때 다시 도커가 올라가면서 작업이 수행됨 이러한 방법은 에러 추적이 어려워짐 Go언어의 panic, recover를 공부하면서 이런 문제를 어느정도 보완할 수 있을것으로 생각 panicGo 내장함수인 panic()함수는 현재 함수를 즉시 멈추고 현재 함수에 defer 함수들을 모두 실행한 후 즉시 리턴한다. 이러한 panic 모드 실행 방식은 다시 상위함수에도 똑같이 적용되고, 계속 콜스택을 타고 올라가며 적용된다. 그리고 마지막에는 프로그램이 에러를 내고 종료하게 된다. &nbsp; recoverGo 내장함수인 recover()함수는 panic 함수에 의한 패닉상태를 다시 정상상태로 되돌리는 함수이다. http://golang.site/go/article/20-Go-defer%EC%99%80-panic &nbsp; smaple code 샘플 프로젝트로 직접 확인해보고 개선해 나갈 예정","categories":[{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/categories/Chaincode/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"},{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/tags/Chaincode/"}]},{"title":"[Chaincode] 체인코드에서의 MVC...?","slug":"Golang-mvc-pattern","date":"2022-02-04T11:45:25.000Z","updated":"2022-02-06T09:57:22.972Z","comments":true,"path":"2022/02/04/Golang-mvc-pattern/","link":"","permalink":"https://dev-sawd.github.io/2022/02/04/Golang-mvc-pattern/","excerpt":"조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리 MVCMVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다. https://developer.mozilla.org/ko/docs/Glossary/MVC Model데이터를 받아 비즈니스 로직을 처리주로 DB와의 상호작용이 해당","text":"조금 더 확실하게 공부해서 앞으로 있을 체인코드 개발에 MVC에 가깝게 구조를 잡고 개발하기위해 정리 MVCMVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 “관심사 분리” 는 더나은 업무의 분리와 향상된 관리를 제공합니다. MVC 에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM (모델-뷰-뷰모델), MVP (모델-뷰-프리젠터), MVW (모델-뷰-왓에버) 가 있습니다. https://developer.mozilla.org/ko/docs/Glossary/MVC Model데이터를 받아 비즈니스 로직을 처리주로 DB와의 상호작용이 해당 View레이아웃과 화면을 처리애플리케이션의 데이터를 보여주는 방식 Controller사용자로부터 요청을 받아 수행할 비즈니스 로직을 제어 &nbsp; Go언어에서의 MVCGo언어에서는 Revel이라고 하는 MVC를 도와주는 웹 프레임워크가 있다고 함 Revel - Go Web Framework &nbsp; 하지만 체인코드에서는..?MVC패턴을 제대로 모르더라도 구조를 보면 많이 익숙한 느낌이 들정도로 개발자들은 자주 접하는 구조하지만 체인코드를 개발할때 MVC를 그대로 사용하기에는 무리가 있어서 조금 내 방식대로 수정호출 순서는 아래와 같다고 생각 사용자 → Controller → Service → DAO → DB 그리고 각 호출에서 필요한 데이터 구조(DTO)를 정의하는 정도로 생각 &nbsp; 폴더 구조직관적으로 각 구조마다 폴더명을 지정해서 관리dao, dto는 service, object등으로 상황에 따라 다르게 사용 123\\GOPROJECT\\SRC\\MVC│ main.go│ &nbsp; 코드 개발을 하면서 반복되는 코드는 계속해서 리펙토링을 통해 제거하고 관리해야함 그래도 나중엔 감당안되긴 해…","categories":[{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/categories/Chaincode/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"},{"name":"Pattern","slug":"Pattern","permalink":"https://dev-sawd.github.io/tags/Pattern/"},{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/tags/Chaincode/"}]},{"title":"Hello Golang","slug":"Hello-Golang","date":"2022-02-03T18:47:41.000Z","updated":"2022-02-04T08:36:32.832Z","comments":true,"path":"2022/02/04/Hello-Golang/","link":"","permalink":"https://dev-sawd.github.io/2022/02/04/Hello-Golang/","excerpt":"","text":"1234567package mainimport \"fmt\"func main() &#123; fmt.Println(\"Hello Golang\")&#125; 가볍게라도 꾸준히!","categories":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/categories/Golang/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"}]},{"title":"[Node.js] 이벤트와 이벤트 리스너","slug":"Node-js-event-and-event-listener","date":"2020-06-09T21:45:10.000Z","updated":"2022-01-26T13:51:21.162Z","comments":true,"path":"2020/06/10/Node-js-event-and-event-listener/","link":"","permalink":"https://dev-sawd.github.io/2020/06/10/Node-js-event-and-event-listener/","excerpt":"events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부","text":"events를 이용해 이벤트 발생 방법과 처리하는 방법에 대해서 공부 123456789101112131415161718192021222324252627282930313233343536373839// event.jsconst EventEmitter = require('events');const myEvent = new EventEmitter();myEvent.addListener('event1', () =&gt; &#123; console.log('이벤트 1');&#125;);myEvent.on('event2', () =&gt; &#123; console.log('이벤트 2');&#125;)myEvent.on('event2', () =&gt; &#123; console.log('이벤트 2 추가');&#125;)myEvent.emit('event1');myEvent.emit('event2');myEvent.once('event3', () =&gt; &#123; console.log('이벤트 3');&#125;);myEvent.emit('event3');myEvent.emit('event3'); // 위의 event3 이벤트만 한번 호출됨myEvent.on('event4', () =&gt; &#123; console.log('이벤트 4');&#125;);myEvent.removeAllListeners('event4');myEvent.emit('event4'); // 위의 removeAllListeners를 통해 event4 리스너가 삭제되어 콜백 호출되지 않음const listener = () =&gt; &#123; console.log('이벤트 5');&#125;;myEvent.on('event5', listener);myEvent.removeListener('event5', listener);myEvent.emit('event5'); // 위의 removeListener를 통해 event5 리스너가 삭제되어 콜백 호출되지 않음console.log(myEvent.listenerCount('event2')); 123456% node event.js이벤트 1이벤트 2이벤트 2 추가이벤트 32 on(이벤트명, 콜백)이벤트 이름과 이벤트 발생 시의 콜백을 연결해주고 이렇게 연결하는 동작을 이벤트 리스닝이라고 부름event2처럼 이벤트 하나에 여러개를 달아줄 수도 있음 addListener(이벤트명, 콜백)on과 기능이 같음 emit(이벤트명)이벤트를 호출하는 메서드이벤트 이름을 인자로 넣어주면 미리 등록해뒀던 이벤트 콜백이 실행됨 once(이벤트명, 콜백)한번만 실행되는 이벤트위의 예제에서 myEvent.emit(‘event3’)을 두 번 연속 호출했지만 콜백이 한번만 실행됨 removeAllListeners(이벤트명)이벤트에 연결된 모든 이벤트 리스너를 제거함event4가 호출되기 전에 이벤트 리스너를 제거했으므로 event4의 콜백은 호출되지 않음 removeListener(이벤트명, 리스너)이벤트에 연결된 리스너를 하나씩 제거event5의 콜백도 호출되지 않음 off(이벤트명, 콜백)노드 10 버전에서 추가된 메서드로, removeListener와 기능이 같음 listenerCount(이벤트명)현재 리스너가 몇 개 연결되어 있는지 확인","categories":[{"name":"Node.js","slug":"Node-js","permalink":"https://dev-sawd.github.io/categories/Node-js/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Node.js] 파일 시스템","slug":"Node-js-file-system","date":"2020-06-09T11:37:51.000Z","updated":"2022-01-26T13:51:21.162Z","comments":true,"path":"2020/06/09/Node-js-file-system/","link":"","permalink":"https://dev-sawd.github.io/2020/06/09/Node-js-file-system/","excerpt":"fs 모듈은 파일 시스템에 접근하는 모듈","text":"fs 모듈은 파일 시스템에 접근하는 모듈 파일 읽기12&#x2F;&#x2F; readme.txtthis is readme.txt 12345678910// readFile.jsconst fs = require('fs');fs.readFile('./readme.txt', (err, data) =&gt; &#123; if (err) &#123; throw err; &#125; console.log(data); // 버퍼로 출력 console.log(data.toString()); // 문자열로 출력&#125;) 123% node readFile.js&lt;Buffer 74 68 69 73 20 69 73 20 72 65 61 64 6d 65 2e 74 78 74 0d 0a&gt;this is readme.txt 동기 메서드와 비동기 메서드setTimeout 같은 타이머와 process.netTick 외에도 노드는 대부분의 메서드를 비동기 방식으로 처리특히 fs 모듈이 비동기 메서드를 많이 가지고있음 1234567891011121314151617181920212223242526// async.jsconst fs = require('fs');console.log('시작');fs.readFile('./readme.txt', (err, data)=&gt; &#123; if (err) &#123; throw err; &#125; console.log('1번', data.toString());&#125;);fs.readFile('./readme.txt', (err, data)=&gt; &#123; if (err) &#123; throw err; &#125; console.log('2번', data.toString());&#125;);fs.readFile('./readme.txt', (err, data)=&gt; &#123; if (err) &#123; throw err; &#125; console.log('3번', data.toString());&#125;);console.log('끝'); 12345678% node async.js시작끝3번 this is readme.txt1번 this is readme.txt2번 this is readme.txt 비동기 메서드들은 백그라운드에 해당 파일을 읽으라고만 요청하고 다음 작업으로 넘어감따라서 파일 읽기 요청만 세번 보내고 console.log(&#39;끝&#39;)을 찍음나중에 읽기가 완료되면 백그라운드가 다시 메인 스레드에 알림을 주고 이때 콜백 함수를 실행 동기와 비동기, 블로킹과 논블로킹노드에서는 비동기와 동기, 블로킹과 논블로킹이라는 네 용어가 혼용됨 동기와 비동기 : 함수가 바로 return 되는지 여부 블로킹과 논 블로킹 : 백그라운드 작업 완료 여부노드에서는 동기-블로킹 방식과 비동기-논블로킹 방식이 대부분 1234567891011// sync.jsconst fs = require('fs');console.log('시작');let data = fs.readFileSync('./readme.txt');console.log('1번', data.toString());data = fs.readFileSync('./readme.txt');console.log('2번', data.toString());data = fs.readFileSync('./readme.txt');console.log('3번', data.toString());console.log('끝'); 123456789% node sync.js시작1번 this is readme.txt2번 this is readme.txt3번 this is readme.txt끝","categories":[{"name":"Node.js","slug":"Node-js","permalink":"https://dev-sawd.github.io/categories/Node-js/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Node.js] 단방향 암호화","slug":"Node-js-simplex-crypto","date":"2020-06-08T12:19:54.000Z","updated":"2022-01-26T13:51:21.161Z","comments":true,"path":"2020/06/08/Node-js-simplex-crypto/","link":"","permalink":"https://dev-sawd.github.io/2020/06/08/Node-js-simplex-crypto/","excerpt":"비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함단방향 암호화 알고리즘은 주로 해시 기법을 사용해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식","text":"비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함단방향 암호화 알고리즘은 주로 해시 기법을 사용해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식 12345const crypto = require('crypto');console.log('base64:', crypto.createHash('sha512').update('비밀번호').digest('base64'));console.log('hex:', crypto.createHash('sha512').update('비밀번호').digest('hex'));console.log('base64:', crypto.createHash('sha512').update('다른 비밀번호').digest('base64')) 1234% node hash.jsbase64: dvfV6nyLRRt3NxKSlTHOkkEGgqW2HRtfu19Ou/psUXvwlebbXCboxIPmDYOFRIpqav2eUTBFuHaZri5x+usy1g==hex: 76f7d5ea7c8b451b773712929531ce92410682a5b61d1b5fbb5f4ebbfa6c517bf095e6db5c26e8c483e60d8385448a6a6afd9e513045b87699ae2e71faeb32d6base64: cx49cjC8ctKtMzwJGBY853itZeb6qxzXGvuUJkbWTGn5VXAFbAwXGEOxU2Qksoj+aM2GWPhc1O7mmkyohXMsQw== createHash(알고리즘)사용할 해시 알고리즘md5, sha1, sha256, sha512등이 가능, 현재는 sha512정도로 충분 update(문자열)변환할 문자열 digest(인코딩)인코딩할 알고리즘base64, hex, latin1이 주로 사용, 그중 base64 결과 문자열이 가장 짧아 애용","categories":[{"name":"Node.js","slug":"Node-js","permalink":"https://dev-sawd.github.io/categories/Node-js/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Node.js] path module","slug":"Node.js-node-js-path-module","date":"2020-06-07T12:26:47.000Z","updated":"2022-01-26T13:51:21.161Z","comments":true,"path":"2020/06/07/Node.js-node-js-path-module/","link":"","permalink":"https://dev-sawd.github.io/2020/06/07/Node.js-node-js-path-module/","excerpt":"폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈운영체제별로 경로 구분자가 다르기 때문에 사용","text":"폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈운영체제별로 경로 구분자가 다르기 때문에 사용 1234567891011121314151617181920212223242526272829303132// /Users/devsawd/hello-world/index.jsconst path = require('path');console.log('path.sep:', path.sep);console.log('path.delimiter:', path.delimiter);console.log('=====================================================================================')console.log('path.dirname(__filename):', path.dirname(__filename));console.log('path.extname(__filename):', path.extname(__filename));console.log('path.basename(__filename):', path.basename(__filename));console.log('path.basename(__filename):', path.basename(__filename, path.extname(__filename)));console.log('=====================================================================================')console.log('path.parse(__filename)', path.parse(__filename));console.log('=====================================================================================')console.log(`path.format(&#123; dir: '/Users/devsawd/hello-world', name: 'index', ext: '.js',&#125;));:`, path.format(&#123; dir: '/Users/devsawd/hello-world', name: 'index', ext: '.js',&#125;));console.log('=====================================================================================')console.log('path.normalize('/Users/devsawd/hello-world/index.js'):', path.normalize('/Users/devsawd/hello-world/index.js'));console.log('=====================================================================================')console.log('path.isAbsolute('/users'):', path.isAbsolute('/users'));console.log('path.isAbsolute('./home'):', path.isAbsolute('./home'));console.log('=====================================================================================')console.log(`path.relative('/Users/devsawd/hello-world/index.js', '/Users'));: `, path.relative('/Users/devsawd/hello-world/index.js', '/Users'));console.log('__dirname:', __dirname);console.log('path.join(__dirname, '..', '/Users', '.', 'devsawd'):', path.join(__dirname, '..', '/Users', '.', 'devsawd'));console.log('path.resolve(__dirname, '..', '/Users', '.', 'devsawd'):', path.resolve(__dirname, '..', '/Users', '.', 'devsawd')); 1234567891011121314151617181920212223242526272829303132hello-world % node index.jspath.sep: /path.delimiter: :=====================================================================================path.dirname(__filename): /Users/devsawd/hello-worldpath.extname(__filename): .jspath.basename(__filename): index.jspath.basename(__filename): index=====================================================================================path.parse(__filename) &#123; root: '/', dir: '/Users/devsawd/hello-world', base: 'index.js', ext: '.js', name: 'index'&#125;=====================================================================================path.format(&#123; dir: '/Users/devsawd/hello-world', name: 'index', ext: '.js',&#125;));: /Users/devsawd/hello-world/index.js=====================================================================================path.normalize('/Users/devsawd/hello-world/index.js') /Users/devsawd/hello-world/index.js=====================================================================================path.isAbsolute('/users') truepath.isAbsolute('./home'): false=====================================================================================path.relative('/Users/devsawd/hello-world/index.js', '/Users'));: ../../..__dirname: /Users/devsawd/hello-worldpath.join(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd/Users/devsawdpath.resolve(__dirname, '..', '/Users', '.', 'devsawd'): /Users/devsawd path.join()인자로 받은 경로들을 합쳐서 문자열 형태로 path를 리턴 path.resolve()기본적으로 path.join과 같지만 오른쪽 인자부터 경로를 합쳐나가며 /를 만나면 절대경로로 인식하고 앞의 인자들을 무시만약 /를 만나지 못한다면 /현재경로/생성된경로 형태로 결과 리턴","categories":[{"name":"Node.js","slug":"Node-js","permalink":"https://dev-sawd.github.io/categories/Node-js/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Data Structure] Circular Linked List","slug":"Data-Structure-circular-linked-list","date":"2020-06-05T12:47:27.000Z","updated":"2022-01-26T13:51:21.149Z","comments":true,"path":"2020/06/05/Data-Structure-circular-linked-list/","link":"","permalink":"https://dev-sawd.github.io/2020/06/05/Data-Structure-circular-linked-list/","excerpt":"원본자료 원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!","text":"원본자료 원본 자료를 전체화면으로 보면 더 쉽게 볼 수 있어요!","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[GitLab] 백업과 복구","slug":"GitLab-backup-and-restore","date":"2020-06-04T09:58:02.000Z","updated":"2022-02-03T19:19:07.297Z","comments":true,"path":"2020/06/04/GitLab-backup-and-restore/","link":"","permalink":"https://dev-sawd.github.io/2020/06/04/GitLab-backup-and-restore/","excerpt":"이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요. 뭔가 3부작 느낌인데..","text":"이번 포스트에서는 Docker를 이용한 GitLab의 백업과 복구를 해보려합니다.어렵고 복잡할 것 같았는데 의외로 간단히 복구가 되네요. 뭔가 3부작 느낌인데.. 아래의 내용은 GitLab 백업 공식 페이지를 참고했습니다. 백업 파일 생성먼저 실행중인 Docker GitLab의 데이터 백업 파일을 생성합니다. 1234567891011121314151617181920212223242526272829303132333435% docker exec -t gitlab gitlab-backup create2020-06-04 01:45:41 +0000 -- Dumping database ...Dumping PostgreSQL database gitlabhq_production ... [DONE]2020-06-04 01:46:12 +0000 -- done2020-06-04 01:46:12 +0000 -- Dumping repositories ...* devsawd/hello-world (@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b) ... [DONE][SKIPPED] Wiki2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping uploads ...2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping builds ...2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping artifacts ...2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping pages ...2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping lfs objects ...2020-06-04 01:46:13 +0000 -- done2020-06-04 01:46:13 +0000 -- Dumping container registry images ...2020-06-04 01:46:13 +0000 -- [DISABLED]Creating backup archive: 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ... doneUploading backup archive to remote storage ... skippedDeleting tmp directories ... donedonedonedonedonedonedonedoneDeleting old backups ... skippingWarning: Your gitlab.rb and gitlab-secrets.json files contain sensitive dataand are not included in this backup. You will need these files to restore a backup.Please back them up manually.Backup task is done. 제가 생성한 hello-world 프로젝트도 보입니다. 백업 파일 확인저는 docker-compose.yml에 volumes를 이용해 backups 폴더를 지정해놓았습니다.이부분에 대해 이해가 안되는 분들은 Docker를 이용해 GitLab을 설치해보자를 참고해주세요 12volumes: - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups' backups 폴더로 이동해 백업 데이터가 잘 생성되었는지 확인해봅니다. 1234% cd backupsbackups % ls1591235174_2020_06_04_13.0.3_gitlab_backup.tarbackups % GitLab 컨테이너 중지백업 파일이 정상적으로 생성되었다면 실행중인 컨테이너를 종료합니다. 1% docker stop gitlab 백업 파일 임시이동백업파일을 임시적으로 이동시킵니다.저는 하나 상위 폴더인 gitlab 폴더로 이동시켰습니다. 1backups % mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar ../ 데이터 파일 삭제 주의!! 아래의 명령어는 모든 데이터를 삭제합니다. 12backups % cd ..% rm -rf config backups data logs GitLab 컨테이너 실행12% export GITLAB_HOME=$HOME // Linux의 경우 /src% docker-compose up -d 백업 파일 backups 폴더로 복구docker ps 명령어를 이용해 gitlab 컨테이너가 정상적으로 실행됐다면gitlab 폴더로 임시 이동시켰던 백업파일을 다시 backups 폴더로 이동시킵니다. 1% mv 1591235174_2020_06_04_13.0.3_gitlab_backup.tar backups 복구 시작복구 실행 명령어를 실행합니다. 12345678910111213141516171819202122232425262728293031% docker exec -it gitlab gitlab-backup restoreUnpacking backup ... doneBefore restoring the database, we will remove all existingtables to avoid future upgrade problems. Be aware that if you havecustom tables in the GitLab database these tables and all data will beremoved.Do you want to continue (yes/no)? yes2020-06-04 01:59:16 +0000 -- done2020-06-04 01:59:16 +0000 -- Restoring repositories ...* devsawd/hello-world ... [DONE]2020-06-04 01:59:16 +0000 -- done2020-06-04 01:59:16 +0000 -- Restoring uploads ...2020-06-04 01:59:17 +0000 -- done2020-06-04 01:59:17 +0000 -- Restoring builds ...2020-06-04 01:59:17 +0000 -- done2020-06-04 01:59:17 +0000 -- Restoring artifacts ...2020-06-04 01:59:17 +0000 -- done2020-06-04 01:59:17 +0000 -- Restoring pages ...2020-06-04 01:59:17 +0000 -- done2020-06-04 01:59:17 +0000 -- Restoring lfs objects ...2020-06-04 01:59:17 +0000 -- doneThis task will now rebuild the authorized_keys file.You will lose any data stored in the authorized_keys file.Do you want to continue (yes/no)? yesWarning: Your gitlab.rb and gitlab-secrets.json files contain sensitive dataand are not included in this backup. You will need to restore these files manually.Restore task is done. devsawd/hello-world 프로젝트도 복구되었다는 로그가 보입니다. 로그인 후 확인 root, devsawd 계정도 잘 살아있고 프로젝트도 정상적으로 복구되었습니다! 마무리명령어 몇번과 tar 복구파일 하나만으로 GitLab의 데이터들을 복구할 수 있었습니다.일정 기간을 가지고 스냅샷을 찍듯 데이터를 백업하는 방법도 있는데…~ 언제 하지? ~","categories":[{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/categories/GitLab/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"},{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/tags/GitLab/"},{"name":"Docker-Compose","slug":"Docker-Compose","permalink":"https://dev-sawd.github.io/tags/Docker-Compose/"}]},{"title":"[GitLab] 개인 저장소 연동 테스트","slug":"GitLab-create-personal-repository","date":"2020-06-03T11:44:56.000Z","updated":"2022-02-03T19:19:07.299Z","comments":true,"path":"2020/06/03/GitLab-create-personal-repository/","link":"","permalink":"https://dev-sawd.github.io/2020/06/03/GitLab-create-personal-repository/","excerpt":"지난 포스트 Docker를 이용해 GitLab을 설치해보자로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요.","text":"지난 포스트 Docker를 이용해 GitLab을 설치해보자로 GitLab을 설치한 후 정말 제대로 동작하는지 궁금해졌습니다.이번 포스트에서는 저장소를 직접 생성해보고 연동 테스트를 해볼거예요. 저장소 생성 GitLab에 로그인 후 [Create a project]를 클릭합니다. 프로젝트 이름을 적고 생성을 눌러줍니다. 정상적으로 생성되었네요.빨간 박스를 참고해 아래의 스텝에서 저장소를 복제하도록 합니다. 저장소 복제1234567 % git clone http://xxx.xxx.xxx.xxx/devsawd/hello-world.gitCloning into 'hello-world'...Username for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.comPassword for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':warning: You appear to have cloned an empty repository. % cd hello-world 빈 프로젝트를 복제한것이기 때문에 warning이 뜨니 가볍게 무시해줍니다. README.md 파일 생성1% touch README.md Commit and Push12345678910111213141516hello-world % git add README.mdhello-world % git commit -m \"add README\"[master (root-commit) 204db60] add README1 file changed, 0 insertions(+), 0 deletions(-)create mode 100644 README.mdhello-world % git push -u origin masterUsername for 'http://xxx.xxx.xxx.xxx': devsawd@gmail.comPassword for 'http://devsawd@gmail.com@xxx.xxx.xxx.xxx':Enumerating objects: 3, done.Counting objects: 100% (3/3), done.Writing objects: 100% (3/3), 212 bytes | 212.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To http://xxx.xxx.xxx.xxx/devsawd/hello-world.git* [new branch] master -&gt; masterBranch 'master' set up to track remote branch 'master' from 'origin'. 결과 정상적으로 파일이 올라간것이 보입니다!이제 집 밖의 어디에서든 개인 GitLab에 접근해서 사용할 수 있게 되었습니다. 다음에는 이 hello-world 프로젝트를 백업하고 GitLab Docker를 삭제하고 재구동했을때 복구가 되는지 확인해볼거예요.","categories":[{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/categories/GitLab/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"},{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/tags/GitLab/"},{"name":"Docker-Compose","slug":"Docker-Compose","permalink":"https://dev-sawd.github.io/tags/Docker-Compose/"}]},{"title":"[Gitlab] Docker를 이용해 GitLab을 설치해보자","slug":"GitLab-gitlab-with-docker","date":"2020-05-30T10:37:43.000Z","updated":"2022-02-04T04:59:11.430Z","comments":true,"path":"2020/05/30/GitLab-gitlab-with-docker/","link":"","permalink":"https://dev-sawd.github.io/2020/05/30/GitLab-gitlab-with-docker/","excerpt":"당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다. 그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다. 그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다.","text":"당장은 아니지만 코드 저장소를 내부적으로 운영해야될 상황이 있을거라 생각합니다. 그 저장소가 제 개인적인 저장소가 될지, 회사 내부를 저장소가 될지는 잘 모르겠습니다. 그래서 Gitlab을 직접 설치해보고 정리해두려고 합니다. GitLab은 위키와 이슈 추적 기능을 갖춘 웹 기반의 데브옵스 시스템입니다.흔히 우리가 일고있는 Git 저장소로 많이 쓰이는 솔루션중 하나입니다.과거 GitHub에서는 지원하지 않던 Private 저장소를 지원했기에 인기가 많았지만, 최근 GitHub에서도 Private를 지원하고 있어 이슈 추적 기능을 제외하면 기본기능에서는 많이 흡사합니다.개인적인 선호는 GitHub이 단연 마음에 들지만 서두에 적은것 처럼 내부적으로 운영할 수 있도록 설치를 지원하는 GitLab에 정말 감사하고있습니다. 내가 직접 저장소를 운영할 수 있다니.. 벌써부터 재밌네요. GitLab 만세! 설치 환경GitLab은 Ubuntu, Debian, CentOS 8 심지어 Rasberry Pi2의 OS를 지원합니다.클라우드도 AWS와 GCP는 물론 MS의 Azure까지..설치 방법으로는 Docker와 소스를 통한 설치등 많은 환경을 지원합니다. 이정도면 깃랩이 아니라 갓랩 아닙니까? 저는 이 중에서 공식적으로 지원하지는 않지만 MacOS에 Docker를 이용해 공부용 맥북에 세팅해보려 합니다. Docker…. 또커… GitLab은 커뮤니티 버전(CE)과 엔터프라이즈 버전(EE)이 있는데 저는 커뮤니티 버전의 도커 이미지를 사용해 설치할겁니다. Docker 이미지 설치 및 운영 방법은 크게 세가지로 아래와 같습니다. Docker Engine Docker Compose Docker Swwarm mode 저는 이 중 Docker Compose를 이용해 설치 할겁니다.설명이 장황하고 어려워 보이지만 막상 설치 스텝은 얼마 되지 않습니다.곧 직접 설치한 GitLab에 접속할 수 있을겁니다. :) 선수 조건Docker Compose를 이용해 설치할 것이기 때문에 Docker와 Docker Compose가 설치되어 있어야 합니다.Docker 설치 링크Docker Compose 설치 가이드 링크 설치docker-compose.yml 작성저는 gitlab이라는 폴더를 만들어 이곳에서 GitLab의 데이터와 백업등 모든것을 관리할 겁니다. 12$ mkdir gitlab$ cd gitlab gitlab 폴더 안에서 docker-compose.yml를 작성해 사용할 docker 이미지와 gitlab 운영에 관련된 환경세팅을 설정할 것입니다. 1$ vi docker-compose.yml docker-compose.yml 내용 12345678910111213141516171819web: image: 'gitlab/gitlab-ce:latest' # restart: always container_name: 'gitlab' hostname: '127.0.0.1' environment: GITLAB_OMNIBUS_CONFIG: | external_url 'http://xxx.xxx.xxx.xxx' # 프로젝트 생성시 앞에 붙을 도메인 또는 IP gitlab_rails['gitlab_shell_ssh_port'] = 2224 # Add any other gitlab.rb configuration here, each on its own line ports: - '80:80' - '443:443' - '10022:22' # port 충돌 방지로 외부 포트 10022를 docker 내부포트 22로 연결 volumes: - '$GITLAB_HOME/gitlab/config:/etc/gitlab' - '$GITLAB_HOME/gitlab/logs:/var/log/gitlab' - '$GITLAB_HOME/gitlab/data:/var/opt/gitlab' - '$GITLAB_HOME/gitlab/backups:/var/opt/gitlab/backups' 간단히 설명하자면 최신 버전의 gitlab ce 이미지를 사용할 것이고 (지금은 주석이지만)오류로 인해 docker container가 내려갈 경우 다시 재시작할 수 있도록 설정했습니다.호스트 이름은 로컬 호스트인 127.0.0.1, 프로젝트 생성시 외부 접속 가능한 도메인을 설정했습니다.이외 ports는 외부 port와 docker container 내부 port를 매핑해주는 것이고 외부 22번 포트를 그냥 사용할 경우 ssh와 충돌이 일어나기 때문에 10022를 사용했습니다.volumes는 실제 로컬 폴더와 docker container 내부의 폴더를 매핑해 주는 것으로 gitlab docker container에서 만들어진 데이터나 파일들을 로컬에서 접근할 수 있게, 또는 반대로도 가능하도록 연결해줍니다. docker compose 실행12$ export GITLAB_HOME=$HOME // Linux의 경우 /src$ docker-compose up -d 정상 실행 확인GitLab 이미지가 다운되고 done이라고 로그는 찍혀있지만 실제 내부가 완전히 구동되기 까지는 시간이 오래걸립니다.제 구형 맥북 기준으로 7분정도가 소요되는것으로 확인됐습니다. 그래서 잘 구동되고 있는지 Docker 로그를 확인해야겠네요. 1$ docker logs -f gitlab 구동이 어느정도 진행되고 프로메테우스 또는 프로덕션 로그가 올라오면 구동에 성공했다고 볼 수 있습니다. 1234567==&gt; /var/log/gitlab/gitlab-rails/production.log &lt;==Started GET \"/-/metrics\" for 127.0.0.1 at 2020-05-30 05:56:55 +0000Processing by MetricsController#index as HTMLCompleted 200 OK in 13ms (Views: 1.4ms | ActiveRecord: 0.0ms | Elasticsearch: 0.0ms | Allocations: 710)==&gt; /var/log/gitlab/gitlab-rails/sidekiq_exporter.log &lt;==[2020-05-30T05:56:59.927+0000] 127.0.0.1 - - [30/May/2020:05:56:59 UTC] \"GET /metrics HTTP/1.1\" 200 9863 \"-\" \"Prometheus/2.16.0\" 이제 컨트롤 + C를 눌러 로그에서 빠져 나옵니다. docker ps 명령어로 현재 잘 구동되고있는지 확인해줍니다. 123$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESce25f2d0adad gitlab/gitlab-ce:latest \"/assets/wrapper\" 17 minutes ago Up 17 minutes (healthy) 0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:10022-&gt;22/tcp gitlab STATUS에 Up 타임과 healthy로 나온다면 축하드립니다.구동에 성공했어요! 설치한 GitLab 사이트 접속이제 웹페이지로 접속 해 봅시다.브라우저를 실행해 http://127.0.0.1 접속해 봅니다. 화면이 정상적으로 보인다면 root 비밀번호를 설정해야합니다. sign in에서 root와 설정한 비밀번호로 로그인합니다. 관리자 계정으로 로그인 완료!! 이외 설정혼자 사용할 때는 회원가입 기능이 필요 없기 때문에 비활성화 시켜놓을 필요가 있습니다. 상단의 Admin Area 아이콘을 눌러 관리자 페이지에 들어갑니다. 좌측 메뉴 Settings &gt; General &gt; Sign-up restrictions &gt; Sign-up enabled 체크 해제 &gt; 하단 Save changes 클릭 회원 가입 기능 비활성화 Admin Area 대쉬보드의 New user를 통해 회원가입을 시킬 수 있습니다. 처음부터 다시 세팅설치가 제대로 되지 않아 처음부터 다시 세팅하고 싶을 때가 있습니다. 현재 구동중인 GitLab 컨테이너 중지 1$ docker stop gitlab GitLab 데이터 파일 삭제 1$ rm -rf config data logs 백업 파일 삭제 주의! 아래의 명령어는 백업 데이터를 모두 삭제합니다. 1$ rm -rf backups 세팅 변경 후 재 구동을 진행하면 됩니다. 마무리실제로 운영하기에는 세부 설정을 더 만져야 하지만 처음부터 설치하는 분들에게 도움이 되었으면 좋겠습니다.","categories":[{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/categories/GitLab/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"},{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/tags/GitLab/"},{"name":"Docker-Compose","slug":"Docker-Compose","permalink":"https://dev-sawd.github.io/tags/Docker-Compose/"}]},{"title":"[Data Structure] Linked List ADT","slug":"Data-Structure-linked-list-adt","date":"2020-05-29T16:52:17.000Z","updated":"2022-01-26T13:51:21.107Z","comments":true,"path":"2020/05/30/Data-Structure-linked-list-adt/","link":"","permalink":"https://dev-sawd.github.io/2020/05/30/Data-Structure-linked-list-adt/","excerpt":"원본자료","text":"원본자료","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Hyperledger Fabric] 윈도우10에서 Docker를 이용한 fabric-samples 실행","slug":"Hyperledger-Fabric-run-fabric-samples-on-windows10","date":"2020-05-29T08:09:22.000Z","updated":"2022-02-03T19:14:49.217Z","comments":true,"path":"2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/","link":"","permalink":"https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-run-fabric-samples-on-windows10/","excerpt":"Windows10에 docker를 이용한 Hyperledger Fabric Samples를 구동하는 방법을 포스팅합니다.","text":"Windows10에 docker를 이용한 Hyperledger Fabric Samples를 구동하는 방법을 포스팅합니다. 6개월 전에..설치 시도했다가 오류로 인해 실패했습니다.. ㅜㅜ현재 개발을 Windows에서 진행하고 있는데 체인코드 개발을 Fabric 네트워크가 설치된 장비에 FTP로 올리고 명령어로 실행하고..오류 부분 확인해서 수정후 또 FTP로 올리고 명령어로 실행하고 이런 귀찮음을 방지하고 Windows에서 간단한 Fabric 네트워크를 구성하고 FTP로 올리는 귀찮음을 덜면 정말 좋겠다라고 생각했습니다.6개월 전에 실패한 설치기를 다시 시도해보고 성공 결과를 올립니다. Docker 설치 https://www.docker.com/products/docker-desktopwindows stable 버전으로 다운로드합니다.설치 진행중 [윈도우의 Hyper-V 기능 사용]에 체크 후 설치 합니다. Hyper-V 설정 제어판 &gt; Windows 기능 켜기/끄기 &gt; Hyper-V 체크 &gt; 컴퓨터 재부팅 Docker 실행설치한 Docker를 실행합니다.이때 앞선 단계에서 Hyper-V를 설정했음에도 불구하고 Hyper-V를 사용할 수 없다는 팝업과 함께 Docker가 실행되지 않는다면 BIOS에서 가상화 기능이 켜져있는지 확인해야합니다.가상화 기능 enable/disable는 메인보드 제조사마다 조금 상이하니 확인바랍니다.Docker 실행에 성공하면 작업표시줄 트레이에 고래가 컨테이너를 싣고있는 아이콘 트레이가 생깁니다. Go언어 설치 https://golang.org/dl/1.14.3 버전을 설치했습니다.큰 문제 없이 Next만 누르면 설치 가능합니다. GO 환경설정 시작 &gt; 시스템 환경 변수 편집(검색하면 쉽게 찾을 수 있음) &gt; 하단의 환경변수 &gt; {사용자 이름}에 대한 사용자 변수 &gt; GOPATH 확인 GOPATH가 없다면 [새로만들기]를 이용해 추가합니다.변수 : GOPATH값 : C:\\Users{사용자 이름}\\go 1.14.3을 설치하니 자동으로 등록이 돼있었습니다. Node.js 설치 https://nodejs.org/ko/12.17.0 LTS 버전을 설치했습니다.마찬가지로 Next만 누르면 설치 가능합니다. Git 설치 https://git-scm.com/Windows에서는 cmd(커맨드)창에서 명령어를 실행하는게 아닌 Git Bash를 이용해 아래의 명령어를 실행합니다.따라서 Git Bash를 설치하기 위해 git을 설치합니다.2.26.2 버전을 설치했고 옵션은 따로 건드리지 않고 기본옵션을 사용했습니다. git 환경설정12$ git config --global core.autocrlf false$ git config --global core.longpaths true Linux와 Windows의 개행문자와 긴 경로에 대한 설정인데 이해하지 않고 명령어 실행후 잘 설정되었는지 확인만 하고 넘어가도 무방합니다. 컴퓨터 재부팅설정들이 적용될 수 있도록 재부팅을 한번 합니다. Git Bash 실행시작 &gt; Git Bash &gt; 우클릭 &gt; 자세히 &gt; 관리자 권한으로 실행아래의 순서들은 모두 Git Bash에서 실행합니다. windows-build-tools 설치1$ npm install --global windows-build-tools windows-build-tools를 설치합니다. 이때 Successfully installed Python 2.7 이라는 메세지가 나오고 프로세스는 끝나지 않는데 강제종료했습니다. grpc 설치 1$ npm install --global grpc grpc를 설치합니다. fabric-samples 설치 1$ curl -sSL https://bit.ly/2ysbOFE | bash -s version을 명시하면 원하는 버전의 fabric을 받을 수 있습니다. curl -sSL https://bit.ly/2ysbOFE | bash -s 1.4.3 실행설치가 완료되었으니 basic-network를 실행해봅시다 12345678910111213141516171819202122232425262728293031323334353637$ cd fabric-samples/basic-network$ ./start.sh# don't rewrite paths for Windows Git Bash usersexport MSYS_NO_PATHCONV=1docker-compose -f docker-compose.yml downRemoving network net_basicNetwork net_basic not found.docker-compose -f docker-compose.yml up -d ca.example.com orderer.example.com peer0.org1.example.com couchdbCreating network \"net_basic\" with the default driverCreating couchdb ... doneCreating ca.example.com ... doneCreating orderer.example.com ... doneCreating peer0.org1.example.com ... donedocker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2ca1a7ca4131 hyperledger/fabric-peer \"peer node start\" Less than a second ago Up Less than a second 0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp peer0.org1.example.comc3065525760f hyperledger/fabric-orderer \"orderer\" 2 seconds ago Up 2 seconds 0.0.0.0:7050-&gt;7050/tcp orderer.example.com756f03161e5f hyperledger/fabric-ca \"sh -c 'fabric-ca-se…\" 10 seconds ago Up 10 seconds 0.0.0.0:7054-&gt;7054/tcp ca.example.come4dc3f6c1e35 hyperledger/fabric-couchdb \"tini -- /docker-ent…\" 19 seconds ago Up 19 seconds 4369/tcp, 9100/tcp, 0.0.0.0:5984-&gt;5984/tcp couchdb# wait for Hyperledger Fabric to start# incase of errors when running later commands, issue export FABRIC_START_TIMEOUT=&lt;larger number&gt;export FABRIC_START_TIMEOUT=10#echo $&#123;FABRIC_START_TIMEOUT&#125;sleep $&#123;FABRIC_START_TIMEOUT&#125;# Create the channeldocker exec -e \"CORE_PEER_LOCALMSPID=Org1MSP\" -e \"CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp\" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx2020-05-30 00:28:15.276 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized2020-05-30 00:28:15.300 UTC [cli.common] readBlock -&gt; INFO 002 Received block: 0# Join peer0.org1.example.com to the channel.docker exec -e \"CORE_PEER_LOCALMSPID=Org1MSP\" -e \"CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp\" peer0.org1.example.com peer channel join -b mychannel.block2020-05-30 00:28:15.621 UTC [channelCmd] InitCmdFactory -&gt; INFO 001 Endorser and orderer connections initialized2020-05-30 00:28:15.723 UTC [channelCmd] executeJoin -&gt; INFO 002 Successfully submitted proposal to join channel 채널 조인까지 완료되는 것을 볼 수 있습니다. 마무리정리하고 보니 생각보다 이것저것 설치해야 할 것들이 많네요.확실한건 Mac이나 Linux가 개발자들에게는 이런 불편함들을 어느정도 해소해줄 수 있는 OS이지 않을까 싶습니다.이 포스트는 정말 Windows에서 환경구축이 필요해 임시적으로 쓰는 분들에게는 도움이 될 수 있을것 같습니다.","categories":[{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"https://dev-sawd.github.io/categories/Hyperledger-Fabric/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"},{"name":"Windows","slug":"Windows","permalink":"https://dev-sawd.github.io/tags/Windows/"},{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"}]},{"title":"[Hyperledger Fabric] fabric 버전을 확인하는 방법","slug":"Hyperledger-Fabric-how-to-check-fabric-version","date":"2020-05-29T01:36:27.000Z","updated":"2022-01-26T13:51:21.102Z","comments":true,"path":"2020/05/29/Hyperledger-Fabric-how-to-check-fabric-version/","link":"","permalink":"https://dev-sawd.github.io/2020/05/29/Hyperledger-Fabric-how-to-check-fabric-version/","excerpt":"지난번 포스트에서 Windows10에 docker와 hyperledger fabric samples 실행을 성공했다고 언급한적이 있습니다.그리고는 제대로 테스트하기 위해서 제 github에 올라가있는 basic-netowrk를 다운받아 실행했습니다.항상 공부용 맥북에서만 개발,테스트 후 원격 저장소에 푸쉬했기 때문에 Windows에서도 문제없이 돌아갈지 궁금했거든요.","text":"지난번 포스트에서 Windows10에 docker와 hyperledger fabric samples 실행을 성공했다고 언급한적이 있습니다.그리고는 제대로 테스트하기 위해서 제 github에 올라가있는 basic-netowrk를 다운받아 실행했습니다.항상 공부용 맥북에서만 개발,테스트 후 원격 저장소에 푸쉬했기 때문에 Windows에서도 문제없이 돌아갈지 궁금했거든요. start.sh로 실행했는데.. 시작부터 에러가 발생합니다. 1234567891011$ ./start.shorg1.example.com2020-05-29 11:56:21.048 KST [common.tools.configtxgen] main -&gt; FATA 001 Missing channelID, please specify it with '-channelID'2020-05-29 11:56:21.116 KST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration2020-05-29 11:56:21.142 KST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: C:\\Users\\KimYongTaek\\hyperledger-fabric-basic-network\\configtx.yaml2020-05-29 11:56:21.142 KST [common.tools.configtxgen] doOutputChannelCreateTx -&gt; INFO 003 Generating new channel configtx2020-05-29 11:56:21.142 KST [common.tools.configtxgen] main -&gt; FATA 004 Error on outputChannelCreateTx: could not generate default config template: error parsing configuration: error adding policies to channel group: no policies defined2020-05-29 11:56:21.189 KST [common.tools.configtxgen] main -&gt; INFO 001 Loading configuration2020-05-29 11:56:21.225 KST [common.tools.configtxgen.localconfig] Load -&gt; INFO 002 Loaded configuration: C:\\Users\\KimYongTaek\\hyperledger-fabric-basic-network\\configtx.yaml2020-05-29 11:56:21.225 KST [common.tools.configtxgen] doOutputAnchorPeersUpdate -&gt; INFO 003 Generating anchor peer update2020-05-29 11:56:21.225 KST [common.tools.configtxgen] main -&gt; FATA 004 Error on inspectChannelCreateTx: error parsing profile as ch 그럼 그렇지.. 쉽게 될리가.. 에러 로그는 configtxgen을 실행하면서 -channelID 인자를 넣어주지 않아서 생기는 문제였습니다. 1configtxgen -profile OneOrgOrdererGenesis -outputBlock .&#x2F;config&#x2F;genesis.block configtxgen 명령어를 뚫어져라 쳐다보고있는데.. 어? 이상하다.. configtxgen의 위치를 찾아보니 최신 버전으로 설치한 fabric-samples/bin안에 있는 파일을 참조하고 있었습니다.최신 fabric 버전과 구버전 실행 스크립트간의 버전 불일치로 발생한 문제로 보입니다.맥북의 fabric-samples는 5개월 전쯤에 1.4버전대로 설치한것으로 기억합니다. 설치한 fabric의 버전을 알기 위해 맥북(MacOs)과 데스크탑(Windows)의 cryptogen의 version을 확인해봅니다. MacOs 1234567% cd fabric-samples&#x2F;binbin % .&#x2F;cryptogen versioncryptogen: Version: 1.4.3 Commit SHA: b8c4a6a Go version: go1.11.5 OS&#x2F;Arch: darwin&#x2F;amd64 Windows 1234567$ cd fabric-samples&#x2F;bin$ cryptogen versioncryptogen: Version: 2.1.0 Commit SHA: 1bdf97537 Go version: go1.14.1 OS&#x2F;Arch: windows&#x2F;amd64 역시 예상한 대로 버전이 상이합니다. Windows에 깔려있는 fabric-samples를 1.4.3버전으로 재설치 후 다시 실행해보니 정상 작동합니다. 야호! 이제 basic-network의 fabric-samples/bin 폴더의 의존성을 끊기 위해 1.4.3버전의 bin 폴더를 basic-network안에 복사해 넣고start.sh의 bin폴더 경로를 방금 복사한 1.4.3 버전의 bin 폴더로 지정했습니다.앞으로 다른 환경에서도 잘 동작할겁니다 :)","categories":[{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"https://dev-sawd.github.io/categories/Hyperledger-Fabric/"}],"tags":[]},{"title":"[ETC] URL, URI","slug":"ETC-URL-URI","date":"2020-05-27T05:20:28.000Z","updated":"2022-01-26T13:51:21.101Z","comments":true,"path":"2020/05/27/ETC-URL-URI/","link":"","permalink":"https://dev-sawd.github.io/2020/05/27/ETC-URL-URI/","excerpt":"개발을 하다보면, 개발자들끼리 얘기 하다보면 URL이 자주 등장합니다.그리고 문서나 stackoverflow를 이용하다 보면 URI라는 단어도 심심치 않게 보입니다.아직까지 정확히 URL과 URI에 대해 차이점을 명확히 모르는 관계로 정리해보려 합니다.","text":"개발을 하다보면, 개발자들끼리 얘기 하다보면 URL이 자주 등장합니다.그리고 문서나 stackoverflow를 이용하다 보면 URI라는 단어도 심심치 않게 보입니다.아직까지 정확히 URL과 URI에 대해 차이점을 명확히 모르는 관계로 정리해보려 합니다. URL : Uniform Resource Locator ex. http://github.com/ URI : Uniform Resource IdentifierURL 이하의 식별자까지 포함 ex. http://github.com/devsawdex. http://github.com/test URI 예시인 http://github.com/devsawd 와 http://github.com/test 를 보면URL은 http://github.com/ 으로 같고URI는 각각 http://github.com/devsawd, http://github.com/test 이 됩니다. 현실은??? : 주소 줘봐!!! : http://github.com/devsawd","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] address already in use error","slug":"ETC-address-already-in-use-error","date":"2020-05-26T07:48:51.000Z","updated":"2022-02-03T19:17:50.595Z","comments":true,"path":"2020/05/26/ETC-address-already-in-use-error/","link":"","permalink":"https://dev-sawd.github.io/2020/05/26/ETC-address-already-in-use-error/","excerpt":"포스트 작성을 위해 hexo server로 프로세스로 돌고있던 터미널을 강제로 종료했습니다.이후 hexo server를 실행하려 하는데 address already in use 에러가 발생했습니다. 간단히 이 에러를 해결해봅시다.","text":"포스트 작성을 위해 hexo server로 프로세스로 돌고있던 터미널을 강제로 종료했습니다.이후 hexo server를 실행하려 하는데 address already in use 에러가 발생했습니다. 간단히 이 에러를 해결해봅시다. 에러 전문은 아래와 같습니다. 1234567891011121314151617181920212223242526% hexo serverAL Port 4000 has been used. Try other port instead.FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: listen EADDRINUSE: address already in use :::4000 at Server.setupListenHandle [as _listen2] (net.js:1309:16) at listenInCluster (net.js:1357:12) at Server.listen (net.js:1445:7) at /Users/devsawd/blog/node_modules/hexo-server/lib/server.js:69:12 at Promise._execute (/Users/devsawd/blog/node_modules/bluebird/js/release/debuggability.js:384:9) at Promise._resolveFromExecutor (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:518:18) at new Promise (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:103:10) at checkPort (/Users/devsawd/blog/node_modules/hexo-server/lib/server.js:66:10) at Hexo.module.exports (/Users/devsawd/blog/node_modules/hexo-server/lib/server.js:18:10) at Hexo.tryCatcher (/Users/devsawd/blog/node_modules/bluebird/js/release/util.js:16:23) at Hexo.&lt;anonymous&gt; (/Users/devsawd/blog/node_modules/bluebird/js/release/method.js:15:34) at /Users/devsawd/blog/node_modules/hexo/lib/hexo/index.js:248:17 at Promise._execute (/Users/devsawd/blog/node_modules/bluebird/js/release/debuggability.js:384:9) at Promise._resolveFromExecutor (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:518:18) at new Promise (/Users/devsawd/blog/node_modules/bluebird/js/release/promise.js:103:10) at Hexo.call (/Users/devsawd/blog/node_modules/hexo/lib/hexo/index.js:244:12) at /usr/local/lib/node_modules/hexo-cli/lib/hexo.js:67:17 at tryCatcher (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/util.js:16:23) at Promise._settlePromiseFromHandler (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:547:31) at Promise._settlePromise (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:604:18) at Promise._settlePromise0 (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:649:10) at Promise._settlePromises (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promise.js:729:18) 에러 내용은 4000번 포트가 이미 사용되고 있다는겁니다.4000번 포트를 사용중인 프로세스를 먼저 찾아봐야겠네요. 123% lsof -i :4000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEnode 43609 devsawd 42u IPv6 0x1a23ef236800be15 0t0 TCP *:terabase (LISTEN) PID의 43609번이 사용중으로 확인됩니다.kill 명령어로 해당 프로세스를 종료시킨 후 1% kill -9 43609 1% hexo server hexo server 명령어를 이용해 재구동 하니 정상적으로 사용할 수 있습니다. address already in use에러는 port를 사용하는 프로세스를 다룰때 자주 볼 수 있는 에러입니다.간단히 해당 프로세스를 종료시켜 문제를 해결할 수 있습니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://dev-sawd.github.io/tags/HEXO/"}]},{"title":"[MacOS] 개발 공부를 위한 원격 개발환경 세팅","slug":"MacOS-remote-access-for-dev-study","date":"2020-05-25T12:05:52.000Z","updated":"2022-01-26T13:51:21.085Z","comments":true,"path":"2020/05/25/MacOS-remote-access-for-dev-study/","link":"","permalink":"https://dev-sawd.github.io/2020/05/25/MacOS-remote-access-for-dev-study/","excerpt":"10년 다된 구형 맥북을 보유하고 있습니다.2년 전 부터 이걸 어떻게 활용하면 좋을지 꾸준히 고민했었죠.메인으로 쓰기엔 성능이 떨어지고..그냥 두기에는 뭔가 아까운.. 이 계륵뇨속!","text":"10년 다된 구형 맥북을 보유하고 있습니다.2년 전 부터 이걸 어떻게 활용하면 좋을지 꾸준히 고민했었죠.메인으로 쓰기엔 성능이 떨어지고..그냥 두기에는 뭔가 아까운.. 이 계륵뇨속! 전쟁의 서막최근에 블록체인 Hyperledger Fabric 네트워크를 공부하면서 개발용 장비가 있었으면 했습니다.윈도우 노트북이 있긴 한데 무슨 이유에서인지 Hyperledger Fabric 개발 환경 구성이 잘 진행되지 않더라구요. 윈도우10에서 개발환경 구성에 성공했습니다.가이드도 시간내서 포스팅할게요!가이드 링크 물론 회사에 얘기해서 적절한 개발용 장비를 받아도 됐지만..마음대로 사용할 수 없는게 조금 답답합니다.퇴근때는 꺼놔야 했고, 뭔가 이리 저리 만질 수 없다는 단점이 있었습니다. 이때 생각난 것이 10년된 맥북.공부용이기 때문에 성능이 좋을 필요도 없고 마음대로 변경할 수 있는게 아주 딱이였습니다.이번에 구형 맥북을 공부용으로 써보고자 세팅한 이야기를 하려고 합니다. 문제의 맥북먼저 10년된 구형 맥북의 사진. 두께가 어마어마한 만큼 무게도 상당합니다.따라서 들고다니기에는 무리가 있어 어느 자리에 위치시켜 놓고 원격으로 접속하는게 좋을 것 같다는 생각이 들었습니다.제 방에 와이파이에서 멀지 않은 넓은 공간에 위치 시키고 충전 케이블을 항상 꽂아두었습니다. 우리집 네트워크 구성도이제 네트워크를 설정해야 하는데 우리집은 기본적으로 개발자가 두명에 사용하는 기기도 엄청 많아 고민해야 했습니다. 먼저 외부에서 유선 공유기(1)로 네트워크가 들어옵니다.이 유선 공유기(1)에서 제방, 동생 방의 유무선 공유기(2, 3)로 각각 들어갑니다.제 방의 유무선 공유기(2)는 유선으로 데스크탑, 무선으로 구형 맥북에 연결될 예정이였습니다.동생 방의 유무선 공유기(3)에서는 다시 안방으로 선이 들어가고, 안방에서는 거실로…(사실 여기까지 고민할 필요는 없어 보이지만..) 포트포워딩 설정위에서 얘기한 것과 같이 공유기를 2번 거쳐서 맥북에 들어오는 상황입니다.따라서 포트포워딩을 유선 공유기(1), 유무선 공유기(2)에 각각 설정해줘야 했습니다. 맥북 원격 접속 허용IP 확인 먼저 유선 공유기(1)에 접속해서 외부 인터넷에 연결될때 사용되는 IP를 확인했습니다.11.11.11.11(가칭)으로 확인 되었고 한번 더 확인하기 위해 유선 공유기(1)에 데스크탑을 연결해서 IP를 확인하는 사이트에 들어가서 크로스체크했습니다.그리고 유무선 공유기(2)에 접속해서 유선 공유기(1)로부터 할당받은 IP를 확인했습니다.22.22.22.22(가칭)으로 확인 되었습니다.그리고 유무선 공유기(2)에 무선으로 연결된 맥북의 IP도 확인했습니다.33.33.33.33(가칭)으로 확인 되었습니다. 제가 사용할 포트는 SSH로 22번 포트에 해당합니다.따라서 간단히 외부에서도 22번 포트로 접속하고 22번 포트로 포트포워딩을 설정했습니다.(물론외부에서 다른 포트로 연결하고 포트포워딩을 그에 맞도록 설정한다면 22번포트 외에 다른 번호도 가능합니다.) 순서는 아래와 같을것입니다. 외부에서 11.11.11.11:22로 접속 유선 공유기(1)에서 22번 포트에 대한 장치(유무선 공유기(2))로 포트포워딩 유무선 공유기(2)에서 22번 포트에 대한 장치(맥북)로 포트포워딩 맥북의 22번 포트 사용 포트포워딩위의 2, 3번에 대한 포트포워딩 설정을 해야합니다.유선 공유기(1)에 접속해서 포트포워딩 설정 페이지로 이동 후외부 연결 포트 22를 내부 IP 22.22.22.22와 포트 22로 설정해줍니다.유무선 공유기(2)에 접속해서 포트포워딩 설정 페이지로 이동 후외부 연결 포트 22를 내부 IP 33.33.33.33와 포트 22로 설정해줍니다. 확인이제 외부 네트워크에 연결되어있는 PC를 이용해 putty나 ssh로 11.11.11.11:22로 접속을 확인해봅니다.이때 외부 네트워크를 만들기 힘들다면 테더링을 이용하거나 카페에서 차 한잔의 여유..읍읍..이시국에 만약 확인 작업에서 접속이 되지 않는다면 ISP 외부포트가 완전히 막혀있거나 집으로 들어오는 첫번째 공유기가 알고있는것과 다른 녀석이 존재할 수 있습니다. 포트 체커 사이트를 이용해 22번포트가 열려있는지, 또는 자주 사용하는 다른 포트들이 열려있는지 같이 확인해주면 빨리 찾을 수 있습니다. 저는 집의 데스크탑으로도 맥북에 연결해서 작업 하는데요실질적으로 구형 맥북은 화면도 작고 듀얼모니터로 사용할 케이블도 분실했고.. 이런저런 답답함이 있기 때문입니다.데스크탑은 유무선공유기(2)에 유선으로 연결되어있습니다.같은 네트워크에 있기 때문에 11.11.11.11:22로 접속하지 않아도 33.33.33.33:22를 이용해 맥북에 접속할 수 있습니다.","categories":[{"name":"MacOS","slug":"MacOS","permalink":"https://dev-sawd.github.io/categories/MacOS/"}],"tags":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/tags/ETC/"}]},{"title":"[Github] git 변경사항 되돌리기","slug":"Github-revert-change","date":"2020-05-24T01:55:54.000Z","updated":"2022-01-26T13:51:21.085Z","comments":true,"path":"2020/05/24/Github-revert-change/","link":"","permalink":"https://dev-sawd.github.io/2020/05/24/Github-revert-change/","excerpt":"Git을 이용해 형상관리를 하다 보면 수정사항을 롤백 하고 싶을 때가 자주 있습니다.이 포스트에서는 이전 커밋까지 롤백 하는 방법에 대해서 알아봅니다.","text":"Git을 이용해 형상관리를 하다 보면 수정사항을 롤백 하고 싶을 때가 자주 있습니다.이 포스트에서는 이전 커밋까지 롤백 하는 방법에 대해서 알아봅니다. git add 명령을 하기 이전의 수정사항 롤백12$ cd &#123;respository_directory&#125;respository_directory $ checkout . git add 명령어를 한 이후의 수정사항 롤백1$ git reset git commit을 한 이후 롤백 주의 아래의 명령어는 수정사항이 완전히 삭제됩니다 1$ git reset --hard HEAD~ 원격 저장소에 변경된 이력도 되돌리기원격 저장소에 변경된 이력을 되돌리는 방법은 local 저장소의 새로운 변경사항으로 덮어쓰는것과 개념이 같습니다. 123$ git reset HEAD~$ git commit -m \"commit message\"$ git push origin master 마치며여러 롤백 케이스중에서 자주 사용할 수 있는 상황을 뽑아서 포스팅해봤습니다.이외 더 자세한 롤백 방법은 아래의 사이트에 자세하게 나와있습니다. https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0 중요한것은 롤백을 하기 전 어떻게 이력관리를 할것인지 한번 더 생각해 보는게 중요할 것 같습니다.","categories":[{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/categories/Github/"}],"tags":[{"name":"git","slug":"git","permalink":"https://dev-sawd.github.io/tags/git/"}]},{"title":"[Github] 로컬 저장소의 원격 저장소 URL 변경","slug":"Github-change-remote-repository-url-in-local-repository","date":"2020-05-23T06:35:51.000Z","updated":"2022-01-26T13:51:21.084Z","comments":true,"path":"2020/05/23/Github-change-remote-repository-url-in-local-repository/","link":"","permalink":"https://dev-sawd.github.io/2020/05/23/Github-change-remote-repository-url-in-local-repository/","excerpt":"이 포스트에서는 이미 원격 저장소가 지정되어있는 로컬 폴더의 원격 저장소 url을 변경하는 상황에 대해서 포스팅합니다.","text":"이 포스트에서는 이미 원격 저장소가 지정되어있는 로컬 폴더의 원격 저장소 url을 변경하는 상황에 대해서 포스팅합니다. .git 폴더로 이동 1$ cd test 원격 저장소 url 확인 12$ git remote -vorigin https://github.com/dev-sawd/hyperledger-fabric-basic-network.git (fetch) 저장소 url 변경 1$ git remote set-url origin https://github.com/dev-sawd/hyperledger-fabric-basic-network-multi-org.git 변경된 원격 저장소 url 확인 123% git remote -vorigin https://github.com/dev-sawd/hyperledger-fabric-basic-network-multi-org.git (fetch)origin https://github.com/dev-sawd/hyperledger-fabric-basic-network-multi-org.git (push)","categories":[{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/categories/Github/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/tags/Github/"}]},{"title":"[Data Structure] Linked List","slug":"Data-Structure-Linked-List","date":"2020-05-23T02:48:54.000Z","updated":"2022-01-26T13:51:21.056Z","comments":true,"path":"2020/05/23/Data-Structure-Linked-List/","link":"","permalink":"https://dev-sawd.github.io/2020/05/23/Data-Structure-Linked-List/","excerpt":"원본자료와! 얼마만에 자료구조를 포스팅 하는지..이미 자료는 다 만들어놨는데.. 그간 이런저런 문제와 핑계로 인해 이제 다시 올리게 되었습니다.","text":"원본자료와! 얼마만에 자료구조를 포스팅 하는지..이미 자료는 다 만들어놨는데.. 그간 이런저런 문제와 핑계로 인해 이제 다시 올리게 되었습니다.","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Linux] Foundation of Linux","slug":"LINUX-Foundation-of-Linux","date":"2020-05-21T08:05:01.000Z","updated":"2022-01-26T13:51:21.056Z","comments":true,"path":"2020/05/21/LINUX-Foundation-of-Linux/","link":"","permalink":"https://dev-sawd.github.io/2020/05/21/LINUX-Foundation-of-Linux/","excerpt":"Linux의 파일 구조에 대해서 etc와 var에 대해서 간단하게 찾아보고 이외 제게 필요한 정보들을 기록합니다.","text":"Linux의 파일 구조에 대해서 etc와 var에 대해서 간단하게 찾아보고 이외 제게 필요한 정보들을 기록합니다. 폴더 구조/etc : 시스템 환경 설정 파일이 위치한 디렉토리/var : 운영 중인 시스템의 변화를 체크할 수 있는 파일들의 위치/dev : 장치 파일 디렉토리/opt : 애드온 소프트웨어 패키지 디렉토리 파이프| 문자를 사용해 두 명령어를 이어줌.앞에서 실행한 명령의 결과를 뒤에 적은 명령어의 입력으로 사용. 하드 링크원본 파일과 동일한 inode를 가짐그렇기 때문에 원본 파일이 삭제 되더라도 원본 파일의 inode를 갖고 있는 링크 파일은 여전히 사용 가능원본의 개념이 없음 심볼릭 링크원본 파일의 이름을 가리키는 링크.그러므로 원본 파일이 사라지게되면 역할을 수행할 수 없음.원본 파일과 이름이 같다면 계속 사용 가능 출처하드링크/심볼릭 링크 : https://jybaek.tistory.com/578","categories":[{"name":"Linux","slug":"Linux","permalink":"https://dev-sawd.github.io/categories/Linux/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Golang] JSON marshal/unmarshal시 값의 오차","slug":"Golang-difference-value-when-json-marshal-unmarshal","date":"2020-05-20T12:17:40.000Z","updated":"2022-01-26T13:51:21.056Z","comments":true,"path":"2020/05/20/Golang-difference-value-when-json-marshal-unmarshal/","link":"","permalink":"https://dev-sawd.github.io/2020/05/20/Golang-difference-value-when-json-marshal-unmarshal/","excerpt":"어떤 정보를 주고 받을때 JSON를 자주 사용합니다.Golang은 JSON을 처리하기 위해 데이터를 JSON으로 Marshal, Unmarshal을 거칩니다.이번 포스트에서는 큰 숫자값에 대해서 Marshal, Unmarshal시 값의 차이가 생겼던 경험과 해결에 대해서 적습니다.","text":"어떤 정보를 주고 받을때 JSON를 자주 사용합니다.Golang은 JSON을 처리하기 위해 데이터를 JSON으로 Marshal, Unmarshal을 거칩니다.이번 포스트에서는 큰 숫자값에 대해서 Marshal, Unmarshal시 값의 차이가 생겼던 경험과 해결에 대해서 적습니다. 기본 문법Golang에서 map형태를 만드는 방법123456789101112131415package mainimport ( \"encoding/json\" \"fmt\" \"math\")func main() &#123; maxInt64 := math.MaxInt64 mapObject := make(map[string]interface&#123;&#125;) mapObject[\"int64\"] = maxInt64 fmt.Println(mapObject)&#125; 12&#x2F;&#x2F; 결과map[int64:9223372036854775807] API를 만드는 입장에서 연동하는 외부의 JSON의 모든 자료형을 처리해야 하는 경우가 많기 때문에map[string]interface{}로 지정해서 map의 key는 string이고 value는 모든 자료형을 담을 수 있도록 interface{}로 지정합니다.이 말은 vlaue의 자료형을 명시하지 않는다는 것과 같습니다.이렇게 만들어진 데이터를 byte array로 marshal 작업을 통해 전송하는게 일반적입니다. json.Marshal()12345678910111213141516171819202122package mainimport ( \"encoding/json\" \"fmt\" \"math\")func main() &#123; maxInt64 := math.MaxInt64 mapObject := make(map[string]interface&#123;&#125;) mapObject[\"int64\"] = maxInt64 // marshal var bytes []byte var err error if bytes, err = json.Marshal(mapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(bytes)&#125; 12&#x2F;&#x2F; 결과[123 34 105 110 116 54 52 34 58 57 50 50 51 51 55 50 48 51 54 56 53 52 55 55 53 56 48 55 125] json.Unmarshal()데이터를 받아 처리하는 입장에서는 byte array를 unmarshal하여 구조화합니다. 12345678910111213141516171819202122232425262728package mainimport ( \"encoding/json\" \"fmt\" \"math\")func main() &#123; maxInt64 := math.MaxInt64 mapObject := make(map[string]interface&#123;&#125;) mapObject[\"int64\"] = maxInt64 // marshal var bytes []byte var err error if bytes, err = json.Marshal(mapObject); err != nil &#123; fmt.Println(err.Error()) &#125; //fmt.Println(bytes) // unmarshal unmarshalMapObject := make(map[string]interface&#123;&#125;) if err := json.Unmarshal(bytes, &amp;unmarshalMapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(unmarshalMapObject)&#125; 123&#x2F;&#x2F; 결과map[int64:9223372036854775807]map[int64:9.223372036854776e+18] 문제 확인문제점을 발견했나요?9223372036854775807의 값이 JSON marshal/unmarshal을 거치니 9.223372036854776e+18로 표현되고있습니다.분명 int64의 값을 담아 전송했고 받은 사람은 map[string]interface{}로 unmarshal했지만 Println의 호출된 결과가 달라진 것이죠.map안의 int64값을 확인하기 위해 int64로 형변환하여 확인한 결과는 아래와 같습니다. 1234567891011121314151617181920212223242526272829303132package mainimport ( \"encoding/json\" \"fmt\" \"math\")func main() &#123; maxInt64 := math.MaxInt64 mapObject := make(map[string]interface&#123;&#125;) mapObject[\"int64\"] = maxInt64 // marshal var bytes []byte var err error if bytes, err = json.Marshal(mapObject); err != nil &#123; fmt.Println(err.Error()) &#125; //fmt.Println(bytes) // unmarshal unmarshalMapObject := make(map[string]interface&#123;&#125;) if err := json.Unmarshal(bytes, &amp;unmarshalMapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(unmarshalMapObject) // 형변환 확인 unmarshalMaxInt64 := unmarshalMapObject[\"int64\"].(int64) fmt.Println(unmarshalMaxInt64)&#125; 12345678&#x2F;&#x2F;결과map[int64:9223372036854775807]map[int64:9.223372036854776e+18]panic: interface conversion: interface &#123;&#125; is float64, not int64goroutine 1 [running]:main.main() &#x2F;main.go:20 +0x3ba 이 에러를 해석해보면unmarshal 하는 과정에서 int64가 아닌 float64형태로 암시적으로 변환된다는 얘기입니다.그렇다면 float64로 형 변환 후 강제로 int64로 변환하면 어떻게 될까요? 강제로 int64 형변환 후 값123// ...unmarshalMaxInt64 := int64(unmarshalMapObject[\"int64\"].(float64))fmt.Println(unmarshalMaxInt64) 12&#x2F;&#x2F; 결과-9223372036854775808 산넘어 산우리가 기대한 결과와는 전혀 다른 엉뚱한 값이 결과로 나왔습니다. Overflow가 발생한 것으로 보임 int64의 최대 값에서 갑자기 음수가 되었다는 것은 Overflow가 발생한 것으로 보입니다.앞의 과정에서 int64의 원본 값과 float64로 변환된 값을 보면 800에서 반올림이 발생하였네요..이것은 큰 문제를 야기합니다. 해결 방법진행중인 프로젝트에서 이렇게 큰 수를 사용할일은 없다고 정책적으로 말하고 있지만..개발자 입장에서 운영단계에서의 이런 Overflow 발생으로 문제가 터진다면 골치아플게 뻔합니다.따라서 해결 방법을 찾아보기로 했습니다. vlaue의 자료형을 interface{} 대신 명시적으로 사용1234567891011121314151617181920212223242526272829package mainimport ( \"encoding/json\" \"fmt\" \"math\")func main() &#123; var maxInt64 int64 maxInt64 = math.MaxInt64 mapObject := make(map[string]int64) mapObject[\"int64\"] = maxInt64 // marshal var bytes []byte var err error if bytes, err = json.Marshal(mapObject); err != nil &#123; fmt.Println(err.Error()) &#125; //fmt.Println(bytes) // unmarshal unmarshalMapObject := make(map[string]int64) if err := json.Unmarshal(bytes, &amp;unmarshalMapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(unmarshalMapObject)&#125; 123&#x2F;&#x2F; 결과map[int64:9223372036854775807]map[int64:9223372036854775807] 하지만 위의 방법은 서두에 설명한 것과 같이 API를 개발하는 입장에서 map의 value에 어떤 자료형으로 들어올지 알 수 없기 때문에 실질적으로 사용이 어렵습니다.제 입장에서 이 방법으로 해결하는건 옳지 않았습니다. json decoder, UserNumber()를 이용해 처리1234567891011121314151617181920212223242526272829303132333435363738package mainimport ( \"encoding/json\" \"fmt\" \"math\" \"strings\")func main() &#123; maxInt64 := math.MaxInt64 mapObject := make(map[string]interface&#123;&#125;) mapObject[\"int64\"] = maxInt64 // marshal var bytes []byte var err error if bytes, err = json.Marshal(mapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(mapObject) // decode d := json.NewDecoder(strings.NewReader(string(bytes))) d.UseNumber() var decodeMapObject map[string]interface&#123;&#125; if err := d.Decode(&amp;decodeMapObject); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(decodeMapObject) // 형변환 테스트 var castedMaxInt64 int64 if castedMaxInt64, err = decodeMapObject[\"int64\"].(json.Number).Int64(); err != nil &#123; fmt.Println(err.Error()) &#125; fmt.Println(castedMaxInt64)&#125; 1234&#x2F;&#x2F; 결과map[int64:9223372036854775807]map[int64:9223372036854775807]9223372036854775807 이 방법이 decode 했을때도 값이 float64형태로 변하지 않고 int64 형변환도 문제없이 작동합니다.데이터를 json.Number로 형변환 후 다시 Int64()를 호출해서 자료형을 변환해야 하지만 Overflow가 일어나는 것 보다 훨씬 낫군요.이 방법으로 해결 방향을 잡았습니다. 결론위의 문제는 프로젝트가 개발기간 중간에 발견한 문제입니다.복잡한 로직이 한창 개발되는 상황에서 기초 함수에서 발견된 문제라 자칫 미궁으로 빠질수도 있었던 상황이였는데 정리해 두고 시간이 나는 지금에서야 블로그에 올리게 되었습니다.항상 단위테스트를 통해 개발하는 습관을 가지고 경계값들도 꾸준히 체크한다면 사전에 방지할 수 있는 문제라고 생각됩니다.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/categories/Golang/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] Shell Script 접속사 ;, &, &&","slug":"ETC-Shell-Script","date":"2020-05-19T01:34:48.000Z","updated":"2022-01-26T13:51:21.056Z","comments":true,"path":"2020/05/19/ETC-Shell-Script/","link":"","permalink":"https://dev-sawd.github.io/2020/05/19/ETC-Shell-Script/","excerpt":"리눅스나 SSH로 접속해서 명령어를 실행하는 상황이 자주 생기고 있습니다.그럴때마다 새로운 터미널에서 명령어를 순차적으로 반복해서 입력해야하는 번거로움도 동반합니다.이럴때 shell script를 만들어 반복잡업을 줄일 수 있는데 이 포스트에서는 shell 명령어중에서도 ; &amp; &amp;&amp;에 대해서 써보려합니다.","text":"리눅스나 SSH로 접속해서 명령어를 실행하는 상황이 자주 생기고 있습니다.그럴때마다 새로운 터미널에서 명령어를 순차적으로 반복해서 입력해야하는 번거로움도 동반합니다.이럴때 shell script를 만들어 반복잡업을 줄일 수 있는데 이 포스트에서는 shell 명령어중에서도 ; &amp; &amp;&amp;에 대해서 써보려합니다. &amp;&amp;순차적인 명령어를 제어하다보면 이전 명령어의 성공후 다음명령어를 실행하고, 실패하면 중지해야하는 경우가 있습니다.이때 사용하는 접속사가 &amp;&amp; 입니다. 아래는 실행할 스크립트 정보입니다. 12&#x2F;&#x2F; script.shmkdir test &amp;&amp; cd test &amp;&amp; touch test.txt mkdir test에서 오류가 나지 않을 경우 test폴더에 들어가 test.txt를 생성하게 됩니다. 1234% sh script.sh% cd testtest % lstest.txt 만약 test라는 폴더가 이미 존재해 mkdir test에서 오류가 나지 않을 경우 test.txt파일을 만들지 않을것입니다. 12345% sh script.shmkdir: test: File exists% cd test% ls&#x2F;&#x2F; 생성된 파일이 없음 &amp;&amp;는 해당 명령어를 백그라운드에서 실행할 때 사용합니다. ;;는 여러 명령어를 한줄에 서술할때 앞의 명령어의 성공여부에 상관없이 다음 명령어를 실행합니다. 12&#x2F;&#x2F; script.shmkdir test; cd test; touch test.txt 12345% sh script.shmkdir: test: File exists% cd testtest % lstest.txt 명령어의 모음으로 스크립트를 작성하게 되면 생각보다 빈번하게 사용하는 접속사입니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[MacOS] tree command","slug":"MacOS-tree-command","date":"2020-05-17T01:23:24.000Z","updated":"2022-01-26T13:51:21.055Z","comments":true,"path":"2020/05/17/MacOS-tree-command/","link":"","permalink":"https://dev-sawd.github.io/2020/05/17/MacOS-tree-command/","excerpt":"최근 터미널에서 작업을 자주 하고있는데 폴더 구조를 한번에 봐야하는 경우가 자주 있습니다.전부터 tree 명령어를 알고 있었지만 자주 사용하지 않았는데 이번에 사용해보기 위해 설치했습니다.","text":"최근 터미널에서 작업을 자주 하고있는데 폴더 구조를 한번에 봐야하는 경우가 자주 있습니다.전부터 tree 명령어를 알고 있었지만 자주 사용하지 않았는데 이번에 사용해보기 위해 설치했습니다. MacOS에서 tree를 설치하기 위해서는 brew를 이용해서 설치합니다.먼저 터미널을 열어 brew가 설치되어있는지 버전 명령어를 실행해봅니다. 123$ brew -vHomebrew 2.2.16Homebrew&#x2F;homebrew-core (git revision ffef; last commit 2020-05-17) 이때 brew가 설치되어 있지 않다면 https://brew.sh/에서 아래의 설치 명령어로 설치할 수 있습니다. 12&#x2F;&#x2F; brew 설치가 안된 분들만 해당$ &#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot; brew가 설치되었다면 brew install 명령어를 이용해 tree를 설치합니다. 12345$ brew install treePassword:Error: Running Homebrew as root is extremely dangerous and no longer supported.As Homebrew does not drop privileges on installation you would be giving allbuild scripts full access to your system. 저는 설치과정에서 permission 에러가 발생하였는데 아래의 명령어로 해결할 수 있었습니다. 123$ sudo chown -R $(whoami) &#x2F;usr&#x2F;local&#x2F;libWarning: tree 1.8.0 is already installed and up-to-dateTo reinstall 1.8.0, run &#96;brew reinstall tree&#96; 설치는 완료했지만.. 경고가 뜨네요 1.8.0으로 재설치 하라고합니다.따라서 다시한번 재설치를 해줬습니다 1$ brew reinstall tree 이제 원하는 폴더에서 tree 명령어를 입력하시면 해당 폴더의 하위 폴더 구조를 볼 수 있습니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061$ tree.|-- README.md|-- chaincode| |-- abac| | &#96;-- go| | |-- abac.go| | &#96;-- vendor| | |-- github.com| | | |-- golang| | | | &#96;-- protobuf| | | | |-- LICENSE| | | | &#96;-- proto| | | | |-- clone.go| | | | |-- decode.go| | | | |-- deprecated.go| | | | |-- discard.go| | | | |-- encode.go| | | | |-- equal.go| | | | |-- extensions.go| | | | |-- lib.go| | | | |-- message_set.go| | | | |-- pointer_reflect.go| | | | |-- pointer_unsafe.go| | | | |-- properties.go| | | | |-- table_marshal.go| | | | |-- table_merge.go| | | | |-- table_unmarshal.go| | | | |-- text.go| | | | &#96;-- text_parser.go| | | |-- hyperledger| | | | &#96;-- fabric| | | | |-- LICENSE| | | | |-- core| | | | | &#96;-- chaincode| | | | | &#96;-- shim| | | | | &#96;-- ext| | | | | |-- attrmgr| | | | | | &#96;-- attrmgr.go| | | | | &#96;-- cid| | | | | |-- README.md| | | | | |-- cid.go| | | | | &#96;-- interfaces.go| | | | &#96;-- protos| | | | &#96;-- msp| | | | |-- identities.pb.go| | | | |-- identities.proto| | | | |-- msp_config.go| | | | |-- msp_config.pb.go| | | | |-- msp_config.proto| | | | |-- msp_principal.go| | | | |-- msp_principal.pb.go| | | | &#96;-- msp_principal.proto| | | &#96;-- pkg| | | &#96;-- errors| | | |-- LICENSE| | | |-- README.md| | | |-- appveyor.yml| | | |-- errors.go| | | &#96;-- stack.go| | &#96;-- vendor.json","categories":[{"name":"MacOS","slug":"MacOS","permalink":"https://dev-sawd.github.io/categories/MacOS/"}],"tags":[{"name":"MacOS","slug":"MacOS","permalink":"https://dev-sawd.github.io/tags/MacOS/"}]},{"title":"[Github] 원격 저장소 연결","slug":"Github-connect-remote-repository","date":"2020-05-16T02:22:09.000Z","updated":"2022-01-26T13:51:21.054Z","comments":true,"path":"2020/05/16/Github-connect-remote-repository/","link":"","permalink":"https://dev-sawd.github.io/2020/05/16/Github-connect-remote-repository/","excerpt":"Hyperledger fabric samples를 공부하는데 공부 이력과 자료를 남겨야겠다고 생각했습니다. 이번에 Github에 저장소를 만들고 로컬에 있는 파일들을 올려 관리하는 방법을 설명하려합니다.","text":"Hyperledger fabric samples를 공부하는데 공부 이력과 자료를 남겨야겠다고 생각했습니다. 이번에 Github에 저장소를 만들고 로컬에 있는 파일들을 올려 관리하는 방법을 설명하려합니다. Github 로그인 우측 상단 [+] &gt; New repository Create a new repository 정보 입력 생성된 HTTPS 주소 확인 저장하고자 하는 로컬 폴더로 이동 git 저장소 생성 1$ git init 원격 저장소에 연결 1$ git remote add origin [생성된 HTTPS 주소] Git으로 관리하고자 하는 현재 폴더의 자료를 지정 1$ git add . 로컬 저장소에 커밋 1$ git commit -m &quot;Project init&quot; 원격 저장소에 업로드 1$ git push -u origin master 이 과정에서 github 계정과 비밀번호를 입력 원격 저장소 확인","categories":[{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/categories/Github/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/tags/Github/"}]},{"title":"[Golang] Random Unique String","slug":"Golang-Random-Unique-String","date":"2020-05-15T01:20:35.000Z","updated":"2022-01-26T13:51:21.053Z","comments":true,"path":"2020/05/15/Golang-Random-Unique-String/","link":"","permalink":"https://dev-sawd.github.io/2020/05/15/Golang-Random-Unique-String/","excerpt":"체인코드를 개발하면서 Golang으로 유니크한 Random String을 생성할 필요가 있었습니다. 이 글에서는 난수를 사용해야할 때 주의점에 대해 설명합니다.","text":"체인코드를 개발하면서 Golang으로 유니크한 Random String을 생성할 필요가 있었습니다. 이 글에서는 난수를 사용해야할 때 주의점에 대해 설명합니다. Random은 조심해야할 부분이 몇가지 있는데 아래와 같습니다. Seed값 고속의 동시 접속 Seed는 주로 시각(time.Now().UnixNano())을 인자로 사용합니다. 123456789101112package mainimport ( \"fmt\" \"math/rand\" \"time\")func main() &#123; rand.Seed(time.Now().UnixNano()) // 현재 시각의 nano초를 seed인자로 입력 fmt.Println(rand.Int63())&#125; 랜덤의 개념이기는 하지만 정확히는 Seed를 같은 값을 주게 되면 같은 순서의 랜덤 문자가 나오게됩니다. 여기에서 문제가 발생하는데 동시 접속이 많은 시스템이나 시스템 과부화의 테스트를 진행할 경우 같은 시간에 Seed값이 입력된다면 랜덤값이지만 같은 값이 나올 수 있다는 이야기가 됩니다. 실제로 제가 개발하고 있는 시스템에서 500명의 사용자로 시스템에 접근을 가정했을때 꽤 높은 확률로 일치하는 값의 결과가 나왔습니다. 따라서 저는 조금 더 수준높은 랜덤값을 생성하기위해 공부했는데 이때 사용한 패키지가 crypto/rand입니다. https://golang.org/pkg/crypto/rand/ 패키지 설명으로는 암호로 안전한 난수를 생성할수 있도록 구현했다고 하네요 Package rand implements a cryptographically secure random number generator. 코드 사용은 아래와 같습니다. 123456789101112131415package mainimport ( cryptoRand \"crypto/rand\" \"fmt\" \"math\" \"math/big\" \"math/rand\")func main() &#123; seed, _ := cryptoRand.Int(cryptoRand.Reader, big.NewInt(math.MaxInt64)) rand.Seed(seed.Int64()) fmt.Println(rand.Int63())&#125; 12&#x2F;&#x2F; 결과458626028109884820","categories":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/categories/Golang/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"}]},{"title":"[ETC] Hello world","slug":"hello-world","date":"2020-05-14T12:53:33.000Z","updated":"2022-01-26T13:51:21.053Z","comments":true,"path":"2020/05/14/hello-world/","link":"","permalink":"https://dev-sawd.github.io/2020/05/14/hello-world/","excerpt":"오랜만에 이 블로그에 다시 포스팅하는군요.. 재작년부터 너무너무 바빠서 기술공부만 하느라 블로그는 머릿속에 떠오르지도 않았습니다. 귀찮음을 이겨내고 지금까지 공부한것들을 토대로 천천히 다시 시작!","text":"오랜만에 이 블로그에 다시 포스팅하는군요.. 재작년부터 너무너무 바빠서 기술공부만 하느라 블로그는 머릿속에 떠오르지도 않았습니다. 귀찮음을 이겨내고 지금까지 공부한것들을 토대로 천천히 다시 시작! 그런데 마크다운부터 다시 공부해야하나… 당장은 익숙해 지기 위해 HEXO 명령어를 여기에 메모해두어야겠습니다. hexo 서버 시작 1$ hexo server 새 포스트 작성 1$ hexo new post post-name 배포 1$ hexo deploy --generate","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/tags/ETC/"}]},{"title":"[Data Structure] Linked List(feat. ADT)","slug":"Data-Structure-Linked-List-feat-ADT","date":"2018-07-26T14:11:35.000Z","updated":"2022-01-26T13:51:21.031Z","comments":true,"path":"2018/07/26/Data-Structure-Linked-List-feat-ADT/","link":"","permalink":"https://dev-sawd.github.io/2018/07/26/Data-Structure-Linked-List-feat-ADT/","excerpt":"원본자료오늘 내용은 연결리스트이지만 대부분은 ADT내용이네요.다음시간에 연결리스트쪽을 더 자세하게 볼 수 있을 것 같습니다.","text":"원본자료오늘 내용은 연결리스트이지만 대부분은 ADT내용이네요.다음시간에 연결리스트쪽을 더 자세하게 볼 수 있을 것 같습니다. 기능이라는것에 중심을 둬야합니다. 그래서 이렇게 반복해서.. 앞으로 ADT라는 단어나 개념은 계속 나올테니 이번에 제대로 알아두는게 좋을 것 같네요. 이정도면 얼마나 중요한지... 따라서 \"나는 이렇게 설계해야 하는군\" 이라는 느낌을 가지면 좋겠네요. 장수만 많지 내용은 부실한거같아요.. ㅜㅜ 하지만 ADT에 대해서 아직도 어려운 분들은 꼭 관련 자료나 이 장을 다시한번 정독해주시면 좋을 것 같습니다. 이 포스트는 작성중에 있습니다.","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] Performance about algorithms","slug":"ETC-Performance-about-algorithms","date":"2018-07-25T01:41:53.000Z","updated":"2022-01-26T13:51:21.030Z","comments":true,"path":"2018/07/25/ETC-Performance-about-algorithms/","link":"","permalink":"https://dev-sawd.github.io/2018/07/25/ETC-Performance-about-algorithms/","excerpt":"알고리즘 테스트에는 채점, 확인 프로그램이 사용됩니다.이 입력값 대비 출력값이 올바른지(알고리즘 구조가 맞는지), 속도는 어느정도인지, 메모리는 얼마나 사용하는지 등..만약 올바른 알고리즘이라도 속도나 메모리 사용을 초과하면 잘못된 풀이로 판단합니다. 오늘은 알고리즘 테스트와 관련하여 속도에 대해서 이야기해볼가 합니다.","text":"알고리즘 테스트에는 채점, 확인 프로그램이 사용됩니다.이 입력값 대비 출력값이 올바른지(알고리즘 구조가 맞는지), 속도는 어느정도인지, 메모리는 얼마나 사용하는지 등..만약 올바른 알고리즘이라도 속도나 메모리 사용을 초과하면 잘못된 풀이로 판단합니다. 오늘은 알고리즘 테스트와 관련하여 속도에 대해서 이야기해볼가 합니다. 보통 테스트를 볼때 주 언어를 하나 선택해서 문제를 풉니다.특히 어떤 입력을 받아 한줄 또는 여러줄에 걸쳐 출력을 하는 알고리즘 문제가 많이 출제됩니다. 시스템 입출력 함수, 클래스는 꽤 많습니다.여러분은 어느정도나 알고있나요?주로 사용하는 입출력 함수, 클래스의 속도에 대해서 생각해보신적 있나요? 먼저 bupjae님께서 작성한 수행시간 비교를 보여드릴게요출처는 https://algospot.com/forum/read/2496/ 여기입니다.시간나시면 정독을 추천합니다. 저같은 경우에는 java.util.Scanner를 자주 사용하는데 같은 입출력 클래스인 java.io.BufferedReader에 비해서 무려 6배나 오래걸립니다.습관을 떠나 이정도 속도차이면 분명히 알고 개선해야할 부분이라고 개인적으로 생각했습니다.특히나 수행시간을 타이트하게 잡은 문제일수록 BufferedReader를 써야함에는 이견이 없을겁니다.뭔가 더 공부할 수 있고 습관을 바꿀 수 있는 계기를 마련해준 알고리즘 문제에 감사함을 느꼈습니다. 만약 여러분도 기회나 여유가된다면 알고리즘 문제를 풀어보시길 꼭 추천드립니다. 메모123456789101112131415161718192021222324252627282930import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.OutputStreamWriter;import java.io.InputStreamReader;import java.util.StringTokenizer;import java.io.IOException;public class Main &#123; public static void main(String[] args) &#123; try &#123; BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out)); StringTokenizer st = null; int count = Integer.parseInt(br.readLine()); for(int i = 0; i &lt; count; i++) &#123; st = new StringTokenizer(br.readLine()); int a = Integer.parseInt(st.nextToken()); int b = Integer.parseInt(st.nextToken()); int c = a + b; bw.write(c + \"\\n\"); &#125; bw.flush(); bw.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125;","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] svn vs git","slug":"ETC-svn-vs-git","date":"2018-07-20T07:22:53.000Z","updated":"2022-01-26T13:51:21.029Z","comments":true,"path":"2018/07/20/ETC-svn-vs-git/","link":"","permalink":"https://dev-sawd.github.io/2018/07/20/ETC-svn-vs-git/","excerpt":"이번 포스트는 형상관리에 대해서 적어볼까 합니다.제 경험과 함께 공부하며 새롭게 알게된 사실도 같이 적습니다. 형상관리아마 프로그래밍을 배우고 어느정도 익혔을 어렸을때는 정확히 형상관리에 대해 알지 못했습니다.9년전 3인 프로젝트를 진행해야 했는데, 그 프로젝트의 규모는 생각보다 괜찮은 편이였습니다.저를 제외한 두 사람은 소스코드 관리에 대해서 고민할 수 밖에 없었고 저는 이러한 개념도 없을 초보 시절이였죠.","text":"이번 포스트는 형상관리에 대해서 적어볼까 합니다.제 경험과 함께 공부하며 새롭게 알게된 사실도 같이 적습니다. 형상관리아마 프로그래밍을 배우고 어느정도 익혔을 어렸을때는 정확히 형상관리에 대해 알지 못했습니다.9년전 3인 프로젝트를 진행해야 했는데, 그 프로젝트의 규모는 생각보다 괜찮은 편이였습니다.저를 제외한 두 사람은 소스코드 관리에 대해서 고민할 수 밖에 없었고 저는 이러한 개념도 없을 초보 시절이였죠. 전쟁의 서막그중 한 사람이 SVN에 대해서 얘기하고 제안 했습니다.(아직도 생생하군요.)나머지 한 사람이 “그럴 필요까지 있는가?”라며 반대했습니다.결국 SVN을 사용하지 않기로 결정하고 개발에 착수했습니다.우리는 나름 잘 개발했고 인터페이스도 그럭저럭 괜찮은 편이였습니다. 초반 며칠만 말이죠. 복병을 만나다프로젝트에서 관리해야 할 파일은 점점 늘어만 갔습니다.한 폴더 안에는 일련의 클래스와 헤더들(그때는 C++)이 넘쳐나기 시작했고 다른 사람이 개발한 소스코드를 네이트온으로 받아서 병합해야 하는 시간은 날로 늘어만 갔습니다.소스코드 관리는 점점 힘들어지고 개발해야 하는 기능도 늘어만 갔습니다. 끝내당시 한명이 짜증을 내면서 이짓을 언제까지 해야하는지 푸념했습니다.그가 바로 SVN을 반대한 사람이였습니다. 형상관리를 해야하는 이유앞서 제 이야기에서 형상관리를 해야하는 메세지가 담겨있습니다.고작 3명으로 진행하는 프로젝트에서도 소스코드 병합과 배포등에 많은 시간을 할애 해야 했죠.서로 개발하고있는 소스 버전도 달라서 누구에게는 있는 기능이 누구에게는 없어서 혼동이 오는 경우도 많았습니다.거의 저 일화가 있은 1년정도 후에 공부하면서 SVN을 알게 되었고 제 무지함도 같이 깨닫게 되었습니다.그 이후로 한참동안 SVN을 사용하면서 잘 개발해 왔습니다.git이 제 곁에 훌쩍 다가와 있음에도 말이죠. SVN과 gitSVN과 git은 형상관리를 해준다는 장점과 공통점이 있지만 차이점도 많습니다.대표적으로 git은 local 기반의 저장소, SVN은 중앙(서버) 저장소를 사용하는 구조입니다. 위의 그림이 시각적으로 명확하게 보여주고있습니다.이런 특성을 이용해 차이점이자 git의 장점이 또 있는데, 오프라인 작업이 가능하다는 것 입니다.SVN에서는 코드를 원본에 커밋(푸쉬)할 때 온라인으로 중앙 저장소에 접근 가능해야 합니다.로컬에서 변화가 있으면 중앙 저장소에 커밋해서 다른사람들이 받을 수 있도록 해야합니다. 이런 차이점은 단순히 인터넷접근이 불가능한 공간에서 작업이 가능하다는 장점만을 말하는 것이 아닙니다.중앙 저장소의 고장으로 인해 발생할 수 있는 예외나 불편함을 피할 수 있습니다. git을 사용하면 로컬에 커밋해놓고 중앙 저장소가 정상화 되었거나 복구되었을때 커밋을 푸쉬하면 됩니다.SVN에서 커밋, 푸쉬의 영역이 모호했다면 git에서는 커밋이 로컬 저장소에 저장, 푸쉬가 중앙 저장소에 반영 정도가 될 것입니다. 브랜치에 관하여SVN에서는 저장소에 실제 파일들을 저장합니다.브랜치의 개념은 폴더로 구분 짓습니다.조금 더 쉽게 풀어쓰자면, 어떤 기능을 개발하기 위해 브랜치로 분리해서 작업하게 되면 시스템에 독립된 폴더가 생성되고 그 공간에서 작업하게 됩니다. 반면 git의 경우 해시로 관리되고 이 해시에 이름을 붙인것입니다.이 내용은 복잡하므로 간단히 얘기하면 SVN처럼 폴더를 새로 만들어서 복사본을 만드는 것이 아닙니다.마치 각자 파일들이 바뀌는 것 처럼 동작하게 됩니다.개발자는 작업중인 공간에서 계속해서 작업하면 됩니다. 개인적으로브랜치를 나누는 방법에 대해서 주변 사람들과 이야기 하곤 하는데 정답은 없다고 생각합니다.다만 어느정도의 가이드가 있으면 좋을 큰 틀은 머릿속에 있는데요. Master 브랜치는 지금 당장 배포할 수 있는 수준의 코드를 관리합니다.Dev 브랜치를 만들어 다음 버전에 반영될 Feature들이 모일 브랜치로 관리합니다.나머지는 Feature 단위로 각자 브랜치를 만들어서 개발하고, 개발이 완료되면 Dev에 머지합니다.반영할 Feature 브랜치들이 모두 머지되면 Dev로 부터 Release 브랜치를 만들어 테스트합니다.이때 발생된 버그들을 모두 Release 브랜치에서 처리하여 Dev와 Master로 병합하고 배포합니다.배포가 완료되고 Release, Feature 브랜치들이 필요없다고 판단되는 시점에서 브랜치를 삭제합니다.Master, Dev는 계속해서 관리하여 개발을 진행합니다. 지금 제가 속한 회사는 Master에 모든 작업을 하고있습니다.급하게 배포해야할때 굉장히 어려움이 있죠.제대로 테스트 되지 않은 부분을 배포한다는건 사실 굉장한 스트레스입니다.이런 불완전한 기능은 아직 크리티컬한 타격을 주지 않았지만, 언젠가는 그 크리티컬함을 넘어 사람의 생명까지 위협할 수 있습니다.회사, 단체 구성원들이 한데 모여 규칙을 정하고 그 규칙을 잘 지켜나가는 데에서 이러한 오버헤드를 줄일 수 있습니다. 마치며간단히 SVN과 git을 이야기 하면서 형상관리의 중요성에 대해서도 적어보았습니다.위에서 설명한 것은 정말 초급 부분만 이야기 한 것으로 git은 ‘git 생태계’라는 말이 있을 정도로 무궁무진합니다.하나의 예로 GitHub이 있을 수 있죠.지금은 주제에서 벗어나고 나중에 포스팅할 기회가 있을겁니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] Page Indicator with Fragment","slug":"Android-Page-Indicator-with-Fragment","date":"2018-07-20T02:35:20.000Z","updated":"2022-01-26T13:51:21.028Z","comments":true,"path":"2018/07/20/Android-Page-Indicator-with-Fragment/","link":"","permalink":"https://dev-sawd.github.io/2018/07/20/Android-Page-Indicator-with-Fragment/","excerpt":"오랜만에 또 포스팅 하는군요…오늘은 GitHub의 라이브러리를 이용해 아래와 같은 것을 만들어볼까 합니다.","text":"오랜만에 또 포스팅 하는군요…오늘은 GitHub의 라이브러리를 이용해 아래와 같은 것을 만들어볼까 합니다. 기반 라이브러리는 PageIndicator이고 원본 주소는 아래와 같습니다.https://github.com/romandanylyk/PageIndicatorView 이 라이브러리를 사용하다가 샘플자체가 View로 되어있어서 이해하고 사용하기가 어려웠습니다.마침 이전 강좌들에서 사용했던 Fragment를 이용해서 예제를 바꾸기로 했습니다.라이브러리는 그대로 두고 샘플쪽 코드만 수정할겁니다. Page IndicatorPage Indicator는 위에서 보셨듯 화면 하단에 현재 페이지가 몇번째 페이지인지 알려주는 것을 말합니다.iOS에서는 PageViewController라고도 부릅니다.이 UI를 사용하면 튜토리얼이나 단계가 있는 플로우를 작성하는데 꽤 그럴듯한 UX를 제공할 수 있습니다. 아주 잘 만들어진 라이브러리에 제가 사용하고 싶은 Fragment를 연동하려 합니다. HomeActivity.java단순하게 MainActivity역할을 하는 클래스입니다.전문은 아래와 같습니다. HomeActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101package com.rd.pageindicatorview.home;import android.content.Intent;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.view.Menu;import android.view.MenuItem;import com.rd.PageIndicatorView;import com.rd.pageindicatorview.base.BaseActivity;import com.rd.pageindicatorview.base.BaseFragment;import com.rd.pageindicatorview.customize.CustomizeActivity;import com.rd.pageindicatorview.data.Customization;import com.rd.pageindicatorview.sample.R;import java.util.ArrayList;import java.util.List;public class HomeActivity extends BaseActivity &#123; private PageIndicatorView pageIndicatorView; private Customization customization; private ViewPager viewPager; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.ac_home); customization = new Customization(); initToolbar(); initViews(); &#125; @Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) &#123; boolean customization = requestCode == CustomizeActivity.EXTRAS_CUSTOMIZATION_REQUEST_CODE &amp;&amp; resultCode == RESULT_OK; if (customization &amp;&amp; intent != null) &#123; this.customization = intent.getParcelableExtra(CustomizeActivity.EXTRAS_CUSTOMIZATION); updateIndicator(); &#125; &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.menu_customize, menu); return true; &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case R.id.actionCustomize: CustomizeActivity.start(this, customization); return true; default: return super.onOptionsItemSelected(item); &#125; &#125; @SuppressWarnings(\"ConstantConditions\") private void initViews() &#123; viewPager = findViewById(R.id.viewPager); HomeFragmentAdapter homeFragmentAdapter = new HomeFragmentAdapter(getSupportFragmentManager()); homeFragmentAdapter.setData(createPageList()); viewPager.setAdapter(homeFragmentAdapter); pageIndicatorView = findViewById(R.id.pageIndicatorView); &#125; @NonNull private List&lt;Fragment&gt; createPageList() &#123; int[] colors = &#123;R.color.google_red, R.color.google_yellow, R.color.google_green, R.color.google_blue&#125;; List&lt;Fragment&gt; pageList = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; 4; i++) &#123; BaseFragment baseFragment = new BaseFragment(); Bundle bundle = new Bundle(); bundle.putInt(BaseFragment.BACKGROUND_COLOR, colors[i]); baseFragment.setArguments(bundle); pageList.add(baseFragment); &#125; return pageList; &#125; private void updateIndicator() &#123; if (customization == null) &#123; return; &#125; pageIndicatorView.setAnimationType(customization.getAnimationType()); pageIndicatorView.setOrientation(customization.getOrientation()); pageIndicatorView.setRtlMode(customization.getRtlMode()); pageIndicatorView.setInteractiveAnimation(customization.isInteractiveAnimation()); pageIndicatorView.setAutoVisibility(customization.isAutoVisibility()); &#125;&#125; 코드 전체적으로 라이브러리 사용방법과 설정을 통해 애니메이션, 세로모드 등을 바로바로 적용할 수 있도록 도와주는 코드입니다.여기서 제가 수정한 곳에 포커스를 맞추려 합니다. 집중할 부분12345678private void initViews() &#123; viewPager = findViewById(R.id.viewPager); HomeFragmentAdapter homeFragmentAdapter = new HomeFragmentAdapter(getSupportFragmentManager()); homeFragmentAdapter.setData(createPageList()); viewPager.setAdapter(homeFragmentAdapter); pageIndicatorView = findViewById(R.id.pageIndicatorView);&#125; 뷰를 초기화하는 부분입니다.Fragment용 Adapter인 HomeFragmentAdapter를 만들었고 getSupportFragmentManager를 이용해 생성하였습니다.그 Fragment Adapter에 데이터를 지정하고 뷰 페이저에 setAdpater로 연동하였습니다. 1234567891011121314@NonNullprivate List&lt;Fragment&gt; createPageList() &#123; int[] colors = &#123;R.color.google_red, R.color.google_yellow, R.color.google_green, R.color.google_blue&#125;; List&lt;Fragment&gt; pageList = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; 4; i++) &#123; BaseFragment baseFragment = new BaseFragment(); Bundle bundle = new Bundle(); bundle.putInt(BaseFragment.BACKGROUND_COLOR, colors[i]); baseFragment.setArguments(bundle); pageList.add(baseFragment); &#125; return pageList;&#125; 원래는 레이아웃 xml 이 없고 View를 새로 생성해서 넣는 코드였습니다.하지만 실제 사용시에는 xml을 이용한 레이아웃 작업과 더 나아가 Fragment를 적용하는데 더 좋을 것 같아서 공부한 것을 토대로 수정하였습니다. 각 페이지는 알아보기 쉽게 기존 샘플에서와 같이 색상으로 페이지를 구분할 수 있도록 하였습니다.Bundle을 이용해 Fragment에 색상 값들을 전달 할 수 있습니다.밑에서 보겠지만 Fragment에서는 이 Bundle을 통해 들어온 색상값들을 자기 배경색으로 지정할 겁니다. HomeFragmentAdpater.javaHomeFragmentAdapter.java1234567891011121314151617181920212223242526272829package com.rd.pageindicatorview.home;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import java.util.List;public class HomeFragmentAdapter extends FragmentPagerAdapter &#123; private List&lt;Fragment&gt; fragmentList; public HomeFragmentAdapter(FragmentManager fragmentManager) &#123; super(fragmentManager); &#125; public void setData(List&lt;Fragment&gt; fragmentList) &#123; this.fragmentList = fragmentList; &#125; @Override public Fragment getItem(int position) &#123; return fragmentList.get(position); &#125; @Override public int getCount() &#123; return fragmentList.size(); &#125;&#125; 제가 Fragment를 ViewPager와 연동하기 위해 만든 Fragment Adapter입니다.FragmentPagerAdpater를 상속받아서 생성하였고 위에서 설명한 setData를 정의하였습니다.getItem, getCount너무 간단해서 설명하지 않도록 하겠습니다. BaseFragment.javaBaseFragment.java1234567891011121314151617181920212223242526272829303132333435363738package com.rd.pageindicatorview.base;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import com.rd.pageindicatorview.sample.R;public class BaseFragment extends Fragment &#123; public static final String BACKGROUND_COLOR = \"param1\"; private int backgroundColor; public BaseFragment() &#123; // Required empty public constructor &#125; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); if (getArguments() != null) &#123; backgroundColor = getArguments().getInt(BACKGROUND_COLOR); &#125; &#125; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.fragment_base, container, false); LinearLayout linearLayout = view.findViewById(R.id.linear_layout); linearLayout.setBackgroundColor(ContextCompat.getColor(getContext(), backgroundColor)); return view; &#125;&#125; BaseFragment라고 이름을 짓고 Fragment 를 상속받았습니다.그리고 HomeActivity에서 인자로 사용할 static 변수인 BACKGROUND_COLOR도 지정했습니다.onCreate에서 arguments가 있는지 확인하고 멤버 변수에 색상값을 넣어주었습니다.onCreateView에서 배경이 되는 LinearLayout에 색상값을 이용해 배경색으로 지정하였습니다. fragment_base.xmlfragment_base.xml123456789&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:id=\"@+id/linear_layout\" android:orientation=\"vertical\"&gt;&lt;/LinearLayout&gt; LinearLayout의 width와 height를 match_parent로 지정하였습니다.이 영역에 색을 칠해서 배경으로 사용합니다. 마무리라이브러리 사용자 관점에서는 굉장히 사용하고 싶은데 샘플이 너무 불친절했습니다.xml없이 뷰를 하나 생성하고 색을 칠해서 Page Indicator에 연동해서 사용자에게 보여주는 형태였습니다.사실 Page Indicator에는 Fragment가 더 좋을것 같다는 생각에 프로젝트를 Fork해서 수정했습니다. 제가 수정한 전체 코드는 아래에서 다운받을 수 있습니다.https://github.com/dev-sawd/PageIndicatorViewWithFragment 이 강좌는 한번 더 확장할 에정입니다.실제로 사용할때 ViewPager의 특성에 의해서 고려해야될 부분이 만만치 않기 때문입니다.그럼 또 시간날때 포스팅 하겠습니다!","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Example","slug":"Example","permalink":"https://dev-sawd.github.io/tags/Example/"}]},{"title":"[Data Structure] Recursion","slug":"Data-Structure-Recursion","date":"2018-07-15T12:07:28.000Z","updated":"2022-01-26T13:51:21.016Z","comments":true,"path":"2018/07/15/Data-Structure-Recursion/","link":"","permalink":"https://dev-sawd.github.io/2018/07/15/Data-Structure-Recursion/","excerpt":"원본자료 시작자료구조 두번째 포스팅입니다.인트로보다 짧아서 부담이 덜하네요 ㅎㅎ..","text":"원본자료 시작자료구조 두번째 포스팅입니다.인트로보다 짧아서 부담이 덜하네요 ㅎㅎ.. # 재귀 어떻게 보면 이상하지만 자기 자신을 호출할 수 있습니다. ## 특징 여기에서 설명할 내용은 아니지만, 함수를 호출할때 현재 실행 위치와 정보들을 스택에 담습니다. 그리고 호출한 함수가 끝나면 스택에서 다시 뽑아서 그 상태로 복귀합니다. 하지만 끝나지 않고 계속해서 자기 자신을 호출한다면 스택이 계속해서 차면서 여유 메모리가 없는경우 스택 오버플로우가 발생하여 죽게됩니다. 자세한 내용은 운영체제에서 확인하실 수 있습니다. ## 팩토리얼 # 정리","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Data Structure] Intro","slug":"Data-Structure-Intro","date":"2018-07-11T03:58:09.000Z","updated":"2022-01-26T13:51:20.977Z","comments":true,"path":"2018/07/11/Data-Structure-Intro/","link":"","permalink":"https://dev-sawd.github.io/2018/07/11/Data-Structure-Intro/","excerpt":"시작사실 이 글이 올라간지 며칠 되었고, 작성된지는 더 오래되었는데..스크린샷밖에 없던 포스트에서 글을 덧붙입니다.최근에 스터디를 시작하면서 자료구조파트를 맡아서 정리, 발표하게 되었는데그때 정리했던 내용과 제 개인적인 생각들이 많이 들어간 포스팅이라 할 수 있겠네요. 원본 자료 PPT를 슬라이드쇼로 넘겨보면 조금 더 재밌게 보실 수 있습니다.원본자료 자료구조","text":"시작사실 이 글이 올라간지 며칠 되었고, 작성된지는 더 오래되었는데..스크린샷밖에 없던 포스트에서 글을 덧붙입니다.최근에 스터디를 시작하면서 자료구조파트를 맡아서 정리, 발표하게 되었는데그때 정리했던 내용과 제 개인적인 생각들이 많이 들어간 포스팅이라 할 수 있겠네요. 원본 자료 PPT를 슬라이드쇼로 넘겨보면 조금 더 재밌게 보실 수 있습니다.원본자료 자료구조 ## 분류 선형구조와 단순구조에 대해서는 학습이나 실습을 통해 많이 접하는 구조입니다. 그에 비해 비선형구조와 파일구조는 접할 기회가 더딥니다. 약간의 실무 경험과 지식을 통해 알고는 있지만 이번 스터디에서 특히 제가 집중하고자 하는 부분이기도 합니다. (트리와 그래프에 약해요..) ## with 알고리즘 자료구조는 항상 알고리즘을 떼놓고 얘기 할 수 없죠 ## 성능 현실적으로 그래프를 만족하는 최적화되어있는 알고리즘을 구현하기란 쉽지 않습니다. 많은 선대 개발자들이 그에 가장 가깝게 만들어놓은 알고리즘들을 우리가 편하게 사용하고 있습니다. ## 빅-오(O) 알고리즘 성능을 수치로 나타내기 위해 자주 사용되는 기본 빅오입니다. 이것들을 순서대로 나열해봤습니다. ~~화질구지네~~ 더 자세한 내용을 알고싶으신 분은 Data Structure Operations를 검색하시면 됩니다. 간단히 각 자료구조의 연산(검색, 삽입, 삭제 등)에 따른 성능 비교입니다. # 정리 무조건 좋은 알고리즘은 없습니다. 앞에서 얘기한대로 상황에 알맞게 구현하고 사용해야 합니다. ~~이건 온전히 제 얘기인데..읍읍~~ 생각보다 라이브러리는 믿고 사용 할 수 있습니다. 지금도 라이브러리를 개선하고 더 빠르게 만드려는 노력들이 세계 곳곳에서 일어나고 있습니다. 네... 다시한번 제 얘기 였구요~? 책을 한권 선정해서 읽으면서 정리한것과 제가 원래 가지고 있던 지식들을 섞어서 PPT로 만들어보았습니다. 앞부분을 읽다보면 제가 집중해서 봐야할 부분들이 조금씩 보이네요. 스터디를 진행하면서 앞으로 PPT를 계속 만들게 될 것 같으니 시간 날 때마다 포스팅하겠습니다.","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] Fragment with ViewPager Example","slug":"Android-Fragment-with-ViewPager-Example","date":"2018-07-02T11:58:31.000Z","updated":"2022-01-26T13:51:20.976Z","comments":true,"path":"2018/07/02/Android-Fragment-with-ViewPager-Example/","link":"","permalink":"https://dev-sawd.github.io/2018/07/02/Android-Fragment-with-ViewPager-Example/","excerpt":"오늘은 며칠동안 틈틈이 준비한 ViewPager와 Fragment를 이용한 화면전환 예제를 만들어보려 합니다.며칠동안이라 했지만 거창하게 만들 시간은 없어서 정말 간단히 하려고 노력했습니다. ViewPager뷰페이저란 사용자가 Swipe나 Tab 등을 통해서 현재 보는 화면 다음 화면을 Smooth하게 시각적으로 보여주도록 도와줍니다.주로 Application을 설치하고 튜토리얼을 진행하는 과정에서 좌우로 휙휙 넘기면서 설명하는 곳에서 많이 사용합니다. 화면구성우리가 만들 화면은 아래와같이 3 페이지입니다. 각 페이지를 색깔로 구분하였고, 각각의 Fragment를 따로 작성하였습니다.","text":"오늘은 며칠동안 틈틈이 준비한 ViewPager와 Fragment를 이용한 화면전환 예제를 만들어보려 합니다.며칠동안이라 했지만 거창하게 만들 시간은 없어서 정말 간단히 하려고 노력했습니다. ViewPager뷰페이저란 사용자가 Swipe나 Tab 등을 통해서 현재 보는 화면 다음 화면을 Smooth하게 시각적으로 보여주도록 도와줍니다.주로 Application을 설치하고 튜토리얼을 진행하는 과정에서 좌우로 휙휙 넘기면서 설명하는 곳에서 많이 사용합니다. 화면구성우리가 만들 화면은 아래와같이 3 페이지입니다. 각 페이지를 색깔로 구분하였고, 각각의 Fragment를 따로 작성하였습니다. 그리고 화면 전환시 아래와 같이 지금 화면이 작아지고 다음에 올 화면이 오른쪽 또는 왼쪽에 보이는 애니메이션을 넣을겁니다. MainActivityMainActivity.javaMainActivity에서는 FragmentPagerAdapter를 이용해 Fragment들간의 페이지 설정과 애니메이션을 지정할겁니다. MainActivity.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.example.sawd.viewpagerwithfragment;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;public class MainActivity extends AppCompatActivity &#123; int MAX_PAGE = 3; Fragment currentFragment = new Fragment(); @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ViewPager viewPager = findViewById(R.id.view_pager); viewPager.setPageTransformer(true, new ZoomOutPageTransformer()); viewPager.setAdapter(new SawdFragmentAdatper(getSupportFragmentManager())); &#125; class SawdFragmentAdatper extends FragmentPagerAdapter &#123; private SawdFragmentAdatper(FragmentManager fm) &#123; super(fm); &#125; @Override public Fragment getItem(int position) &#123; if (position &lt; 0 || MAX_PAGE &lt;= position) return null; switch (position) &#123; case 0: currentFragment = new SawdFragment1(); break; case 1: currentFragment = new SawdFragment2(); break; case 2: currentFragment = new SawdFragment3(); break; &#125; return currentFragment; &#125; @Override public int getCount() &#123; return MAX_PAGE; &#125; &#125;&#125; 코드블록 단위로 쪼개서 분석해보겠습니다. 1viewPager.setPageTransformer(true, new ZoomOutPageTransformer()); 위의 코드를 이용해 페이지 이동시 애니메이션을 지정할 수 있습니다.ZoomOutPageTransformer 클래스 코드는 Android Developer사이트에서 가져왔고 뒤에 코드를 서술하겠습니다. 1viewPager.setAdapter(new SawdFragmentAdatper(getSupportFragmentManager())); ViewPager에 Adapter를 설정하고 Fragment를 관리할 수 있도록 해당 액티비티의 SupportFragmentManager를 인자로 넘겨줍니다.우리는 Adapter를 커스터마이징하기 위해 FragmentPagerAdapter를 상속받은 SawdFragmentAdapter를 만들겁니다. 12345678910111213141516171819202122232425262728293031323334353637383940package com.example.sawd.viewpagerwithfragment;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;class SawdFragmentAdatper extends FragmentPagerAdapter &#123; private SawdFragmentAdatper(FragmentManager fm) &#123; super(fm); &#125; @Override public Fragment getItem(int position) &#123; if (position &lt; 0 || MAX_PAGE &lt;= position) return null; switch (position) &#123; case 0: currentFragment = new SawdFragment1(); break; case 1: currentFragment = new SawdFragment2(); break; case 2: currentFragment = new SawdFragment3(); break; &#125; return currentFragment; &#125; @Override public int getCount() &#123; return MAX_PAGE; &#125;&#125; 필수로 getItem 메소드와 getCount 메소드를 오버라이딩 해야합니다.코드로 간단히 알 수 있듯 getItem에서는 각 페이지별로 보여줄 Fragment를, getCount는 페이지수를 리턴합니다.이부분에서 정말 다양하게 코드들을 작성 할 수 있습니다. activity_main.xml레이아웃은 ConstraintLayout안에 ViewPager만 꽉채워서 넣었습니다. 123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"xmlns:app=\"http://schemas.android.com/apk/res-auto\"xmlns:tools=\"http://schemas.android.com/tools\"android:layout_width=\"match_parent\"android:layout_height=\"match_parent\"tools:context=\".MainActivity\"&gt;&lt;android.support.v4.view.ViewPager android:id=\"@+id/view_pager\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_marginBottom=\"8dp\" android:layout_marginEnd=\"8dp\" android:layout_marginLeft=\"8dp\" android:layout_marginRight=\"8dp\" android:layout_marginStart=\"8dp\" android:layout_marginTop=\"8dp\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; SawdFragmentSawdFragment1~3.javaFragment를 상속받은 SawdFragment 클래스를 3개 만들었습니다.내용은 완전히 같고 inflate에 들어가는 layout만 다르기 때문에 1을 기준으로 설명할게요. 123456789101112131415161718192021package com.example.sawd.viewpagerwithfragment;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.constraint.ConstraintLayout;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class SawdFragment1 extends Fragment &#123; public SawdFragment1() &#123; &#125; @Nullable @Override public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; return inflater.inflate(R.layout.fragment_sawd1, container, false); &#125;&#125; fragment_sawd1.xml의 내용을 inflate하여 View로 만듭니다.이 View가 MainActivity의 ViewPager에 적용된다고 생각하면 편합니다. 만약 Fragment안에 있는 뷰를 찾기 위해 findViewById() 메소드를 써야한다면 onCreate()에서 아래와 같이 접근할 수 있습니다. 123View parentView = inflater.inflate(R.layout.fragment_sawd1, container, false);View childView = parentView.findViewById(R.id.child_view);// Something to do about childView fragment_sawd1~3.xml12345678&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.constraint.ConstraintLayoutxmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"android:layout_height=\"match_parent\"android:id=\"@+id/constraint_layout\"android:background=\"#27ab27\"&gt;&lt;/android.support.constraint.ConstraintLayout&gt; background를 설정해 각 페이지를 색깔로 구분할 수 있게 간단히 구현하였습니다. ZoomOutPageTransformer.javaZoomOutPageTransformer.java1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.example.sawd.viewpagerwithfragment;import android.support.annotation.NonNull;import android.support.v4.view.ViewPager;import android.view.View;public class ZoomOutPageTransformer implements ViewPager.PageTransformer &#123; private static final float MIN_SCALE = 0.85f; private static final float MIN_ALPHA = 0.5f; public void transformPage(@NonNull View view, float position) &#123; int pageWidth = view.getWidth(); int pageHeight = view.getHeight(); if (position &lt; -1) &#123; // [-Infinity,-1) // This page is way off-screen to the left. view.setAlpha(0); &#125; else if (position &lt;= 1) &#123; // [-1,1] // Modify the default slide transition to shrink the page as well float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position)); float vertMargin = pageHeight * (1 - scaleFactor) / 2; float horzMargin = pageWidth * (1 - scaleFactor) / 2; if (position &lt; 0) &#123; view.setTranslationX(horzMargin - vertMargin / 2); &#125; else &#123; view.setTranslationX(-horzMargin + vertMargin / 2); &#125; // Scale the page down (between MIN_SCALE and 1) view.setScaleX(scaleFactor); view.setScaleY(scaleFactor); // Fade the page relative to its size. view.setAlpha(MIN_ALPHA + (scaleFactor - MIN_SCALE) / (1 - MIN_SCALE) * (1 - MIN_ALPHA)); &#125; else &#123; // (1,+Infinity] // This page is way off-screen to the right. view.setAlpha(0); &#125; &#125;&#125; ZoomOutPageTransformer는 page수와 position에 따라서 화면 전환시에 애니메이션을 정의하고 있습니다.Android Developers에서 DepthPageTransformer도 함께 예제로 제공하고있는데 시간날때 보시면 좋을 것 같습니다. Depth page transformer 마무리최근에 공부하고 배우는것을 토대로 포스팅을 하지만 주 업무에 너무 치이고 있어서 며칠에 걸쳐서 포스팅까지 완료하였네요.빠르진 않더라도 앞으로도 이렇게 차근차근 포스팅 할 예정입니다.전체 소스를 원하시는 분이 있을지 모르니 링크 드립니다. ViewPager-With-Fragment","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Example","slug":"Example","permalink":"https://dev-sawd.github.io/tags/Example/"}]},{"title":"[iOS] About Function (feat. method)","slug":"iOS-About-Function","date":"2018-06-27T11:59:46.000Z","updated":"2022-01-26T13:51:20.975Z","comments":true,"path":"2018/06/27/iOS-About-Function/","link":"","permalink":"https://dev-sawd.github.io/2018/06/27/iOS-About-Function/","excerpt":"주로 Java를 사용하다가 iOS를 공부하는데 Objective-C를 공부하면서 함수라는 용어가 나와서 모호했던 개념을 다잡고자 정리합니다.이번 포스트는 함수에 대해 알아보면서 메소드와이 차이도 간략하게 알아볼게요. Function함수와 메소드는 모두 코드 조각을 지칭하는 용어이지만 몇가지 차이점이 있습니다.함수는 코드의 최상위 레벨에 선언되고, 메소드는 특정 형식 내부에 선언됩니다.함수는 함수 이름만으로 호출 할 수 있지만, 메소드는 반드시 연관된 이름이나 인스턴스를 통해 호출해야 합니다.","text":"주로 Java를 사용하다가 iOS를 공부하는데 Objective-C를 공부하면서 함수라는 용어가 나와서 모호했던 개념을 다잡고자 정리합니다.이번 포스트는 함수에 대해 알아보면서 메소드와이 차이도 간략하게 알아볼게요. Function함수와 메소드는 모두 코드 조각을 지칭하는 용어이지만 몇가지 차이점이 있습니다.함수는 코드의 최상위 레벨에 선언되고, 메소드는 특정 형식 내부에 선언됩니다.함수는 함수 이름만으로 호출 할 수 있지만, 메소드는 반드시 연관된 이름이나 인스턴스를 통해 호출해야 합니다. Objective-C와 Swift는 함수와 메소드를 모두 구현할 수 있습니다.C와 같이 함수만 구현할 수 있는 언어가 있고, Java와 같이 메소드만 구현할 수 있는 언어도 있습니다.Objective-C의 경우 함수를 구현할 때 C 언어와 동일한 문법을 사용하지만,메소드를 구현할 때는 Objective-C 자체 문법을 사용합니다.또한 메소드를 구현할 수 있는 형식은 클래스로 제한됩니다. Swift는 동일한 문법을 사용하여 함수와 메소드를 구현합니다.Objective-C와 달리 클래스, 구조체, 열거형에 메소드를 구현할 수 있습니다. 함수의 구성 요소함수는 일반적으로 다섯 가지 요소로 구성됩니다. 함수 이름 파라미터 리턴형 실행코드 프로토타입 Objective-C123NSInteger plusOne(NSInteger x) &#123; return x + 1;&#125; Swift123func plusOne(x: Int) -&gt; Int &#123; return x + 1&#125; 함수의 이름과 함수 호출함수의 이름은 동사 + 명사로, 시작 동사는 소문자로 짓는 것이 관례입니다.즉 PlusOne보다 plusOne으로 짓는 것이 좋습니다.log, write, read와 같이 자주 사용하는 단어를 이름으로 사용할 경우 함수의 사용범위 내에 동일한 이름을 사용하는 함수가 존재할 가능성이 높습니다.이 경우에는 좀 더 구체적인 이름을 사용하거나 접두어를 사용합니다.Foundation 프레임워크에서 제공하는 함수들은 NS 접두어를 사용하고 있으며, NSLog가 그 예입니다. 파라미터f(x) = x + 1에서 x를 파라미터라고 합니다.파라미터는 함수를 선언할 때 ()사이에 ,로 구분하여 나열합니다.함수가 받을 수 있는 파라미터 수에는 제한이 없지만 가독성을 고려해서 선언합니다. Call by Value vs Call by Reference파라미터에 인자를 전달하는 방식은 크게 두 가지로 분류할 수 있습니다.첫 번째 방식은 인자의 값을 전달하는 Call by Value이고 두 번째 방식은 인자의 값이 저장된 메모리의 주소를 전달하는 Call by Reference입니다. 두 방식의 차이점으로 자주 예를 드는 swap함수를 만들어보겠습니다.swap함수는 두개의 수를 받아서 해당 수를 바꾸는 역할을 수행할 함수입니다. Objective-C12345678910111213void swap(NSInteger lhs, NSInteger rhs) &#123; NSLog(@\"before swap\"); NSLog(@\"lhs: %ld\", lhs); NSLog(@\"rhs: %ld\", rhs); NSInteger tmp = lhs; lhs = rhs; rhs = tmp; NSLog(@\"after swap\"); NSLog(@\"lhs: %ld\", lhs); NSLog(@\"rhs: %ld\", rhs);&#125; 그리고 호출은 이렇게 합니다. Objective-C123456NSInteger a = 1;NSINteger b = 2;swap(a, b);NSLog(@\"a: %ld\", a);NSLog(@\"b: %ld\", b); 이 함수를 실행하면 함수 내부에서 파라미터의 값은 교체되지만, 함수 호출 후의 a와 b의 값은 교체되지 않은 것을 확인할 수 있습니다.여기에서 인자를 전달한 방식은 Call by Value 입니다. Call by Reference는 인자의 메모리 주소를 전달합니다.이 방식으로 인자를 전달받는 파라미터의 자료형은 포인터로 선언되어야 합니다.저는 이렇게 구현했습니다. Objective-C123456789void swap(NSInteger* lhs, NSInteger* rhs) &#123; NSInteger tmp = *lhs; *lhs = *rhs; *rhs = tmp; NSLog(@\"after swap\"); NSLog(@\"lhs: %ld\", *lhs); NSLog(@\"rhs: %ld\", *rhs);&#125; 실행을 해보면 Call by Value 방식과 달리 함수를 호출한 후에 a, b값이 교체된 것을 확인할 수 있습니다. Objective-C123456NSInteger a = 1;NSINteger b = 2;swap(&amp;a, &amp;b);NSLog(@\"a: %ld\", a);NSLog(@\"b: %ld\", b); 이 코드는 이전 코드와 몇가지 차이점을 가지고 있습니다.swap 함수의 두 파라미터는 주소를 파라미터로 받을 수 있도록 포인터로 선언되어 있습니다.그리고 함수를 호출할때 변수의 주소를 넘겨주고, 함수 내에서는 변수의 주소로 접근해 값을 변경합니다.따라서 이전 Call by Value와 다르게 swap함수가 끝나고 main에서 다시 접근했을때 값이 계속 변경되어있는 것입니다. 마치며C 계열의 언어를 사용하는 프로그래머에게 포인터의 개념은 필수입니다.특히나 이 포인터는 함수와 연관되어 많이 사용됩니다.함수, 포인터는 항상 러닝커브가 급격하게 올라가는 시점이기 때문에 많은 분들이 어려워합니다.이 포스트를 문법이 아닌 개념으로 접근했을때 이해가 되지 않는다면, 검색이나 책을 통해 포인터와 함수의 기본 개념에 대해서 숙지하는것을 권장합니다.","categories":[{"name":"iOS","slug":"iOS","permalink":"https://dev-sawd.github.io/categories/iOS/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] Setting root url in HEXO","slug":"ETC-Setting-root-url-in-HEXO","date":"2018-06-27T10:35:49.000Z","updated":"2022-01-26T13:51:20.975Z","comments":true,"path":"2018/06/27/ETC-Setting-root-url-in-HEXO/","link":"","permalink":"https://dev-sawd.github.io/2018/06/27/ETC-Setting-root-url-in-HEXO/","excerpt":"HEXO 블로그를 시작한지 얼마 안됐지만 아직도 세팅은 어렵게만 느껴집니다.제 블로그를 방문했을때 다른 HEXO 블로그처럼 깔끔하게https://dev-sawd.github.io/이렇게 표시되지 않고 https://dev-sawd.github.io/dev-sawd.github.io/이렇게 Child가 붙었습니다. 사실 사용하는데는 문제 없지만(?) url이라는것이 저렇게 끝나는 것이 아니고포스트 디테일 페이지로 들어가게 되면 아래와 같이 매우 길어지는것이 문제였습니다.https://dev-sawd.github.io/dev-sawd.github.io/2018/06/26/Android-Launcher-Icons/ 3일동안 찾아다닌 끝에 다른분의 블로그 세팅을 뜯어보고 해결 할 수 있게 되었습니다. HEXO 정적파일 Root폴더에 있는 _config.yml안에서 설정을 바꿔 해결할 수 있었습니다.예제를 올리니 여러분의 블로그 설정에 맞게 설정하시길 바랍니다.","text":"HEXO 블로그를 시작한지 얼마 안됐지만 아직도 세팅은 어렵게만 느껴집니다.제 블로그를 방문했을때 다른 HEXO 블로그처럼 깔끔하게https://dev-sawd.github.io/이렇게 표시되지 않고 https://dev-sawd.github.io/dev-sawd.github.io/이렇게 Child가 붙었습니다. 사실 사용하는데는 문제 없지만(?) url이라는것이 저렇게 끝나는 것이 아니고포스트 디테일 페이지로 들어가게 되면 아래와 같이 매우 길어지는것이 문제였습니다.https://dev-sawd.github.io/dev-sawd.github.io/2018/06/26/Android-Launcher-Icons/ 3일동안 찾아다닌 끝에 다른분의 블로그 세팅을 뜯어보고 해결 할 수 있게 되었습니다. HEXO 정적파일 Root폴더에 있는 _config.yml안에서 설정을 바꿔 해결할 수 있었습니다.예제를 올리니 여러분의 블로그 설정에 맞게 설정하시길 바랍니다. _config.yml123## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://dev-sawd.github.ioroot: / 위의 코드대로 url과 root를 설정하면로컬작업시 localhost:4000/디플로이시 https://dev-sawd.github.io/로 위치가 잡히는 것을 볼 수 있습니다. 그럼 좋은하루되세요!","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"https://dev-sawd.github.io/tags/HEXO/"}]},{"title":"[Android] Launcher Icons","slug":"Android-Launcher-Icons","date":"2018-06-26T11:10:33.000Z","updated":"2022-01-26T13:51:20.971Z","comments":true,"path":"2018/06/26/Android-Launcher-Icons/","link":"","permalink":"https://dev-sawd.github.io/2018/06/26/Android-Launcher-Icons/","excerpt":"이전에도 런쳐 아이콘을 등록한 적이 있지만 최근에 Android Studio에서 바뀐점이 있어 포스팅합니다. Launcher Icons런처 아이콘은 사용자에게 앱을 대표하여 보여주는 그래픽 아이콘입니다.Google Developers 문서에 이런곳에 사용된다고 합니다. 기기에 설치된 앱의 목록과 메인 스크린 앱에 대한 단축키를 나타낼 수 있음 런처 앱에서 사용할 수 있음 앱 첫인상을 뚜렷이 심어줄 수 있음 사용자가 Google Play에서 앱을 찾는데 도움을 줄 수 있음","text":"이전에도 런쳐 아이콘을 등록한 적이 있지만 최근에 Android Studio에서 바뀐점이 있어 포스팅합니다. Launcher Icons런처 아이콘은 사용자에게 앱을 대표하여 보여주는 그래픽 아이콘입니다.Google Developers 문서에 이런곳에 사용된다고 합니다. 기기에 설치된 앱의 목록과 메인 스크린 앱에 대한 단축키를 나타낼 수 있음 런처 앱에서 사용할 수 있음 앱 첫인상을 뚜렷이 심어줄 수 있음 사용자가 Google Play에서 앱을 찾는데 도움을 줄 수 있음 Adaptive Icons안드로이드 O에서 새로운 아이콘 포맷이 추가되었습니다.어댑티브 아이콘이라 불리는 이 포멧은 다양한 장치 모델에 다양한 모양을 표시할 수 있는 아이콘입니다. 등록 방법주로 Image Asset Studio를 이용해서 적용합니다.프로젝트 우클릭 &gt; New &gt; Image Asset으로 실행할 수 있습니다. 원하는 아이콘 이미지를 선택하고 가이드라인에 맞춰 Resize를 조절하면 됩니다. 이전과는 어떻게 다른가?사실 이전 버전 Legacy도 등록이 가능합니다.딱히 사용할 일이 없어졌지만요.Icon Type에서 Launcher Icons (Legacy only)를 선택화면 됩니다. 일단 스크린샷은 아래와 같습니다. 비슷하지만 어딘가 단조롭습니다.위에서 사용한 Adaptive Icons로 등록해도 이전 Legacy Icons들도 잘 적용되기 때문에딱히 사용할 필요는 없어 보입니다.제가 가진 가장 옛버전인 galaxy Note 3(5.0)에서도 에쁘게 잘 적용되어 보였습니다. 마무리제조사도 버전도 다양한 기기들을 지원하기 위한 Google의 노력이 엿보입니다.하지만 가끔 모델, 해상도, 안드로이드 버전에 의해 생기는 이슈는 개발자로 하여금 까다롭고 리소스가 너무 많이 투입되는 작업입니다.계속해서 안드로이드의 하위 버전 호환과 안정화를 위해 힘써줬으면 하는 바램입니다.","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] About ConstraintLayout","slug":"Android-About-ConstraintLayout","date":"2018-06-25T20:41:13.000Z","updated":"2022-01-26T13:51:20.970Z","comments":true,"path":"2018/06/26/Android-About-ConstraintLayout/","link":"","permalink":"https://dev-sawd.github.io/2018/06/26/Android-About-ConstraintLayout/","excerpt":"오늘은 최근에 사용하기 시작한 ConstraintLayout에 대해 이야기해볼까 합니다.“이제야 ConstraintLayout을 사용하기 시작했다구요!?”네.. 그렇습니다.두달 전까지만 해도 저는 LinearLayout과 RelativeLayout을 이용해 UI를 그렸습니다.하지만 새 프로젝트를 시작하며 ConstraintLayout과 CoordinatorLayout을 사용해보고는 자연스럽게 LinearLayout과 RelativeLayout의 사용 빈도가 줄어 들었습니다.특히 RelativeLayout은 더욱요. ConstraintLayout이 단어를 검색하기만 해도 수많은 사이트들이 쏟아져나올겁니다.한 2년 전 쯤에 처음 접한것 같아요.한창 LinearLayout과 RelativeLayout을 사용하는 제게는 굳이 왜 써야되는지 이해가 안갔습니다.","text":"오늘은 최근에 사용하기 시작한 ConstraintLayout에 대해 이야기해볼까 합니다.“이제야 ConstraintLayout을 사용하기 시작했다구요!?”네.. 그렇습니다.두달 전까지만 해도 저는 LinearLayout과 RelativeLayout을 이용해 UI를 그렸습니다.하지만 새 프로젝트를 시작하며 ConstraintLayout과 CoordinatorLayout을 사용해보고는 자연스럽게 LinearLayout과 RelativeLayout의 사용 빈도가 줄어 들었습니다.특히 RelativeLayout은 더욱요. ConstraintLayout이 단어를 검색하기만 해도 수많은 사이트들이 쏟아져나올겁니다.한 2년 전 쯤에 처음 접한것 같아요.한창 LinearLayout과 RelativeLayout을 사용하는 제게는 굳이 왜 써야되는지 이해가 안갔습니다. 장점같은 코드 맞아?어떤 화면이 있다고 가정합니다. 아래의 코드는 화면을 RelativeLayout과 LinearLayout으로 표현한 코드입니다.코드가 너무 길어지기 때문에 큰 틀만 보도록 할게요. 123456789101112131415161718192021222324&lt;RelativeLayout&gt; &lt;ImageView/&gt; &lt;ImageView/&gt; &lt;RealativeLayout&gt; &lt;TextView/&gt; &lt;LinearLayout&gt; &lt;TextView/&gt; &lt;RelativeLayout&gt; &lt;EditText/&gt; &lt;/RelativeLayout&gt; &lt;/LenarLayout&gt; &lt;LinearLayout&gt; &lt;TextView/&gt; &lt;RelativeLayout&gt; &lt;EditText/&gt; &lt;/Relativelayout&gt; &lt;/LinearLayout&gt; &lt;TextView/&gt; &lt;/RelativeLayout&gt; &lt;LinearLayout&gt; &lt;Button/&gt; &lt;Button/&gt; &lt;/LelativeLayout&gt;&lt;/RelativeLayout&gt; 아래는 같은 화면을 ConstraintLayout으로 표현한 코드입니다. 123456789101112&lt;ConstraintLayout&gt; &lt;ImageView/&gt; &lt;ImageView/&gt; &lt;TextView/&gt; &lt;TextView/&gt; &lt;EditText/&gt; &lt;TextView/&gt; &lt;EditText/&gt; &lt;TextView/&gt; &lt;Button/&gt; &lt;Button/&gt;&lt;/ContraintLayout&gt; 말이 필요 없네요.화면에 보여줘야할 뷰가 많아지면 많아질수록 코드는 기하급수적으로 차이날 겁니다. 마치 그리듯UI 화면에서 ConstraintLayout안에 뷰를 끌어다 이리저리 위치시키면 됩니다.그리고 배치한 뷰의 상하좌우 가운데에 있는 ㅇ를 끌어다가 제약조건을 추가하면 됩니다.제약 조건에 따라 뷰가 스르륵 움직이며 어떤 배치인지 다시 나타납니다. “A는 B의 오른쪽에 위치하고 윗줄은 D와 나란히..” 아래와 같이 직관적으로 표현됩니다. 예쁜 뷰를 빠르게다시 위에서 보여준 사진을 봅시다.키패드와 키패드의 간격이 모두 16으로 설정되어있습니다.RelativeLayout으로 이것을 구현하려면 해당 뷰의 margin을 찾아서 직접 입력해야 합니다.하지만 ConstraintLayout에는 뷰와 뷰 사이의 기본 margin을 설정할 수 있습니다.위에서 그리듯 제약조건을 추가하면 기본으로 8dp의 제약조건이 설정되어 있고 사용자 임의로 간격을 수정할 수 있습니다. 이미 배치한 뷰의 margin을 수정해야 할때는요?소스코드 바다를 해맬 필요가 없습니다.View Attribute 상단에 우선적으로 margin을 설정할 수 있도록 안드로이드 스튜디오가 지원하고 있습니다. 진입장벽팀원 요청에 따라 ConstraintLayout을 사용하는 방법을 가이드했습니다. 이전처럼 뷰를 ConstraintLayout안에 배치하구요 ㅇ 버튼을 눌러 제약조건이 필요한 부분에 끌어다 놓습니다. 뷰를 부모 뷰 가운데 위치하고 싶다면 상하좌우 제약조건을 부모 뷰 상하좌우에 설정하세요. 여기 기본적으로 margin이 설정되어 있으니 필요에 따라 수정하세요. 10분도 안돼서 가이드는 끝났습니다.그리고 이런 피드백이 왔습니다. 이정도면 UI 그릴만 한데..? 내가 할까? ㅋㅋㅋ 추가로이 포스트를 쓰면서 알게된 것인데 화면을 처리하는 속도에도 영향이 있다고 합니다. 사용자가 뷰를 보기까지 안드로이드는 3단계를 거칩니다. 측정 레이아웃 그리기 측정 단계에서는 View의 크기를 결정합니다.측정 노드는 루트 노드에서 시작해서 반복적으로 호출되며, 각각의 호출은 부모로부터 전달된 인자들과 함께 발생합니다. 레이아웃 단계에서는 각각의 view 크기를 기준으로 view의 위치를 결정합니다.루트 노드에서 시작해서 말단 노드까지 반복적으로 호출됩니다. 그리기 단계는 스크린에 자신을 그리는 단계입니다.RelativeLayout이 자신을 화면에 그리라는 요청을 받게 되면 자식들에게 자신을 측정하라는 메세지가 전달되며모든 view가 측정될 때까지 이 과정이 계속됩니다.중첩된 레이아웃이 많을수록 측정하는데 걸리는 시간도 늘어나게됩니다. 단점생각보다 느립니다.위에서 설명한 제약조건이나 뷰를 다시 배치했을때 즉각 반응한다기 보단 조금 기다려야 합니다. 내가 원하는 소스코드랑 다른데…ConstraintLayout뿐만 아니라 예전부터 고질병처럼 쫓아오는 단점입니다.드래그 앤 드롭으로 UI를 그리면 내가 원하지 않는 소스코드들이 덕지덕지 붙어있습니다.굉장히 신경쓰이는 부분입니다. 결론위의 단점에도 불구하고 장점이 강력하기 때문에 앞으로도 계속 사용 될 것입니다. 마무리제 경험에 비추어 ConstraintLayout에 대해서 적어봤습니다.이 포스트에서 언급하지 않았지만 체인, 비율 등의 장점도 있습니다.","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] Fragment Example","slug":"Android-Fragment-Example","date":"2018-06-25T03:09:12.000Z","updated":"2022-01-26T13:51:20.968Z","comments":true,"path":"2018/06/25/Android-Fragment-Example/","link":"","permalink":"https://dev-sawd.github.io/2018/06/25/Android-Fragment-Example/","excerpt":"오늘 포스트는 이전 포스트에서 언급했던 Fragment에 대해서 간단한 예제를 만들어 보려고 합니다.주말에 포스팅 하려고 했는데 시간도 시간이고 개인적인 스터디를 따로 하고 있어서 짬이 나지 않네요 ㅜㅜ.개인적인 스터디에 대해서 필요한 포스팅은 또 따로 진행하도록 하겠습니다.각설하고 시작해봅시다. 어떤 예제를 만들 것인가?사실 너무 간단한 예제입니다.스크린샷부터 볼게요. 2개의 Fragment를 만들고(분홍색, 파란색)Fragment 1 버튼을 눌렀을 때는 분홍색 Fragment가Fragment 2 버튼을 눌렀을 때는 파란색 Fragment가 보이도록 할 겁니다.","text":"오늘 포스트는 이전 포스트에서 언급했던 Fragment에 대해서 간단한 예제를 만들어 보려고 합니다.주말에 포스팅 하려고 했는데 시간도 시간이고 개인적인 스터디를 따로 하고 있어서 짬이 나지 않네요 ㅜㅜ.개인적인 스터디에 대해서 필요한 포스팅은 또 따로 진행하도록 하겠습니다.각설하고 시작해봅시다. 어떤 예제를 만들 것인가?사실 너무 간단한 예제입니다.스크린샷부터 볼게요. 2개의 Fragment를 만들고(분홍색, 파란색)Fragment 1 버튼을 눌렀을 때는 분홍색 Fragment가Fragment 2 버튼을 눌렀을 때는 파란색 Fragment가 보이도록 할 겁니다. Main아래와 같이 액티비티를 만들었습니다.상단에 버튼을 2개 배치하고 하단에는 Fragment 영역을 두었습니다. activity_main.xmlactivity_main.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"horizontal\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;Button android:id=\"@+id/btnShowFragment1\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"8dp\" android:layout_marginTop=\"16dp\" android:text=\"Fragment 1\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /&gt; &lt;Button android:id=\"@+id/btnShowFragment2\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginEnd=\"8dp\" android:layout_marginStart=\"8dp\" android:layout_marginTop=\"16dp\" android:text=\"Fragment 2\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.0\" app:layout_constraintStart_toEndOf=\"@+id/btnShowFragment1\" app:layout_constraintTop_toTopOf=\"parent\" /&gt; &lt;LinearLayout android:id=\"@+id/fragment_container\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_marginBottom=\"8dp\" android:layout_marginEnd=\"8dp\" android:layout_marginStart=\"8dp\" android:layout_marginTop=\"8dp\" android:orientation=\"horizontal\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@+id/btnShowFragment2\" /&gt;&lt;/android.support.constraint.ConstraintLayout&gt; MainActivity.javaMainActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.sawd.app.fragmentexam;import android.os.Bundle;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;public class MainActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btnShowView1 = findViewById(R.id.btnShowFragment1); btnShowView1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.fragment_container, new Fragment1()); fragmentTransaction.commit(); &#125; &#125;); Button btnShowView2 = findViewById(R.id.btnShowFragment2); btnShowView2.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.fragment_container, new Fragment2()); fragmentTransaction.commit(); &#125; &#125;); FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.fragment_container, new Fragment1()); fragmentTransaction.commit(); &#125;&#125; Fragment는 FragmentManager를 이용해서 FragmentTransaction 인스턴스를 통해 사용 가능합니다.바로 아래의 코드가 FragmentTransaction을 가져오는 부분입니다. get FragmentTransaction12FragmentManager fragmentManager = getSupportFragmentManager();FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); 이 FragmentTransaction을 이용해 변경 사항을 설정하기 위해 add(), remove(), replace()와 같은 메서드를 이용할 수 있습니다.저는 replace를 이용해 화면 전환을 구현했습니다. replace method12public abstract FragmentTransaction replace (int containerViewId, Fragment fragment) replace의 첫번째 인자는 Fragment를 나타낼 뷰, 두번째 인자는 해당 Fragment를 넘겨주면 됩니다.코드는 이렇게 되겠네요. how to call replace method1fragmentTransaction.replace(R.id.fragment_container, new Fragment1()); FragmentTransaction을 변경하고 나면 반드시 commit()을 호출해야 변경 내용이 적용됩니다. 1fragmentTransaction.commit(); 완성된 코드 뭉치는 이렇게 됩니다. 1234FragmentManager fragmentManager = getSupportFragmentManager();FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();fragmentTransaction.replace(R.id.fragment_container, new Fragment1());fragmentTransaction.commit(); 다시 MainActivity.java로 돌아와서 아래의 문구가 이해가 되실겁니다.btnShowView1 버튼을 누르면 Fragment1btnShowView2 버튼을 누르면 Fragment2를 보여줍니다. 123456789101112131415161718192021Button btnShowView1 = findViewById(R.id.btnShowFragment1);btnShowView1.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.fragment_container, new Fragment1()); fragmentTransaction.commit(); &#125;&#125;);Button btnShowView2 = findViewById(R.id.btnShowFragment2);btnShowView2.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; FragmentManager fragmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.fragment_container, new Fragment2()); fragmentTransaction.commit(); &#125;&#125;); FragmentFragment1.xml크게 의미없는 배경만 있는 코드지만 혹시 필요로하는 분들을 위해 작성합니다. fragment1.xml12345678&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.constraint.ConstraintLayout android:id=\"@+id/parentView\" xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/colorAccent\"&gt;&lt;/android.support.constraint.ConstraintLayout&gt; Fragment1.javaFragment1.java123456789101112131415161718package com.sawd.app.fragmentexam;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class Fragment1 extends Fragment &#123; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View parentView = inflater.inflate(R.layout.fragment1, container, false); // Inflate the layout for this fragment return parentView; &#125;&#125; Fragment2.xmlFragment1과 완전 같고 xml의 background만 다릅니다. fragment2.xml12345678&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.constraint.ConstraintLayout android:id=\"@+id/parentView\" xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/colorAccent\"&gt;&lt;/android.support.constraint.ConstraintLayout&gt; Fragment2.javaFragment2.java123456789101112131415161718package com.sawd.app.fragmentexam;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;public class Fragment1 extends Fragment &#123; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View parentView = inflater.inflate(R.layout.fragment1, container, false); // Inflate the layout for this fragment return parentView; &#125;&#125; 마무리간단하게 Fragment를 사용하는 방법을 알아봤는데요.이것으로 무궁무진한 Fragment를 사용할 수는 없지만 기초라고 할 수 있습니다.포스트에 모든 소스코드를 첨부해서 크게 필요없다고 생각되지만혹시나 프로젝트 단위로 다운받고싶은 분이 있을까 해서 링크 남깁니다. Fragment-Example","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Example","slug":"Example","permalink":"https://dev-sawd.github.io/tags/Example/"}]},{"title":"[Android] About fragment","slug":"Android-About-fragment","date":"2018-06-21T09:06:30.000Z","updated":"2022-01-26T13:51:20.967Z","comments":true,"path":"2018/06/21/Android-About-fragment/","link":"","permalink":"https://dev-sawd.github.io/2018/06/21/Android-About-fragment/","excerpt":"좋은 예제나 라이브러리에 심심치 않게 Fragment를 사용하는것을 보았습니다.잘은 모르겠지만 Activity와 비슷한 것 같은데..명확한 차이를 알 수 없어 알아보았습니다. 일단 Fragment가 나오기 전 상황을 좀 알아야 겠군요. Activity, Context안드로이드 시작과 함께 Activity가 무엇인지 Context가 무엇인지 알아야 했습니다.기존에 C, C++, Java를 배울때와는 사뭇 다르고 저에게는 러닝 커브또한 굉장히 높았습니다.점점 익숙해질 무렵 Activity는 어플리케이션 구성 요소로 단어 그대로 사용자가 어떠한 행위를 하기 위해 작용할 수 있는 화면이고Context는 Activity에 따라 정보를 담고 있는 인터페이스라는것을 알게되었습니다.이 두가지의 개념으로 화면단위를 컨트롤하고 문제없이 개발이 되는 줄 알았습니다. 어플리케이션의 덩치는 날로 커져갔습니다.단순히 Multi Activity로 해결되던 어플리케이션이 그 이상의 수준을 넘어 Super Ultra Multi Activity로 엄청난 서비스를 제공하는 어플리케이션이 등장합니다. 그런데 여기서 문제점이 생깁니다.많이 흡사한 페이지가 여러개인데.. 그때마다 Activity와 Layout이 하나씩 생성되고 중복 코드들이 기하급수적으로 늘어나게 됩니다. 이때 Google에서 Fragment를 조용히 내놓습니다.","text":"좋은 예제나 라이브러리에 심심치 않게 Fragment를 사용하는것을 보았습니다.잘은 모르겠지만 Activity와 비슷한 것 같은데..명확한 차이를 알 수 없어 알아보았습니다. 일단 Fragment가 나오기 전 상황을 좀 알아야 겠군요. Activity, Context안드로이드 시작과 함께 Activity가 무엇인지 Context가 무엇인지 알아야 했습니다.기존에 C, C++, Java를 배울때와는 사뭇 다르고 저에게는 러닝 커브또한 굉장히 높았습니다.점점 익숙해질 무렵 Activity는 어플리케이션 구성 요소로 단어 그대로 사용자가 어떠한 행위를 하기 위해 작용할 수 있는 화면이고Context는 Activity에 따라 정보를 담고 있는 인터페이스라는것을 알게되었습니다.이 두가지의 개념으로 화면단위를 컨트롤하고 문제없이 개발이 되는 줄 알았습니다. 어플리케이션의 덩치는 날로 커져갔습니다.단순히 Multi Activity로 해결되던 어플리케이션이 그 이상의 수준을 넘어 Super Ultra Multi Activity로 엄청난 서비스를 제공하는 어플리케이션이 등장합니다. 그런데 여기서 문제점이 생깁니다.많이 흡사한 페이지가 여러개인데.. 그때마다 Activity와 Layout이 하나씩 생성되고 중복 코드들이 기하급수적으로 늘어나게 됩니다. 이때 Google에서 Fragment를 조용히 내놓습니다. Fragment구글은 이렇게 설명하고 있습니다. Fragment는 동작 또는 Activity 내에서 사용자 인터페이스의 일부를 나타냅니다. 여러 개의 프래그먼트를 하나의 액티비티에 조합하여 창이 여러 개인 UI를 구축할 수 있으며, 하나의 프래그먼트를 여러 액티비티에서 재사용할 수 있습니다. 프래그먼트는 자체 수명 주기를 가지고, 자체 입력 이벤트를 받으며, 액티비티 실행 중에 추가 및 제거가 가능한 액티비티의 모듈식 섹션이라고 생각하면 됩니다(다른 액티비티에 재사용할 수 있는 “하위 액티비티”와 같은 개념). 간단히 설명하면 한 액티비티 안에서 프래그먼트로 지정한 영역에 뷰를 바꿔칠수 있다는 얘깁니다.위에서 설명한 파일 관리나 중복 코드들이 기하급수적으로 늘어나는 유지보수가 편해지는 소리가 들립니다. 프래그먼트를 생성하는 과정프래그먼트를 생성하기 위해서는 최소한의 수명 주기 메서드를 구현해야 합니다. onCreate()시스템은 프래그먼트를 생성할 때 이것을 호출합니다. 구현 내에서 프래그먼트의 기본 구성 요소 중 프래그먼트가 일시정지되거나 중단되었다가 재개되었을 때 유지하고자 하는 것을 초기화해야 합니다. onCreateView()시스템은 프래그먼트가 자신의 사용자 인터페이스를 처음으로 그릴 시간이 되면 이것을 호출합니다. 프래그먼트에 맞는 UI를 그리려면 메서드에서 View를 반환해야 합니다. 이 메서드는 프래그먼트 레이아웃의 루트입니다. 프래그먼트가 UI를 제공하지 않는 경우 null을 반환하면 됩니다. onPause()시스템이 이 메서드를 호출하는 것은 사용자가 프래그먼트를 떠난다는 첫 번째 신호입니다(다만 이것이 항상 프래그먼트가 소멸 중이라는 뜻은 아닙니다). 현재 사용자 세션을 넘어서 지속되어야 하는 변경 사항을 커밋하려면 보통 이곳에서 해야 합니다(사용자가 돌아오지 않을 수 있기 때문입니다). 일단 Activity와 비슷합니다.그렇다면 생명주기가 어떤지 확인할 필요가 있겠네요 생명주기가 이게뭐지? Activity 생명주기와 함께 그안에서 동작하는 하나가 아닌 다수의 Fragment를 관리해야 하는데…그 Fragment의 생명주기가 이렇답니다. Activity 상태에 따라서는.. Fragment는 Activity 상태에 따라 세분화 해서 관리해야 한다는 의미로 보여집니다. 혹시 설명이 필요할 지 모르니 간단히 구글의 설명을 인용합니다. 프래그먼트의 수명 주기를 관리하는 것은 액티비티의 수명 주기를 관리하는 것과 매우 비슷합니다. 액티비티와 마찬가지로 프래그먼트는 세 가지 상태로 존재할 수 있습니다. 재개됨(Resumed)프래그먼트가 실행 중인 액티비티에 표시됩니다. 일시정지됨(Paused)또 다른 액티비티가 포그라운드에 있고 포커스를 갖고 있지만, 이 프래그먼트가 있는 액티비티도 여전히 표시됩니다(포그라운드의 액티비티가 부분적으로 투명하거나 전체 화면을 뒤덮지 않습니다). 정지됨(Stopped)프래그먼트가 표시되지 않습니다. 호스트 액티비티가 정지되었거나 프래그먼트가 액티비티에서 제거되었지만 백 스택에 추가되었습니다. 정지된 프래그먼트도 여전히 표시는 됩니다(모든 상태 및 멤버 정보를 시스템이 보존합니다). 하지만, 사용자에게는 더 이상 표시되지 않으며 액티비티를 종료하면 이것도 종료됩니다. 결론나쁘지 않습니다.Fragment를 사용하기 위해 알아야 될 것이 한두가지가 아니라는 생각이 듭니다.많이 알아야 한다는 것은 복잡하며 신경써야 할 일이 많다는 것과 일맥상통합니다.저렇게 복잡한 생명주기의 Fragment를 하나가 아니고 여러개를 사용하려면 굉장한 학습과 내공이 필요한 것 같습니다.내용에서 알 수 있듯, 이 Fragment는 간단히 이론으로만 넘길 수 없겠네요.조만간 간단한 예제를 들고 소스코드와 함께 설명하겠습니다.","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] 앱이 갑자기 꺼지는 이슈","slug":"Android-WTF-App-crash","date":"2018-06-20T03:42:48.000Z","updated":"2022-01-26T13:51:20.964Z","comments":true,"path":"2018/06/20/Android-WTF-App-crash/","link":"","permalink":"https://dev-sawd.github.io/2018/06/20/Android-WTF-App-crash/","excerpt":"이번 포스트는 며칠전에 맞닥들인 이슈와 해결을 서술할까 합니다. WTF?구글맵을 사용하는 앱을 한창한창 개발중에 이슈가 터졌습니다.구글맵 화면에서 마커를 보여주거나 이미지를 보여주는등 이런저런 처리를 하는데 앱의 퍼포먼스가 갑자기 떨어지기 시작했습니다.그러더니 앱이 갑자기 꺼지는 사태가.. 심지어 앱이 비정상 종료되었고 다시 실행하겠냐는 팝업이 뜨지 않았습니다.테스트로 사용한 폰은 무려 Galaxy S8+였는데..사실 이 페이지를 그때 생성한것이 아니고 한달전부터 생성해서 써오던 페이지였는데 이런 크리티컬한 이슈라니 조금 황당했습니다. 원인을 찾자항상 하던대로 로그캣을 켜봤습니다.","text":"이번 포스트는 며칠전에 맞닥들인 이슈와 해결을 서술할까 합니다. WTF?구글맵을 사용하는 앱을 한창한창 개발중에 이슈가 터졌습니다.구글맵 화면에서 마커를 보여주거나 이미지를 보여주는등 이런저런 처리를 하는데 앱의 퍼포먼스가 갑자기 떨어지기 시작했습니다.그러더니 앱이 갑자기 꺼지는 사태가.. 심지어 앱이 비정상 종료되었고 다시 실행하겠냐는 팝업이 뜨지 않았습니다.테스트로 사용한 폰은 무려 Galaxy S8+였는데..사실 이 페이지를 그때 생성한것이 아니고 한달전부터 생성해서 써오던 페이지였는데 이런 크리티컬한 이슈라니 조금 황당했습니다. 원인을 찾자항상 하던대로 로그캣을 켜봤습니다. ?!앱이 강제 종료 되었는데.. 평소에 보이던 빨간 에러로그는 찾을 수 없었습니다.재현 증상을 발견하기 위해 몇번 동일한 방법으로 테스트 해봤더니 역시나 뜨지 않더군요.. 의심이 가는 부분은 로그캣 마지막 줄에 보이는 GC(Garbage Collector)에 관한 로그였습니다. Android Studio를 3.1.2로 업데이트 하면서 이전에 잘 사용하지 않던 Profiler를 켜봤습니다.그리고 재현 경로를 반복 실행하여 테스트를 다시 실시하였습니다. 메모리 사용량 때문이 맞는 것 같다재현 경로(빨간 박스 부분에 보라색 점)에 맞춰 중간까지 메모리가 계속 치솟다가 줄어들면서 앱이 꺼집니다.거의 저 중간 시점부터 퍼포먼스가 느려지는것을 확인할 수 있었습니다.메모리 최대 사용량은 600Mb까지 올라갔다가 떨어졌습니다. 해당 부분 코드를 확인해보니 GroundOverlay에서 이미지 할당은 계속 하는데 안쓰는 값에 대해서는 제때 해제를 하지 않아서 나타나는 현상이였습니다.작은 이미지로 테스트 해 본 결과 맵 위에 해당 이미지들이 겹쳐져서 계속 쓰여지고 있었습니다.아마 큰 이미지를 계속 쓰고있어서 서로 겹치는지 육안으로 확인이 안됐기 때문에 더 늦게 발견한 것 같습니다. 방어코드 적용간단히 방어코드를 작성하였습니다.GroundOverlay 객체를 안쓰는 시점에서 해제해주면됩니다. 1234GroundOverlay overlay = googleMap.addGroundOverlay(overlayOptions);// ...overlay.remove(); // 안쓰는 시점에서 해제overlay = null; 이제 필요없는 GroundOverlay는 지도에서 삭제될 것입니다. 결과해당 코드를 적용후 다시 실행해보았습니다. 이전에 비해서 확실히 메모리를 덜 쓰고 있다는 것을 알 수 있습니다.최대 300Mb 선에서 더 올라가지 않았습니다. 메모리 사용 영역(파란색 그래프)를 한번 클릭하면 더 자세히 볼 수 있습니다. 쓰레기통 아이콘으로 가비지컬렉터가 언제 작동하고 그에따른 메모리의 변화도 같이 볼 수 있어 편합니다. 마무리어쩌면 미궁으로 빠질 수 있었던 문제였습니다.다행히 찍기(?)로 문제를 확인하고 해결할 수 있었는데 개발자는 다양한 문제에 접하고 해결하는 것도 성장하는 방법이라고 생각합니다.이러한 경험치들이 쌓이면 더 빨리 어떤 문제에 대해서 해결 할 수 있으니 퍼포먼스도 좋아질 것입니다. Android Profiler를 써본 소감은 실시간으로 앱의 상태를 확인 할 수 있어 편리했습니다.무거운 앱을 만들 일이 없어서 사용 안했었는데 앞으로 자주 접할 것 같습니다.Profiler에 대해서 더 궁금해졌으니 조만간 분석해보고 사용방법이나 나만의 팁을 포스팅하겠습니다. 그럼 좋은하루되세요!","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"Troubleshooting","slug":"Troubleshooting","permalink":"https://dev-sawd.github.io/tags/Troubleshooting/"}]},{"title":"[iOS] 새로운 뷰컨트롤러를 시작하는 방법","slug":"iOS-how-to-start-new-viewcontroller","date":"2018-06-18T12:41:04.000Z","updated":"2022-01-26T13:51:20.962Z","comments":true,"path":"2018/06/18/iOS-how-to-start-new-viewcontroller/","link":"","permalink":"https://dev-sawd.github.io/2018/06/18/iOS-how-to-start-new-viewcontroller/","excerpt":"이틀…버튼을 눌렀을때 메뉴페이지를 띄우는 부분을 구현할 차례가 왔습니다.아직 iOS개발 초짜다 보니 이런것을 알아가는데도 시간이 굉장히 오래 걸리는 것 같습니다.무려 이틀이나 걸렸네요.검색해도 잘 안나오는 것이 안드로이드처럼 접근하면 안될 것 같다는 느낌이 듭니다.각설하고 정리를 시작합니다. ViewController프로젝트 생성시 만들어지는 뷰 컨트롤러를 Main으로 잡았습니다. ViewController는 위와 같습니다.오른쪽 위에 메뉴를 눌렀을때 MenuViewController가 뜨도록 할거에요.","text":"이틀…버튼을 눌렀을때 메뉴페이지를 띄우는 부분을 구현할 차례가 왔습니다.아직 iOS개발 초짜다 보니 이런것을 알아가는데도 시간이 굉장히 오래 걸리는 것 같습니다.무려 이틀이나 걸렸네요.검색해도 잘 안나오는 것이 안드로이드처럼 접근하면 안될 것 같다는 느낌이 듭니다.각설하고 정리를 시작합니다. ViewController프로젝트 생성시 만들어지는 뷰 컨트롤러를 Main으로 잡았습니다. ViewController는 위와 같습니다.오른쪽 위에 메뉴를 눌렀을때 MenuViewController가 뜨도록 할거에요. 코드는 필요있는 부분만 편집해서 작성하였습니다. ViewController.h12345678910#import &lt;UIKit/UIKit.h&gt;@interface ViewController : UIViewController &#123; //... IBOutlet UIButton *buttonMenu; // 메뉴 버튼을 만들고 //...&#125;- (IBAction)showMenu:(id)sender; // 메뉴 버튼이 눌렸을때 처리할 메소드@end ViewController.m12345678910111213141516171819202122232425#import \"ViewController.h\"#import \"MenuViewController.h\"@interface ViewController ()@end@implementation ViewController//...- (IBAction)showMenu:(id)sender&#123; // StoryBoard 이름은 Mian.storyboard UIStoryboard *sb = [UIStoryboard storyboardWithName:@\"Main\" bundle:[NSBundle mainBundle]]; // 메뉴 뷰컨트롤러 Identifier는 MenuViewController입니다. MenuViewController *svc = [sb instantiateViewControllerWithIdentifier:@\"MenuViewController\"]; if (self.navigationController) &#123; [[self navigationController] pushViewController:svc animated:YES]; &#125; else &#123; [self presentViewController:svc animated:YES completion:nil]; &#125;&#125;//...@end MenuViewController메뉴 뷰컨트롤러에서는 Back버튼을 만들어서 이전 컨트롤러로 돌아오는 방법을 구현할겁니다. 사실 ViewController위에 MenuViewController가 겹쳐있는 상태에서 MenuViewController를 종료한다는 것이 더 정확한 표현이겠네요.어쨌거나 사용자로 하여금 뷰 컨트롤러를 왔다 갔다 하는 효과를 줄 수 있습니다. MenuViewController.h123456789#import &lt;UIKit/UIKit.h&gt;@interface MenuViewController : UIViewController&#123; IBOutlet UIButton *buttonBack;&#125;-(IBAction)closePage:(id)sender;@end MenuViewController.h1234567891011121314#import \"MenuViewController.h\"@interface MenuViewController ()@end@implementation MenuViewController//...-(IBAction)closePage:(id)sender&#123; // 자기 자신을 종료합니다. [self dismissViewControllerAnimated:YES completion:Nil];&#125;//...@end 이제 가장 중요한 설정이 있습니다.메뉴 뷰컨트롤러의 Identifier를 정해주는 것인데요.ViewController.m에서 작성한 아래의 구문에 들어가는 “MenuViewController”를 명시해야 합니다. 1MenuViewController *svc &#x3D; [sb instantiateViewControllerWithIdentifier:@&quot;MenuViewController&quot;]; 스토리보드에서 MenuViewController를 클릭하고 우측 영역에서 3번째 탭show the identity inspector를 열어서 아래와 Identity의 Storyboard ID를 설정해주세요. 마무리설명 안한 부분에 대해서는 책에서도 금방 얻을 수 있는 정보거나 세세한 정보까지 정리할 시간이 없어서 하지 않는 경우가 많습니다.앞으로 시간이 나고 블로깅 스킬이 늘어나면 글쓰는 시간이 줄면서 조금 더 자세히 쓸 수 있지 않을까 기대합니다.그럼 이번 포스트는 여기서 마칩니다.","categories":[{"name":"iOS","slug":"iOS","permalink":"https://dev-sawd.github.io/categories/iOS/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[ETC] Kotlin vs Java","slug":"ETC-Kotlin-vs-Java","date":"2018-06-17T09:56:47.000Z","updated":"2022-01-26T13:51:20.962Z","comments":true,"path":"2018/06/17/ETC-Kotlin-vs-Java/","link":"","permalink":"https://dev-sawd.github.io/2018/06/17/ETC-Kotlin-vs-Java/","excerpt":"아직까지는..회사나 개인 프로젝트에서 사용하는 언어는 Kotlin보다는 Java입니다.하지만 요즘 주변에서 Java만큼이나 Kotlin에 대해서 정보가 많이 들어옵니다.아직 사용해보지 않은 Kotlin에 대해서 짧게나마 알아보고자 합니다. KotlinKotlin은 JVM, Android, Browser를 위한 정적 타입의 프로그래밍 언어입니다.정적 으로 타입이 지정된다는 것은 Java와는 다른것입니다.","text":"아직까지는..회사나 개인 프로젝트에서 사용하는 언어는 Kotlin보다는 Java입니다.하지만 요즘 주변에서 Java만큼이나 Kotlin에 대해서 정보가 많이 들어옵니다.아직 사용해보지 않은 Kotlin에 대해서 짧게나마 알아보고자 합니다. KotlinKotlin은 JVM, Android, Browser를 위한 정적 타입의 프로그래밍 언어입니다.정적 으로 타입이 지정된다는 것은 Java와는 다른것입니다. 특징타입 추론Kotlin은 타입추론이 가능합니다.어떤 변수에 값을 지정하는 것 만으로 그 변수가 어떤 형태인지를 유추해서 지정한다는 것 입니다. 1var name = \"SAWD\" 간결해진 문법Kotlin은 이 name을 문자열로 선언합니다.세미콜론도 필요없고 한층 더 간결해진 문법입니다. Null 체크Java를 사용하면서 항상 따라다니는 NullPointException에서 해방될 수 있습니다.접근하고자 하는 변수나 클래스가 언제 null인지 알 수 있으며 컴파일러가 이것을 확인하도록 합니다. 12var name: String = \"SAWD\"name = null // error 12var name: String? = \"SAWD\"name = null // ok 스마트 캐스팅name의 타입을 확인한 후 String으로 캐스팅합니다. 123if (name is String) &#123; return name.length&#125; 이외에특이한 점은 Java와 함께 사용할 수 있다는 점이며 JVM으로 실행 할 수 있는 바이트 코드로 컴파일됩니다.또한 Android IDE를 개발한 제트브레인에서 내놓은 언어인 만큼 Android Studio에서 클릭 몇번으로 Java에서 Kotlin으로 코드 컨버트가 가능합니다.모두가 우려하는 Java와의 호환을 제트브레인은 “100% 가능하다”라고 설명했습니다. 마치며현재 Android에서 Java로 개발하는 것 보다 코드의 양이 줄고 널 포인트에 대한 안정성 때문에 조금씩 무게가 옮겨가는 추세인듯 합니다.조만간 저도 개인 프로젝트에서 Java대신에 Kotlin을 학습하여 적용해 볼 예정입니다.작은 프로젝트를 진행해보고 소감을 적어 제가 느낀점을 공유 할 예정입니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[iOS] UILabel을 클릭했을때 처리","slug":"iOS-How-to-add-tapgesture-at-UILabel","date":"2018-06-16T12:10:18.000Z","updated":"2022-01-26T13:51:20.962Z","comments":true,"path":"2018/06/16/iOS-How-to-add-tapgesture-at-UILabel/","link":"","permalink":"https://dev-sawd.github.io/2018/06/16/iOS-How-to-add-tapgesture-at-UILabel/","excerpt":"","text":"개인 프로젝트를 진행하면서..UILabel을 탭했을때 페이지를 넘어가거나 특정 일을 처리해야 하는 경우가 생겼습니다.iOS와 특히 Objective C 문법 개념을 같이 학습하려고 하니 필요한 부분들은 정리해 둘 필요가 있는것 같습니다.그래야 안잊어 버립니다.. 검색해보니 생각보다 간단하게 처리할 수 있을 것 같습니다.저는 viewDidLoad에 아래와 같이 UILabel을 클릭했을때 호출할 delegate와 action을 설정하였습니다. 12345678- (void)viewDidLoad &#123; ... [labelMenu setUserInteractionEnabled:YES]; UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(labelTap:)]; [tapGesture setDelegate:self]; [labelMenu addGestureRecognizer:tapGesture]; ...&#125; 그리고 같은 파일안에서 labelTap을 정의하고 처리작업을 넣었습니다. 123- (void)labelTap:(UITapGestureRecognizer *)recognizer &#123; NSLog(@\"label is tapped\");&#125; 이제 해당 UILabel을 클릭하면 Log가 찍히는 것을 볼 수 있을 것입니다.","categories":[{"name":"iOS","slug":"iOS","permalink":"https://dev-sawd.github.io/categories/iOS/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"[Android] About Material Design","slug":"Android-About-Material-Design","date":"2018-06-15T02:53:02.000Z","updated":"2022-01-26T13:51:20.958Z","comments":true,"path":"2018/06/15/Android-About-Material-Design/","link":"","permalink":"https://dev-sawd.github.io/2018/06/15/Android-About-Material-Design/","excerpt":"Material?머티리얼 디자인은 기존에 안드로이드의 사용성, 가독성이 떨어지는 디자인을 개선하고 일관되도록 하는 지침입니다.빠른 디바이스의 성장에 발맞추어 UI/UX도 진화해야 한다고 생각한 구글의 주도하에 이루어지고 있습니다.구글은 모바일과 데스크탑 그리고 이외에 다양한 디바이스에서 적용할 수 있고 또 그렇게 하도록 가이드하고 있습니다. 머티리얼 디자인은 질감이 느껴지는 표면(tactile surfaces)과 대담하고 선명한 그래픽 디자인(bold graphic design),그리고 아름답고 직관적인 사용자 경험을 위한 자연스러운 애니메이션을 특징으로 합니다. 설명이 어렵다구요? Google Developers에서 제작한 영상을 보면 더 쉽게 와닿을겁니다.","text":"Material?머티리얼 디자인은 기존에 안드로이드의 사용성, 가독성이 떨어지는 디자인을 개선하고 일관되도록 하는 지침입니다.빠른 디바이스의 성장에 발맞추어 UI/UX도 진화해야 한다고 생각한 구글의 주도하에 이루어지고 있습니다.구글은 모바일과 데스크탑 그리고 이외에 다양한 디바이스에서 적용할 수 있고 또 그렇게 하도록 가이드하고 있습니다. 머티리얼 디자인은 질감이 느껴지는 표면(tactile surfaces)과 대담하고 선명한 그래픽 디자인(bold graphic design),그리고 아름답고 직관적인 사용자 경험을 위한 자연스러운 애니메이션을 특징으로 합니다. 설명이 어렵다구요? Google Developers에서 제작한 영상을 보면 더 쉽게 와닿을겁니다. 또는 아래의 사이트에서 머티리얼에 대해서 구경하세요. Material IO Material Design이 적용된 사이트여러분은 이미 Material Design에 많이 노출되어 있습니다.많은 유저들이 사용하고 있는 Youtube. 이미 머티리얼 디자인이 적용되어있는 사이트입니다.또한 SAWD 제 블로그도 머티리얼 디자인이 적용되어 있습니다. Google 메인 페이지 또한 적용되어 있습니다. 그외에 Google Drive, Gmail, Google Maps등 많은 사이트에 적용되어 있습니다. 그래서 어떤 것들을 만들 수 있지?앞으로 시간이 날 때마다 공부하면서 간단한 샘플을 만들 예정이지만 당장 여러분들이 실행해 확인해 볼 수 있는 샘플을 몇가지 소개합니다. Eajy - Material Design Demo codelabs - Material Design Style","categories":[{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"}],"tags":[{"name":"Material Design","slug":"Material-Design","permalink":"https://dev-sawd.github.io/tags/Material-Design/"}]},{"title":"[Objectiv-C] id에 대해서","slug":"Objectiv-C-id","date":"2018-06-14T15:28:08.000Z","updated":"2022-01-26T13:51:20.961Z","comments":true,"path":"2018/06/15/Objectiv-C-id/","link":"","permalink":"https://dev-sawd.github.io/2018/06/15/Objectiv-C-id/","excerpt":"설명에 앞서블로그에 쓰고있는 순서는 배움의 순서와는 상관이 없습니다.단지 제가 필요하거나 혹은 방문자분들께 도움이 될만한 정보를 조각내서 올릴 예정입니다.강좌 방식을 원하는 분들과는 조금 거리가 있을 수 있습니다. 포인터는 포인터인데..객체를 가리키기 위한 포인터를 선언 할 때 해당 객체의 클래스를 지정합니다. 1NSString *str;","text":"설명에 앞서블로그에 쓰고있는 순서는 배움의 순서와는 상관이 없습니다.단지 제가 필요하거나 혹은 방문자분들께 도움이 될만한 정보를 조각내서 올릴 예정입니다.강좌 방식을 원하는 분들과는 조금 거리가 있을 수 있습니다. 포인터는 포인터인데..객체를 가리키기 위한 포인터를 선언 할 때 해당 객체의 클래스를 지정합니다. 1NSString *str; 하지만 정확히 어떤 객체를 가리킬지 정의하지 않고 일단 포인터만 만들어야 할 때도 있습니다.이럴때 사용할 수 있는 타입이 id입니다. “일단 만들긴 하는데 어떤걸 가리킬지는…” 12345// 변수로 선언id delegate;// 메서드 선언. id를 반환 가능-(id) foo: (int) 일단 유심히 봐야할 점이 애스터리시크(*)가 없습니다.id가 애스터리스크를 내포하고 있기 때문입니다. Objective-C Documentation에서는 아래와 같이 정의하고 있습니다. 예시12NSString *str = @\"what is id in Objective-C?\";id title = str; 12id data = \"...\";NSString *desc = [data description]; 꼭 알아야 하는 개념?분명히 Documentation에 많은 부분이 id를 리턴하는 형태로 되어있을 것 입니다.하지만 처음부터 id에 대해서 깊게 다가가기 보다는 대략적인 개념만 알고 다음에 다시 찾아볼 기회가 있을 것 입니다.자주 사용하고, 자주 보게되는 문법, 메소드 들은 자연스레 익혀지기 마련입니다.","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://dev-sawd.github.io/categories/Objective-C/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"}]},{"title":"PNG? SVG?","slug":"png-svg","date":"2018-06-14T08:45:18.000Z","updated":"2022-01-26T13:51:20.958Z","comments":true,"path":"2018/06/14/png-svg/","link":"","permalink":"https://dev-sawd.github.io/2018/06/14/png-svg/","excerpt":"이미지…공부용으로 만들고있는 어플리케이션에 사용할 이미지를 찾고있는데 꼭 다운로드 포멧에 PNG와 함께 SVG가 있었습니다.너무 당연하게 PNG로만 다운받아서 사용하고(사실 이게 쓰기도 편하긴 한데..) 있었는데 문득 SVG가 무엇인지 궁금했습니다.그래서 짧은 시간 동안 특징만 알아보고 앞으로 PNG와 SVG의 사용을 달리하려고 합니다.","text":"이미지…공부용으로 만들고있는 어플리케이션에 사용할 이미지를 찾고있는데 꼭 다운로드 포멧에 PNG와 함께 SVG가 있었습니다.너무 당연하게 PNG로만 다운받아서 사용하고(사실 이게 쓰기도 편하긴 한데..) 있었는데 문득 SVG가 무엇인지 궁금했습니다.그래서 짧은 시간 동안 특징만 알아보고 앞으로 PNG와 SVG의 사용을 달리하려고 합니다. PNGPortable Network Graphics무손식 압축 포멧으로 256색에 한정되던 GIF의 한계를 극복하고 32비트 트루컬러를 표현할 수 있습니다.아쉽게 GIF는 지원하지 않습니다.알파채널을 이용해 불투명도를 지정할 수 있는 것이 특징입니다. SVGScalable Vector Graphics벡터 이미지의 공통적인 특성으로 확대를 해도 깨지지 않는다는 장점이 있습니다.높은 PPI의 스마트 폰들이 대중화된 시점에서 많은 웹사이트들이 이용하는 포멧으로 보통 PNG나 GIF보다 용량이 작다고 알려져있습니다.XML 형식으로 이루어져 있어 높은 질의 그래프를 그리는 등의 활용이 가능합니다. 그래서 어떤것을 사용하라고?투명도가 필요하거나 크기를 늘렸다 줄였다 조절할 필요가 없는 곳에는 PNG를 사용하면됩니다.반면 여러 해상도에 맞게 크기를 늘렸다 줄였다 해야 하거나 로고등에 사용하는 이미지 형태는 SVG를 사용할 것을 추천합니다.","categories":[{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"}],"tags":[]},{"title":"gitignore가 문제야 뭐야?","slug":"gitignore","date":"2018-06-14T08:35:59.000Z","updated":"2022-01-26T13:51:20.957Z","comments":true,"path":"2018/06/14/gitignore/","link":"","permalink":"https://dev-sawd.github.io/2018/06/14/gitignore/","excerpt":"","text":"HEXO에 대해 점점 친해지고 있는 와중에버전관리중인 git에서 문제가 생겼습니다… 테마를 바꾸려고 themes/something1 에서 themes/something2를 추가하고something1을 삭제했더니.. themes 폴더를 전혀 인식하지 못하는 현상이 생겼습니다… 결국 git 주소를 하나 더 생성해서 어찌저찌 해결하기는 했는데기존에 가지고 있던 git에서 gitignore나 global gitignore에서도 그 해결점을 찾지 못했습니다. 버그인지 원래 동작이 저렇게 되는것인지 모르겠는데 주의해야겠네요. 이것으로 시간 3시간을…..ㅜㅜ","categories":[{"name":"Samll talk","slug":"Samll-talk","permalink":"https://dev-sawd.github.io/categories/Samll-talk/"}],"tags":[]},{"title":"[iOS] App Transport Security has blocked a cleartext HTTP","slug":"app-transport-security-http","date":"2018-06-12T03:08:46.000Z","updated":"2022-01-26T13:51:20.954Z","comments":true,"path":"2018/06/12/app-transport-security-http/","link":"","permalink":"https://dev-sawd.github.io/2018/06/12/app-transport-security-http/","excerpt":"iOS를 공부하면서 개발하는데..개인 프로젝트로 날씨를 보여주는 앱을 만들고 있습니다.Objective C를 기반으로 공부하면서 시작하는데 http 통신에서 난데없이 에러가 발생했습니다. 에러 본문App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure.Temporary exceptions can be configured via your app’s Info.plist file.","text":"iOS를 공부하면서 개발하는데..개인 프로젝트로 날씨를 보여주는 앱을 만들고 있습니다.Objective C를 기반으로 공부하면서 시작하는데 http 통신에서 난데없이 에러가 발생했습니다. 에러 본문App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure.Temporary exceptions can be configured via your app’s Info.plist file. 왜 발생하는 것인가?앞으로도 그럴것이지만 보안때문이라고 누구나 짐작할 수 있습니다.ATS(App Transport Security)는 iOS9, OSX 10.11에서 앱과 네트워크간 안전한 통신을 보장하기 위한 기능입니다.안전하지 않은 수준의 https, http 통신을 차단하는 것입니다.시작은 2016년 하반기부터 적용됐습니다. 어떻게 해결 할 수 있나?Xcode의 Project 내에 Info.plist가 있습니다. info.plist &gt; 우클릭 &gt; open &gt; source code 그리고 아래의 내용을 넣어주면 됩니다. 1234&lt;key&gt;NSAppTransportSecurity&lt;&#x2F;key&gt; &lt;dict&gt; &lt;key&gt;NSAllowsArbitraryLoads&lt;&#x2F;key&gt;&lt;true&#x2F;&gt; &lt;&#x2F;dict&gt; 아래와 같이 적당한(?!) 위치에 붙여 넣어주면 해결할 수 있습니다.","categories":[{"name":"iOS","slug":"iOS","permalink":"https://dev-sawd.github.io/categories/iOS/"}],"tags":[{"name":"Troubleshooting","slug":"Troubleshooting","permalink":"https://dev-sawd.github.io/tags/Troubleshooting/"}]}],"categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://dev-sawd.github.io/categories/MySQL/"},{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/categories/Docker/"},{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/categories/Golang/"},{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/categories/Chaincode/"},{"name":"Node.js","slug":"Node-js","permalink":"https://dev-sawd.github.io/categories/Node-js/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"https://dev-sawd.github.io/categories/Data-Structure/"},{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/categories/GitLab/"},{"name":"Hyperledger Fabric","slug":"Hyperledger-Fabric","permalink":"https://dev-sawd.github.io/categories/Hyperledger-Fabric/"},{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/categories/ETC/"},{"name":"MacOS","slug":"MacOS","permalink":"https://dev-sawd.github.io/categories/MacOS/"},{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/categories/Github/"},{"name":"Linux","slug":"Linux","permalink":"https://dev-sawd.github.io/categories/Linux/"},{"name":"Android","slug":"Android","permalink":"https://dev-sawd.github.io/categories/Android/"},{"name":"iOS","slug":"iOS","permalink":"https://dev-sawd.github.io/categories/iOS/"},{"name":"Objective-C","slug":"Objective-C","permalink":"https://dev-sawd.github.io/categories/Objective-C/"},{"name":"Samll talk","slug":"Samll-talk","permalink":"https://dev-sawd.github.io/categories/Samll-talk/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://dev-sawd.github.io/tags/MySQL/"},{"name":"Docker","slug":"Docker","permalink":"https://dev-sawd.github.io/tags/Docker/"},{"name":"M1 MacBook Air","slug":"M1-MacBook-Air","permalink":"https://dev-sawd.github.io/tags/M1-MacBook-Air/"},{"name":"TIL","slug":"TIL","permalink":"https://dev-sawd.github.io/tags/TIL/"},{"name":"Golang","slug":"Golang","permalink":"https://dev-sawd.github.io/tags/Golang/"},{"name":"Chaincode","slug":"Chaincode","permalink":"https://dev-sawd.github.io/tags/Chaincode/"},{"name":"Pattern","slug":"Pattern","permalink":"https://dev-sawd.github.io/tags/Pattern/"},{"name":"GitLab","slug":"GitLab","permalink":"https://dev-sawd.github.io/tags/GitLab/"},{"name":"Docker-Compose","slug":"Docker-Compose","permalink":"https://dev-sawd.github.io/tags/Docker-Compose/"},{"name":"Windows","slug":"Windows","permalink":"https://dev-sawd.github.io/tags/Windows/"},{"name":"HEXO","slug":"HEXO","permalink":"https://dev-sawd.github.io/tags/HEXO/"},{"name":"ETC","slug":"ETC","permalink":"https://dev-sawd.github.io/tags/ETC/"},{"name":"git","slug":"git","permalink":"https://dev-sawd.github.io/tags/git/"},{"name":"Github","slug":"Github","permalink":"https://dev-sawd.github.io/tags/Github/"},{"name":"MacOS","slug":"MacOS","permalink":"https://dev-sawd.github.io/tags/MacOS/"},{"name":"Example","slug":"Example","permalink":"https://dev-sawd.github.io/tags/Example/"},{"name":"Troubleshooting","slug":"Troubleshooting","permalink":"https://dev-sawd.github.io/tags/Troubleshooting/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://dev-sawd.github.io/tags/Material-Design/"}]}